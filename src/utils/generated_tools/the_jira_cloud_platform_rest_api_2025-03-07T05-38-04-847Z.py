"""
title: The Jira Cloud platform REST API for Open-WebUI
description: Jira Cloud platform REST API documentation
repository: https://github.com/your-username/open-webui-tools
author: @your-username
author_url: https://github.com/your-username
version: 1001.0.0-SNAPSHOT-b5a48ff2c26218961680e8ef4b61f08fac3c4942
changelog:
  - 1001.0.0-SNAPSHOT-b5a48ff2c26218961680e8ef4b61f08fac3c4942: Initial version
"""

import requests
import json
import os
from typing import Dict, List, Any, Optional, Union, Callable, Awaitable
from pydantic import BaseModel, Field, field_validator


class EventEmitter:
    def __init__(self, event_emitter: Callable[[dict], Awaitable[None]]):
        self.event_emitter = event_emitter

    async def emit_status(
        self, description: str, done: bool, error: bool = False
    ) -> None:
        """
        Emit a status event with a description and completion status.

        Args:
            description: Text description of the status.
            done: Whether the process is complete.
            error: Whether an error occurred during the process.
        """
        if error and not done:
            raise ValueError("Error status must also be marked as done")

        icon = "âœ…" if done and not error else "ðŸš« " if error else "ðŸ’¬"

        try:
            await self.event_emitter(
                {
                    "data": {
                        "description": f"{icon} {description}",
                        "status": "complete" if done else "in_progress",
                        "done": done,
                    },
                    "type": "status",
                }
            )

        except Exception as e:
            raise RuntimeError(f"Failed to emit status event: {str(e)}") from e

    async def emit_message(self, content: str) -> None:
        """
        Emit a simple message event.

        Args:
            content: The message content to emit.
        """
        if not content:
            raise ValueError("Message content cannot be empty")

        try:
            await self.event_emitter({"data": {"content": content}, "type": "message"})

        except Exception as e:
            raise RuntimeError(f"Failed to emit message event: {str(e)}") from e

    async def emit_source(
        self, name: str, url: str, content: str, html: bool = False
    ) -> None:
        """
        Emit a citation source event.

        Args:
            name: The name of the source.
            url: The URL of the source.
            content: The content of the citation.
            html: Whether the content is HTML formatted.
        """
        if not name or not url or not content:
            raise ValueError("Source name, URL, and content are required")

        try:
            await self.event_emitter(
                {
                    "type": "citation",
                    "data": {
                        "document": [content],
                        "metadata": [{"source": url, "html": html}],
                        "source": {"name": name},
                    },
                }
            )
        except Exception as e:
            raise RuntimeError(f"Failed to emit source event: {str(e)}") from e

    async def emit_table(
        self,
        headers: List[str],
        rows: List[List[Any]],
        title: Optional[str] = "Results",
    ) -> None:
        """
        Emit a formatted markdown table of data.

        Args:
            headers: List of column headers for the table.
            rows: List of rows, where each row is a list of values.
            title: Optional title for the table, defaults to "Results".
        """
        if not headers:
            raise ValueError("Table must have at least one header")

        if any(len(row) != len(headers) for row in rows):
            raise ValueError("All rows must have the same number of columns as headers")

        # Create markdown table
        table = (
            f"### {title}\n\n|"
            + "|".join(headers)
            + "|\n|"
            + "|".join(["---"] * len(headers))
            + "|\n"
        )

        for row in rows:
            # Convert all cells to strings and escape pipe characters
            formatted_row = [str(cell).replace("|", "\\|") for cell in row]
            table += "|" + "|".join(formatted_row) + "|\n"

        table += "\n"

        # Reuse the emit_message method
        await self.emit_message(table)


class Tools:
    def __init__(self):
        self.valves = self.Valves()
        self.user_valves = self.UserValves()

    class UserValves(BaseModel):
        user_token: str = Field(
            "",
            description="Your API access token",
        )

    class Valves(BaseModel):
        base_url: str = Field(
            "",
            description="API server address (e.g., https://api.example.com)",
        )
        api_token: str = Field(
            "",
            description="Default API token (used if user doesn't provide one)",
        )

        @field_validator('base_url')
        def validate_url(cls, v):
            if not v:
                raise ValueError("Base URL cannot be empty")
            return v

    def _get_auth_token(self, __user__: dict = {}) -> Optional[str]:
        """
        Get the authentication token from user valves or tool valves
        """
        # Prioritize user token, fall back to tool token
        try:
            if __user__ and "valves" in __user__ and "user_token" in __user__["valves"]:
                token = __user__["valves"]["user_token"]
                if token:
                    return token
            return self.valves.api_token
        except Exception as e:
            raise ValueError(f"Unable to get API token: {str(e)}")

    def _get_api_server(self) -> str:
        """
        Get the API server URL from tool configuration
        """
        if self.valves.base_url:
            return self.valves.base_url
        raise ValueError("API server address must be set in tool configuration")

    def _make_api_request(self, method: str, endpoint: str, __user__: dict = {}, data: Dict[str, Any] = None, params: Dict[str, Any] = None) -> str:
        """
        Send a request to the API

        :param method: HTTP method (GET, POST, PUT, DELETE)
        :param endpoint: API endpoint path
        :param __user__: User information dictionary
        :param data: Request body data dictionary
        :param params: Request parameters dictionary
        :return: API response as JSON string
        """
        token = self._get_auth_token(__user__)
        if not token:
            raise ValueError("API token not found. Please add your token in user settings.")

        # Get API server address
        server_url = self._get_api_server()

        # Build complete URL
        url = f"{server_url.rstrip('/')}{basePath}{endpoint}"

        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        try:
            if method.lower() == "get":
                response = requests.get(url, headers=headers, params=params)
            elif method.lower() == "post":
                response = requests.post(url, headers=headers, json=data, params=params)
            elif method.lower() == "put":
                response = requests.put(url, headers=headers, json=data, params=params)
            elif method.lower() == "delete":
                response = requests.delete(url, headers=headers, params=params)
            else:
                raise ValueError(f"Unsupported request method: {method}")

            if response.status_code < 200 or response.status_code >= 300:
                error_message = response.text
                return json.dumps({"error": f"Request failed, status code: {response.status_code}, error message: {error_message}, request URL: {url}"}, ensure_ascii=False)

            # Check if response contains content
            if response.text.strip():
                return json.dumps(response.json(), ensure_ascii=False)
            return json.dumps({"status": "success", "status_code": response.status_code}, ensure_ascii=False)

        except requests.exceptions.RequestException as e:
            error_message = str(e)
            try:
                if hasattr(e, 'response') and e.response and e.response.text:
                    error_message = f"{error_message}: {e.response.text}"
            except:
                pass
            error_response = {"error": f"API request failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)

    async def getBanner(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the current announcement banner configuration.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get announcement banner configuration", False)

        try:
            endpoint = "/rest/api/2/announcementBanner"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get announcement banner configuration Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get announcement banner configuration completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get announcement banner configuration failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setBanner(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the announcement banner configuration.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update announcement banner configuration", False)

        try:
            endpoint = "/rest/api/2/announcementBanner"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update announcement banner configuration Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update announcement banner configuration completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update announcement banner configuration failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCustomFieldsConfigurations(self, id: List[Any] = None, fieldContextId: List[Any] = None, issueId: int = None, projectKeyOrId: str = None, issueTypeId: str = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of configurations for list of custom fields of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).

The result can be filtered by one of these criteria:

 *  `id`.
 *  `fieldContextId`.
 *  `issueId`.
 *  `projectKeyOrId` and `issueTypeId`.

Otherwise, all configurations for the provided list of custom fields are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.

        :param id: The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
        :param fieldContextId: The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
        :param issueId: The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.
        :param projectKeyOrId: The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.
        :param issueTypeId: The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk get custom field configurations", False)

        try:
            endpoint = "/rest/api/2/app/field/context/configuration/list"
            params = {}
            if id is not None:
                params["id"] = id
            if fieldContextId is not None:
                params["fieldContextId"] = fieldContextId
            if issueId is not None:
                params["issueId"] = issueId
            if projectKeyOrId is not None:
                params["projectKeyOrId"] = projectKeyOrId
            if issueTypeId is not None:
                params["issueTypeId"] = issueTypeId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk get custom field configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk get custom field configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk get custom field configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateMultipleCustomFieldValues(self, generateChangelog: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.

Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.

**[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param generateChangelog: Whether to generate a changelog for this update.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update custom fields", False)

        try:
            endpoint = "/rest/api/2/app/field/value"
            params = {}
            if generateChangelog is not None:
                params["generateChangelog"] = generateChangelog
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update custom fields Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update custom fields completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update custom fields failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCustomFieldConfiguration(self, fieldIdOrKey: str, id: List[Any] = None, fieldContextId: List[Any] = None, issueId: int = None, projectKeyOrId: str = None, issueTypeId: str = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).

The result can be filtered by one of these criteria:

 *  `id`.
 *  `fieldContextId`.
 *  `issueId`.
 *  `projectKeyOrId` and `issueTypeId`.

Otherwise, all configurations are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.

        :param fieldIdOrKey: The ID or key of the custom field, for example `customfield_10000`.
        :param id: The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
        :param fieldContextId: The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.
        :param issueId: The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.
        :param projectKeyOrId: The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.
        :param issueTypeId: The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get custom field configurations", False)

        try:
            endpoint = f"/rest/api/2/app/field/{fieldIdOrKey}/context/configuration"
            params = {}
            if id is not None:
                params["id"] = id
            if fieldContextId is not None:
                params["fieldContextId"] = fieldContextId
            if issueId is not None:
                params["issueId"] = issueId
            if projectKeyOrId is not None:
                params["projectKeyOrId"] = projectKeyOrId
            if issueTypeId is not None:
                params["issueTypeId"] = issueTypeId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get custom field configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get custom field configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get custom field configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateCustomFieldConfiguration(self, fieldIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.

        :param fieldIdOrKey: The ID or key of the custom field, for example `customfield_10000`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update custom field configurations", False)

        try:
            endpoint = f"/rest/api/2/app/field/{fieldIdOrKey}/context/configuration"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update custom field configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update custom field configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update custom field configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateCustomFieldValue(self, fieldIdOrKey: str, generateChangelog: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the value of a custom field on one or more issues.

Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.

**[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param fieldIdOrKey: The ID or key of the custom field. For example, `customfield_10010`.
        :param generateChangelog: Whether to generate a changelog for this update.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update custom field value", False)

        try:
            endpoint = f"/rest/api/2/app/field/{fieldIdOrKey}/value"
            params = {}
            if generateChangelog is not None:
                params["generateChangelog"] = generateChangelog
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update custom field value Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update custom field value completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update custom field value failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getApplicationProperty(self, key: str = None, permissionLevel: str = None, keyFilter: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all application properties or an application property.

If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-2-application-properties-id-put) for descriptions of editable properties.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param key: The key of the application property.
        :param permissionLevel: The permission level of all items being returned in the list.
        :param keyFilter: When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get application property", False)

        try:
            endpoint = "/rest/api/2/application-properties"
            params = {}
            if key is not None:
                params["key"] = key
            if permissionLevel is not None:
                params["permissionLevel"] = permissionLevel
            if keyFilter is not None:
                params["keyFilter"] = keyFilter

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get application property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get application property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get application property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAdvancedSettings(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get advanced settings", False)

        try:
            endpoint = "/rest/api/2/application-properties/advanced-settings"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get advanced settings Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get advanced settings completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get advanced settings failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setApplicationProperty(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.

#### Advanced settings ####

The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).

| Key | Description | Default value |  
| -- | -- | -- |  
| `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  
| `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  
| `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  
| `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  
| `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  
| `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  
| `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  
| `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  
| `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  


#### Look and feel ####

The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).

| Key | Description | Default value |  
| -- | -- | -- |  
| `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  
| `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  
| `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  
| `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  
| `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  
| `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  
| `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  
| `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  
| `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  
| `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |  
| `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  
| `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  
| `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  
| `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  
| `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  


#### Other settings ####

| Key | Description | Default value |  
| -- | -- | -- |  
| `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  


*Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The key of the application property to update.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set application property", False)

        try:
            endpoint = f"/rest/api/2/application-properties/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set application property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set application property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set application property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllApplicationRoles(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all application roles", False)

        try:
            endpoint = "/rest/api/2/applicationrole"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all application roles Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all application roles completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all application roles failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getApplicationRole(self, key: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an application role.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param key: The key of the application role. Use the [Get all application roles](#api-rest-api-2-applicationrole-get) operation to get the key for each application role.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get application role", False)

        try:
            endpoint = f"/rest/api/2/applicationrole/{key}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get application role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get application role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get application role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAttachmentContent(self, id: str, redirect: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.

To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-2-attachment-thumbnail-id-get).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If attachments are added in private comments, the comment-level restriction will be applied.

        :param id: The ID of the attachment.
        :param redirect: Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get attachment content", False)

        try:
            endpoint = f"/rest/api/2/attachment/content/{id}"
            params = {}
            if redirect is not None:
                params["redirect"] = redirect

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get attachment content Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get attachment content completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get attachment content failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAttachmentMeta(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.

Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get Jira attachment settings", False)

        try:
            endpoint = "/rest/api/2/attachment/meta"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get Jira attachment settings Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get Jira attachment settings completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get Jira attachment settings failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAttachmentThumbnail(self, id: str, redirect: bool = None, fallbackToDefault: bool = None, width: int = None, height: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the thumbnail of an attachment.

To return the attachment contents, use [Get attachment content](#api-rest-api-2-attachment-content-id-get).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If attachments are added in private comments, the comment-level restriction will be applied.

        :param id: The ID of the attachment.
        :param redirect: Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.
        :param fallbackToDefault: Whether a default thumbnail is returned when the requested thumbnail is not found.
        :param width: The maximum width to scale the thumbnail to.
        :param height: The maximum height to scale the thumbnail to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get attachment thumbnail", False)

        try:
            endpoint = f"/rest/api/2/attachment/thumbnail/{id}"
            params = {}
            if redirect is not None:
                params["redirect"] = redirect
            if fallbackToDefault is not None:
                params["fallbackToDefault"] = fallbackToDefault
            if width is not None:
                params["width"] = width
            if height is not None:
                params["height"] = height

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get attachment thumbnail Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get attachment thumbnail completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get attachment thumbnail failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeAttachment(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an attachment from an issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the project holding the issue containing the attachment:

 *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
 *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.

        :param id: The ID of the attachment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete attachment", False)

        try:
            endpoint = f"/rest/api/2/attachment/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete attachment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete attachment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete attachment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAttachment(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the metadata for an attachment. Note that the attachment itself is not returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If attachments are added in private comments, the comment-level restriction will be applied.

        :param id: The ID of the attachment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get attachment metadata", False)

        try:
            endpoint = f"/rest/api/2/attachment/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get attachment metadata Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get attachment metadata completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get attachment metadata failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def expandAttachmentForHumans(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.

Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-2-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If attachments are added in private comments, the comment-level restriction will be applied.

        :param id: The ID of the attachment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all metadata for an expanded attachment", False)

        try:
            endpoint = f"/rest/api/2/attachment/{id}/expand/human"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all metadata for an expanded attachment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all metadata for an expanded attachment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all metadata for an expanded attachment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def expandAttachmentForMachines(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.

Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-2-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** For the issue containing the attachment:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If attachments are added in private comments, the comment-level restriction will be applied.

        :param id: The ID of the attachment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get contents metadata for an expanded attachment", False)

        try:
            endpoint = f"/rest/api/2/attachment/{id}/expand/raw"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get contents metadata for an expanded attachment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get contents metadata for an expanded attachment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get contents metadata for an expanded attachment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAuditRecords(self, offset: int = None, limit: int = None, filter: str = None, from: str = None, to: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of audit records. The list can be filtered to include items:

 *  where each item in `filter` has at least one match in any of these fields:
    
     *  `summary`
     *  `category`
     *  `eventSource`
     *  `objectItem.name` If the object is a user, account ID is available to filter.
     *  `objectItem.parentName`
     *  `objectItem.typeName`
     *  `changedValues.changedFrom`
     *  `changedValues.changedTo`
     *  `remoteAddress`
    
    For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
 *  created on or after a date and time.
 *  created or or before a date and time.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param offset: The number of records to skip before returning the first result.
        :param limit: The maximum number of results to return.
        :param filter: The strings to match with audit field content, space separated.
        :param from: The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.
        :param to: The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get audit records", False)

        try:
            endpoint = "/rest/api/2/auditing/record"
            params = {}
            if offset is not None:
                params["offset"] = offset
            if limit is not None:
                params["limit"] = limit
            if filter is not None:
                params["filter"] = filter
            if from is not None:
                params["from"] = from
            if to is not None:
                params["to"] = to

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get audit records Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get audit records completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get audit records failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllSystemAvatars(self, type: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of system avatar details by owner type, where the owner types are issue type, project, user or priority.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param type: The avatar type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get system avatars by type", False)

        try:
            endpoint = f"/rest/api/2/avatar/{type}/system"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get system avatars by type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get system avatars by type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get system avatars by type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getBulkChangelogs(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Bulk fetch changelogs for multiple issues and filter by fields

Returns a paginated list of all changelogs for given issues sorted by changelog date and issue IDs, starting from the oldest changelog and smallest issue ID.

Issues are identified by their ID or key, and optionally changelogs can be filtered by their field IDs. You can request the changelogs of up to 1000 issues and can filter them by up to 10 field IDs.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects that the issues are in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issues.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk fetch changelogs", False)

        try:
            endpoint = "/rest/api/2/changelog/bulkfetch"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk fetch changelogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk fetch changelogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk fetch changelogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllUserDataClassificationLevels(self, status: List[Any] = None, orderBy: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all classification levels.

**[Permissions](#permissions) required:** None.

        :param status: Optional set of statuses to filter by.
        :param orderBy: Ordering of the results by a given field. If not provided, values will not be sorted.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all classification levels", False)

        try:
            endpoint = "/rest/api/2/classification-levels"
            params = {}
            if status is not None:
                params["status"] = status
            if orderBy is not None:
                params["orderBy"] = orderBy

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all classification levels Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all classification levels completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all classification levels failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCommentsByIds(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Comments are returned where the user:

 *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param expand: Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `renderedBody` Returns the comment body rendered in HTML.
 *  `properties` Returns the comment's properties.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get comments by IDs", False)

        try:
            endpoint = "/rest/api/2/comment/list"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get comments by IDs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get comments by IDs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get comments by IDs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCommentPropertyKeys(self, commentId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the keys of all the properties of a comment.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param commentId: The ID of the comment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get comment property keys", False)

        try:
            endpoint = f"/rest/api/2/comment/{commentId}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get comment property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get comment property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get comment property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteCommentProperty(self, commentId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a comment property.

**[Permissions](#permissions) required:** either of:

 *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
 *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.

Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.

        :param commentId: The ID of the comment.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete comment property", False)

        try:
            endpoint = f"/rest/api/2/comment/{commentId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete comment property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete comment property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete comment property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCommentProperty(self, commentId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the value of a comment property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param commentId: The ID of the comment.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get comment property", False)

        try:
            endpoint = f"/rest/api/2/comment/{commentId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get comment property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get comment property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get comment property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setCommentProperty(self, commentId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** either of:

 *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
 *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.

Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.

        :param commentId: The ID of the comment.
        :param propertyKey: The key of the property. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set comment property", False)

        try:
            endpoint = f"/rest/api/2/comment/{commentId}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set comment property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set comment property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set comment property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findComponentsForProjects(self, projectIdsOrKeys: List[Any] = None, startAt: int = None, maxResults: int = None, orderBy: str = None, query: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdsOrKeys: The project IDs and/or project keys (case sensitive).
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `description` Sorts by the component description.
 *  `name` Sorts by component name.
        :param query: Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find components for projects", False)

        try:
            endpoint = "/rest/api/2/component"
            params = {}
            if projectIdsOrKeys is not None:
                params["projectIdsOrKeys"] = projectIdsOrKeys
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if orderBy is not None:
                params["orderBy"] = orderBy
            if query is not None:
                params["query"] = query

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find components for projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find components for projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find components for projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createComponent(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create component", False)

        try:
            endpoint = "/rest/api/2/component"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create component Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create component completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create component failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteComponent(self, id: str, moveIssuesTo: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a component.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the component.
        :param moveIssuesTo: The ID of the component to replace the deleted component. If this value is null no replacement is made.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete component", False)

        try:
            endpoint = f"/rest/api/2/component/{id}"
            params = {}
            if moveIssuesTo is not None:
                params["moveIssuesTo"] = moveIssuesTo

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete component Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete component completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete component failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getComponent(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a component.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.

        :param id: The ID of the component.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get component", False)

        try:
            endpoint = f"/rest/api/2/component/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get component Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get component completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get component failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateComponent(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the component.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update component", False)

        try:
            endpoint = f"/rest/api/2/component/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update component Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update component completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update component failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getComponentRelatedIssues(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the counts of issues assigned to the component.

This operation can be accessed anonymously.

**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.

 *  **Classic**: `read:jira-work`
 *  **Granular**: `read:field:jira`, `read:project.component:jira`

**[Permissions](#permissions) required:** None.

        :param id: The ID of the component.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get component issues count", False)

        try:
            endpoint = f"/rest/api/2/component/{id}/relatedIssueCounts"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get component issues count Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get component issues count completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get component issues count failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getConfiguration(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get global settings", False)

        try:
            endpoint = "/rest/api/2/configuration"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get global settings Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get global settings completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get global settings failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSelectedTimeTrackingImplementation(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get selected time tracking provider", False)

        try:
            endpoint = "/rest/api/2/configuration/timetracking"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get selected time tracking provider Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get selected time tracking provider completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get selected time tracking provider failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def selectTimeTrackingImplementation(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Selects a time tracking provider.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Select time tracking provider", False)

        try:
            endpoint = "/rest/api/2/configuration/timetracking"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Select time tracking provider Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Select time tracking provider completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Select time tracking provider failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvailableTimeTrackingImplementations(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all time tracking providers", False)

        try:
            endpoint = "/rest/api/2/configuration/timetracking/list"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all time tracking providers Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all time tracking providers completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all time tracking providers failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSharedTimeTrackingConfiguration(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get time tracking settings", False)

        try:
            endpoint = "/rest/api/2/configuration/timetracking/options"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get time tracking settings Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get time tracking settings completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get time tracking settings failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setSharedTimeTrackingConfiguration(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the time tracking settings.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set time tracking settings", False)

        try:
            endpoint = "/rest/api/2/configuration/timetracking/options"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set time tracking settings Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set time tracking settings completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set time tracking settings failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCustomFieldOption(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a custom field option. For example, an option in a select list.

Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The custom field option is returned as follows:

 *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.

        :param id: The ID of the custom field option.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get custom field option", False)

        try:
            endpoint = f"/rest/api/2/customFieldOption/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get custom field option Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get custom field option completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get custom field option failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllDashboards(self, filter: str = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param filter: The filter applied to the list of dashboards. Valid values are:

 *  `favourite` Returns dashboards the user has marked as favorite.
 *  `my` Returns dashboards owned by the user.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all dashboards", False)

        try:
            endpoint = "/rest/api/2/dashboard"
            params = {}
            if filter is not None:
                params["filter"] = filter
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all dashboards Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all dashboards completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all dashboards failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createDashboard(self, extendAdminPermissions: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a dashboard.

**[Permissions](#permissions) required:** None.

        :param extendAdminPermissions: Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create dashboard", False)

        try:
            endpoint = "/rest/api/2/dashboard"
            params = {}
            if extendAdminPermissions is not None:
                params["extendAdminPermissions"] = extendAdminPermissions
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkEditDashboards(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.

**[Permissions](#permissions) required:** None

The dashboards to be updated must be owned by the user, or the user must be an administrator.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk edit dashboards", False)

        try:
            endpoint = "/rest/api/2/dashboard/bulk/edit"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk edit dashboards Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk edit dashboards completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk edit dashboards failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllAvailableDashboardGadgets(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets a list of all available gadgets that can be added to all dashboards.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get available gadgets", False)

        try:
            endpoint = "/rest/api/2/dashboard/gadgets"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get available gadgets Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get available gadgets completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get available gadgets failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDashboardsPaginated(self, dashboardName: str = None, accountId: str = None, owner: str = None, groupname: str = None, groupId: str = None, projectId: int = None, orderBy: str = None, startAt: int = None, maxResults: int = None, status: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-2-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:

 *  Dashboards owned by the user. Not returned for anonymous users.
 *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
 *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
 *  Dashboards shared with a public project.
 *  Dashboards shared with the public.

        :param dashboardName: String used to perform a case-insensitive partial match with `name`.
        :param accountId: User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.
        :param owner: This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.
        :param groupname: As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.
        :param groupId: Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
        :param projectId: Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
 *  `favourite_count` Sorts by dashboard popularity.
 *  `id` Sorts by dashboard ID.
 *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
 *  `name` Sorts by dashboard name.
 *  `owner` Sorts by dashboard owner name.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param status: The status to filter by. It may be active, archived or deleted.
        :param expand: Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `description` Returns the description of the dashboard.
 *  `owner` Returns the owner of the dashboard.
 *  `viewUrl` Returns the URL that is used to view the dashboard.
 *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
 *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
 *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
 *  `editPermissions` Returns details of the edit permissions defined for the dashboard.
 *  `isWritable` Returns whether the current user has permission to edit the dashboard.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search for dashboards", False)

        try:
            endpoint = "/rest/api/2/dashboard/search"
            params = {}
            if dashboardName is not None:
                params["dashboardName"] = dashboardName
            if accountId is not None:
                params["accountId"] = accountId
            if owner is not None:
                params["owner"] = owner
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            if projectId is not None:
                params["projectId"] = projectId
            if orderBy is not None:
                params["orderBy"] = orderBy
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if status is not None:
                params["status"] = status
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search for dashboards Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search for dashboards completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search for dashboards failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllGadgets(self, dashboardId: int, moduleKey: List[Any] = None, uri: List[Any] = None, gadgetId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of dashboard gadgets on a dashboard.

This operation returns:

 *  Gadgets from a list of IDs, when `id` is set.
 *  Gadgets with a module key, when `moduleKey` is set.
 *  Gadgets from a list of URIs, when `uri` is set.
 *  All gadgets, when no other parameters are set.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param dashboardId: The ID of the dashboard.
        :param moduleKey: The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.
        :param uri: The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.
        :param gadgetId: The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get gadgets", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/gadget"
            params = {}
            if moduleKey is not None:
                params["moduleKey"] = moduleKey
            if uri is not None:
                params["uri"] = uri
            if gadgetId is not None:
                params["gadgetId"] = gadgetId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get gadgets Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get gadgets completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get gadgets failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addGadget(self, dashboardId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a gadget to a dashboard.

**[Permissions](#permissions) required:** None.

        :param dashboardId: The ID of the dashboard.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add gadget to dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/gadget"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add gadget to dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add gadget to dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add gadget to dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeGadget(self, dashboardId: int, gadgetId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes a dashboard gadget from a dashboard.

When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.

**[Permissions](#permissions) required:** None.

        :param dashboardId: The ID of the dashboard.
        :param gadgetId: The ID of the gadget.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove gadget from dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/gadget/{gadgetId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove gadget from dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove gadget from dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove gadget from dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateGadget(self, dashboardId: int, gadgetId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the title, position, and color of the gadget on a dashboard.

**[Permissions](#permissions) required:** None.

        :param dashboardId: The ID of the dashboard.
        :param gadgetId: The ID of the gadget.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update gadget on dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/gadget/{gadgetId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update gadget on dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update gadget on dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update gadget on dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDashboardItemPropertyKeys(self, dashboardId: str, itemId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the keys of all properties for a dashboard item.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.

        :param dashboardId: The ID of the dashboard.
        :param itemId: The ID of the dashboard item.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get dashboard item property keys", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get dashboard item property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get dashboard item property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get dashboard item property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteDashboardItemProperty(self, dashboardId: str, itemId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a dashboard item property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.

        :param dashboardId: The ID of the dashboard.
        :param itemId: The ID of the dashboard item.
        :param propertyKey: The key of the dashboard item property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete dashboard item property", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete dashboard item property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete dashboard item property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete dashboard item property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDashboardItemProperty(self, dashboardId: str, itemId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the key and value of a dashboard item property.

A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).

When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.

There is no resource to set or get dashboard items.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.

        :param dashboardId: The ID of the dashboard.
        :param itemId: The ID of the dashboard item.
        :param propertyKey: The key of the dashboard item property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get dashboard item property", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get dashboard item property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get dashboard item property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get dashboard item property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setDashboardItemProperty(self, dashboardId: str, itemId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.

A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).

When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.

There is no resource to set or get dashboard items.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.

        :param dashboardId: The ID of the dashboard.
        :param itemId: The ID of the dashboard item.
        :param propertyKey: The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to "config", the request body's JSON must be an object with all keys and values as strings.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set dashboard item property", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set dashboard item property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set dashboard item property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set dashboard item property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteDashboard(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a dashboard.

**[Permissions](#permissions) required:** None

The dashboard to be deleted must be owned by the user.

        :param id: The ID of the dashboard.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDashboard(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a dashboard.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.

        :param id: The ID of the dashboard.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateDashboard(self, id: str, extendAdminPermissions: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a dashboard, replacing all the dashboard details with those provided.

**[Permissions](#permissions) required:** None

The dashboard to be updated must be owned by the user.

        :param id: The ID of the dashboard to update.
        :param extendAdminPermissions: Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{id}"
            params = {}
            if extendAdminPermissions is not None:
                params["extendAdminPermissions"] = extendAdminPermissions
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def copyDashboard(self, id: str, extendAdminPermissions: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.

**[Permissions](#permissions) required:** None

The dashboard to be copied must be owned by or shared with the user.

        :param id: id
        :param extendAdminPermissions: Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Copy dashboard", False)

        try:
            endpoint = f"/rest/api/2/dashboard/{id}/copy"
            params = {}
            if extendAdminPermissions is not None:
                params["extendAdminPermissions"] = extendAdminPermissions
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Copy dashboard Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Copy dashboard completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Copy dashboard failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPolicy(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns data policy for the workspace.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get data policy for the workspace", False)

        try:
            endpoint = "/rest/api/2/data-policy"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get data policy for the workspace Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get data policy for the workspace completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get data policy for the workspace failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPolicies(self, ids: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns data policies for the projects specified in the request.

        :param ids: A list of project identifiers. This parameter accepts a comma-separated list.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get data policy for projects", False)

        try:
            endpoint = "/rest/api/2/data-policy/project"
            params = {}
            if ids is not None:
                params["ids"] = ids

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get data policy for projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get data policy for projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get data policy for projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getEvents(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all issue events.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get events", False)

        try:
            endpoint = "/rest/api/2/events"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get events Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get events completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get events failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def analyseExpression(self, check: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Analyses and validates Jira expressions.

As an experimental feature, this operation can also attempt to type-check the expressions.

Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).

**[Permissions](#permissions) required**: None.

        :param check: The check to perform:

 *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.
 *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.
 *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Analyse Jira expression", False)

        try:
            endpoint = "/rest/api/2/expression/analyse"
            params = {}
            if check is not None:
                params["check"] = check
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Analyse Jira expression Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Analyse Jira expression completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Analyse Jira expression failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def evaluateJiraExpression(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Evaluates a Jira expression and returns its value.

This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.

#### Context variables ####

The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.

 *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
 *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
 *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
 *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
 *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
 *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
 *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
 *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
 *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.

Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:

 *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
 *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
 *  `json`: A JSON object containing custom content.
 *  `list`: A JSON list of `user`, `issue`, or `json` variable types.

This operation can be accessed anonymously.

**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  
Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).

        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Evaluate Jira expression", False)

        try:
            endpoint = "/rest/api/2/expression/eval"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Evaluate Jira expression Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Evaluate Jira expression completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Evaluate Jira expression failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def evaluateJSISJiraExpression(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Evaluates a Jira expression and returns its value. The difference between this and `eval` is that this endpoint uses the enhanced search API when evaluating JQL queries. This API is eventually consistent, unlike the strongly consistent `eval` API. This allows for better performance and scalability. In addition, this API's response for JQL evaluation is based on a scrolling view (backed by a `nextPageToken`) instead of a paginated view (backed by `startAt` and `totalCount`).

This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.

#### Context variables ####

The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.

 *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
 *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
 *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
 *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
 *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
 *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
 *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
 *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
 *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.

In addition, you can pass custom context variables along with their types. You can then access them from the Jira expression by key. You can use the following variables in a custom context:

 *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
 *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
 *  `json`: A JSON object containing custom content.
 *  `list`: A JSON list of `user`, `issue`, or `json` variable types.

This operation can be accessed anonymously.

**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  
Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).

        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Evaluate Jira expression using enhanced search API", False)

        try:
            endpoint = "/rest/api/2/expression/evaluate"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Evaluate Jira expression using enhanced search API Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Evaluate Jira expression using enhanced search API completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Evaluate Jira expression using enhanced search API failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFields(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns system and custom issue fields according to the following rules:

 *  Fields that cannot be added to the issue navigator are always returned.
 *  Fields that cannot be placed on an issue screen are always returned.
 *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
 *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get fields", False)

        try:
            endpoint = "/rest/api/2/field"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get fields Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get fields completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get fields failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createCustomField(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a custom field.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create custom field", False)

        try:
            endpoint = "/rest/api/2/field"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create custom field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create custom field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create custom field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFieldsPaginated(self, startAt: int = None, maxResults: int = None, type: List[Any] = None, id: List[Any] = None, query: str = None, orderBy: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:

 *  all fields
 *  specific fields, by defining `id`
 *  fields that contain a string in the field name or description, by defining `query`
 *  specific fields that contain a string in the field name or description, by defining `id` and `query`

Use `type` must be set to `custom` to show custom fields only.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param type: The type of fields to search.
        :param id: The IDs of the custom fields to return or, where `query` is specified, filter.
        :param query: String used to perform a case-insensitive partial match with field names or descriptions.
        :param orderBy: [Order](#ordering) the results by:

 *  `contextsCount` sorts by the number of contexts related to a field
 *  `lastUsed` sorts by the date when the value of the field last changed
 *  `name` sorts by the field name
 *  `screensCount` sorts by the number of screens related to a field
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `key` returns the key for each field
 *  `stableId` returns the stableId for each field
 *  `lastUsed` returns the date when the value of the field last changed
 *  `screensCount` returns the number of screens related to a field
 *  `contextsCount` returns the number of contexts related to a field
 *  `isLocked` returns information about whether the field is locked
 *  `searcherKey` returns the searcher key for each custom field
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get fields paginated", False)

        try:
            endpoint = "/rest/api/2/field/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if type is not None:
                params["type"] = type
            if id is not None:
                params["id"] = id
            if query is not None:
                params["query"] = query
            if orderBy is not None:
                params["orderBy"] = orderBy
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get fields paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get fields paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get fields paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getTrashedFieldsPaginated(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, query: str = None, expand: str = None, orderBy: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.

Only custom fields can be queried, `type` must be set to `custom`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: id
        :param query: String used to perform a case-insensitive partial match with field names or descriptions.
        :param expand: expand
        :param orderBy: [Order](#ordering) the results by a field:

 *  `name` sorts by the field name
 *  `trashDate` sorts by the date the field was moved to the trash
 *  `plannedDeletionDate` sorts by the planned deletion date
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get fields in trash paginated", False)

        try:
            endpoint = "/rest/api/2/field/search/trashed"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if query is not None:
                params["query"] = query
            if expand is not None:
                params["expand"] = expand
            if orderBy is not None:
                params["orderBy"] = orderBy

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get fields in trash paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get fields in trash paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get fields in trash paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateCustomField(self, fieldId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a custom field.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update custom field", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update custom field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update custom field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update custom field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getContextsForField(self, fieldId: str, isAnyIssueType: bool = None, isGlobalContext: bool = None, contextId: List[Any] = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:

 *  With no other parameters set, all contexts.
 *  By defining `id` only, all contexts from the list of IDs.
 *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
 *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param isAnyIssueType: Whether to return contexts that apply to all issue types.
        :param isGlobalContext: Whether to return contexts that apply to all projects.
        :param contextId: The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get custom field contexts", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context"
            params = {}
            if isAnyIssueType is not None:
                params["isAnyIssueType"] = isAnyIssueType
            if isGlobalContext is not None:
                params["isGlobalContext"] = isGlobalContext
            if contextId is not None:
                params["contextId"] = contextId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get custom field contexts Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get custom field contexts completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get custom field contexts failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createCustomFieldContext(self, fieldId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a custom field context.

If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create custom field context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create custom field context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create custom field context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create custom field context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDefaultValues(self, fieldId: str, contextId: List[Any] = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.  
The returned object depends on type of the custom field:

 *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
 *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
 *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
 *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
 *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
 *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
 *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
 *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
 *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
 *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
 *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
 *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
 *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
 *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
 *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
 *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
 *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
 *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.

Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:

 *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
 *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
 *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
 *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
 *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
 *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
 *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
 *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
 *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field, for example `customfield\_10000`.
        :param contextId: The IDs of the contexts.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get custom field contexts default values", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/defaultValue"
            params = {}
            if contextId is not None:
                params["contextId"] = contextId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get custom field contexts default values Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get custom field contexts default values completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get custom field contexts default values failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setDefaultValues(self, fieldId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets default for contexts of a custom field. Default are defined using these objects:

 *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
 *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
 *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
 *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
 *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
 *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
 *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
 *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
 *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
 *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
 *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
 *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
 *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
 *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
 *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
 *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
 *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
 *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.

Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:

 *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
 *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
 *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
 *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
 *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
 *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
 *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
 *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
 *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.

Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set custom field contexts default values", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/defaultValue"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set custom field contexts default values Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set custom field contexts default values completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set custom field contexts default values failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeMappingsForContexts(self, fieldId: str, contextId: List[Any] = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue types for custom field context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/issuetypemapping"
            params = {}
            if contextId is not None:
                params["contextId"] = contextId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue types for custom field context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue types for custom field context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue types for custom field context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCustomFieldContextsForProjectsAndIssueTypes(self, fieldId: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.

If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.

Duplicate project and issue type mappings cannot be provided in the request.

The order of the returned values is the same as provided in the request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get custom field contexts for projects and issue types", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/mapping"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get custom field contexts for projects and issue types Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get custom field contexts for projects and issue types completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get custom field contexts for projects and issue types failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectContextMapping(self, fieldId: str, contextId: List[Any] = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field, for example `customfield\_10000`.
        :param contextId: The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project mappings for custom field context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/projectmapping"
            params = {}
            if contextId is not None:
                params["contextId"] = contextId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project mappings for custom field context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project mappings for custom field context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project mappings for custom field context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteCustomFieldContext(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete custom field context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete custom field context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete custom field context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete custom field context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateCustomFieldContext(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update custom field context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update custom field context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update custom field context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update custom field context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addIssueTypesToContext(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds issue types to a custom field context, appending the issue types to the issue types list.

A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.

If any of the issue types exists in the custom field context, the operation fails and no issue types are added.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add issue types to context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/issuetype"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add issue types to context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add issue types to context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add issue types to context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeIssueTypesFromContext(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes issue types from a custom field context.

A custom field context without any issue types applies to all issue types.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove issue types from context", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/issuetype/remove"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove issue types from context Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove issue types from context completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove issue types from context failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getOptionsForContext(self, fieldId: str, contextId: int, optionId: int = None, onlyOptions: bool = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :param optionId: The ID of the option.
        :param onlyOptions: Whether only options are returned.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get custom field options (context)", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/option"
            params = {}
            if optionId is not None:
                params["optionId"] = optionId
            if onlyOptions is not None:
                params["onlyOptions"] = onlyOptions
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get custom field options (context) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get custom field options (context) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get custom field options (context) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createCustomFieldOption(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.

The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create custom field options (context)", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/option"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create custom field options (context) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create custom field options (context) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create custom field options (context) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateCustomFieldOption(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the options of a custom field.

If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.

Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update custom field options (context)", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/option"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update custom field options (context) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update custom field options (context) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update custom field options (context) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def reorderCustomFieldOptions(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the order of custom field options or cascading options in a context.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Reorder custom field options (context)", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/option/move"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Reorder custom field options (context) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Reorder custom field options (context) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Reorder custom field options (context) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteCustomFieldOption(self, fieldId: str, contextId: int, optionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a custom field option.

Options with cascading options cannot be deleted without deleting the cascading options first.

This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context from which an option should be deleted.
        :param optionId: The ID of the option to delete.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete custom field options (context)", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/option/{optionId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete custom field options (context) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete custom field options (context) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete custom field options (context) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def replaceCustomFieldOption(self, fieldId: str, optionId: int, contextId: int, replaceWith: int = None, jql: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Replaces the options of a custom field.

Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param optionId: The ID of the option to be deselected.
        :param contextId: The ID of the context.
        :param replaceWith: The ID of the option that will replace the currently selected option.
        :param jql: A JQL query that specifies the issues to be updated. For example, *project=10000*.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Replace custom field options", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/option/{optionId}/issue"
            params = {}
            if replaceWith is not None:
                params["replaceWith"] = replaceWith
            if jql is not None:
                params["jql"] = jql

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Replace custom field options Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Replace custom field options completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Replace custom field options failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignProjectsToCustomFieldContext(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns a custom field context to projects.

If any project in the request is assigned to any context of the custom field, the operation fails.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign custom field context to projects", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/project"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign custom field context to projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign custom field context to projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign custom field context to projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeCustomFieldContextFromProjects(self, fieldId: str, contextId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes a custom field context from projects.

A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.

If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the custom field.
        :param contextId: The ID of the context.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove custom field context from projects", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/context/{contextId}/project/remove"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove custom field context from projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove custom field context from projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove custom field context from projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getContextsForFieldDeprecated(self, fieldId: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-2-field-fieldId-context-get).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the field to return contexts for.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get contexts for a field", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/contexts"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get contexts for a field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get contexts for a field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get contexts for a field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getScreensForField(self, fieldId: str, startAt: int = None, maxResults: int = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of the screens a field is used in.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the field to return screens for.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param expand: Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get screens for a field", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldId}/screens"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get screens for a field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get screens for a field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get screens for a field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllIssueFieldOptions(self, fieldKey: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all issue field options", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all issue field options Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all issue field options completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all issue field options failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueFieldOption(self, fieldKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an option for a select list issue field.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue field option", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue field option Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue field option completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue field option failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSelectableIssueFieldOptions(self, fieldKey: str, startAt: int = None, maxResults: int = None, projectId: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param projectId: Filters the results to options that are only available in the specified project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get selectable issue field options", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option/suggestions/edit"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get selectable issue field options Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get selectable issue field options completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get selectable issue field options failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getVisibleIssueFieldOptions(self, fieldKey: str, startAt: int = None, maxResults: int = None, projectId: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param projectId: Filters the results to options that are only available in the specified project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get visible issue field options", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option/suggestions/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get visible issue field options Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get visible issue field options completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get visible issue field options failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueFieldOption(self, fieldKey: str, optionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an option from a select list issue field.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param optionId: The ID of the option to be deleted.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue field option", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option/{optionId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue field option Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue field option completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue field option failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueFieldOption(self, fieldKey: str, optionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an option from a select list issue field.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param optionId: The ID of the option to be returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue field option", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option/{optionId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue field option Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue field option completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue field option failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateIssueFieldOption(self, fieldKey: str, optionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param optionId: The ID of the option to be updated.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue field option", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option/{optionId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue field option Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue field option completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue field option failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def replaceIssueFieldOption(self, fieldKey: str, optionId: int, replaceWith: int = None, jql: str = None, overrideScreenSecurity: bool = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.

Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.

This is an [asynchronous operation](#async). The response object contains a link to the long-running task.

Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.

        :param fieldKey: The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:

 *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
 *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
        :param optionId: The ID of the option to be deselected.
        :param replaceWith: The ID of the option that will replace the currently selected option.
        :param jql: A JQL query that specifies the issues to be updated. For example, *project=10000*.
        :param overrideScreenSecurity: Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.
        :param overrideEditableFlag: Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Replace issue field option", False)

        try:
            endpoint = f"/rest/api/2/field/{fieldKey}/option/{optionId}/issue"
            params = {}
            if replaceWith is not None:
                params["replaceWith"] = replaceWith
            if jql is not None:
                params["jql"] = jql
            if overrideScreenSecurity is not None:
                params["overrideScreenSecurity"] = overrideScreenSecurity
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Replace issue field option Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Replace issue field option completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Replace issue field option failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteCustomField(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of a custom field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete custom field", False)

        try:
            endpoint = f"/rest/api/2/field/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete custom field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete custom field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete custom field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def restoreCustomField(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of a custom field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Restore custom field from trash", False)

        try:
            endpoint = f"/rest/api/2/field/{id}/restore"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Restore custom field from trash Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Restore custom field from trash completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Restore custom field from trash failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def trashCustomField(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of a custom field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Move custom field to trash", False)

        try:
            endpoint = f"/rest/api/2/field/{id}/trash"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Move custom field to trash Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Move custom field to trash completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Move custom field to trash failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllFieldConfigurations(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, isDefault: bool = None, query: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:

 *  a list of field configuration item IDs.
 *  whether the field configuration is a default.
 *  whether the field configuration name or description contains a query string.

Only field configurations used in company-managed (classic) projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param isDefault: If *true* returns default field configurations only.
        :param query: The query string used to match against field configuration names and descriptions.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all field configurations", False)

        try:
            endpoint = "/rest/api/2/fieldconfiguration"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if isDefault is not None:
                params["isDefault"] = isDefault
            if query is not None:
                params["query"] = query

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all field configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all field configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all field configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createFieldConfiguration(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.

This operation can only create configurations for use in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create field configuration", False)

        try:
            endpoint = "/rest/api/2/fieldconfiguration"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create field configuration Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create field configuration completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create field configuration failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteFieldConfiguration(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a field configuration.

This operation can only delete configurations used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete field configuration", False)

        try:
            endpoint = f"/rest/api/2/fieldconfiguration/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete field configuration Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete field configuration completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete field configuration failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateFieldConfiguration(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a field configuration. The name and the description provided in the request override the existing values.

This operation can only update configurations used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update field configuration", False)

        try:
            endpoint = f"/rest/api/2/fieldconfiguration/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update field configuration Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update field configuration completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update field configuration failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFieldConfigurationItems(self, id: int, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all fields for a configuration.

Only the fields from configurations used in company-managed (classic) projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get field configuration items", False)

        try:
            endpoint = f"/rest/api/2/fieldconfiguration/{id}/fields"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get field configuration items Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get field configuration items completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get field configuration items failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateFieldConfigurationItems(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.

This operation can only update field configurations used in company-managed (classic) projects.

The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update field configuration items", False)

        try:
            endpoint = f"/rest/api/2/fieldconfiguration/{id}/fields"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update field configuration items Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update field configuration items completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update field configuration items failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllFieldConfigurationSchemes(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of field configuration schemes.

Only field configuration schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all field configuration schemes", False)

        try:
            endpoint = "/rest/api/2/fieldconfigurationscheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all field configuration schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all field configuration schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all field configuration schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createFieldConfigurationScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a field configuration scheme.

This operation can only create field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create field configuration scheme", False)

        try:
            endpoint = "/rest/api/2/fieldconfigurationscheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create field configuration scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create field configuration scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create field configuration scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFieldConfigurationSchemeMappings(self, startAt: int = None, maxResults: int = None, fieldConfigurationSchemeId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of field configuration issue type items.

Only items used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param fieldConfigurationSchemeId: The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get field configuration issue type items", False)

        try:
            endpoint = "/rest/api/2/fieldconfigurationscheme/mapping"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if fieldConfigurationSchemeId is not None:
                params["fieldConfigurationSchemeId"] = fieldConfigurationSchemeId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get field configuration issue type items Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get field configuration issue type items completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get field configuration issue type items failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFieldConfigurationSchemeProjectMapping(self, startAt: int = None, maxResults: int = None, projectId: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.

The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.

Only field configuration schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param projectId: The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get field configuration schemes for projects", False)

        try:
            endpoint = "/rest/api/2/fieldconfigurationscheme/project"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get field configuration schemes for projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get field configuration schemes for projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get field configuration schemes for projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignFieldConfigurationSchemeToProject(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.

Field configuration schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign field configuration scheme to project", False)

        try:
            endpoint = "/rest/api/2/fieldconfigurationscheme/project"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign field configuration scheme to project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign field configuration scheme to project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign field configuration scheme to project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteFieldConfigurationScheme(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a field configuration scheme.

This operation can only delete field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete field configuration scheme", False)

        try:
            endpoint = f"/rest/api/2/fieldconfigurationscheme/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete field configuration scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete field configuration scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete field configuration scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateFieldConfigurationScheme(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a field configuration scheme.

This operation can only update field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update field configuration scheme", False)

        try:
            endpoint = f"/rest/api/2/fieldconfigurationscheme/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update field configuration scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update field configuration scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update field configuration scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setFieldConfigurationSchemeMapping(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns issue types to field configurations on field configuration scheme.

This operation can only modify field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign issue types to field configurations", False)

        try:
            endpoint = f"/rest/api/2/fieldconfigurationscheme/{id}/mapping"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign issue types to field configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign issue types to field configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign issue types to field configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeIssueTypesFromGlobalFieldConfigurationScheme(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes issue types from the field configuration scheme.

This operation can only modify field configuration schemes used in company-managed (classic) projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the field configuration scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove issue types from field configuration scheme", False)

        try:
            endpoint = f"/rest/api/2/fieldconfigurationscheme/{id}/mapping/delete"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove issue types from field configuration scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove issue types from field configuration scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove issue types from field configuration scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createFilter(self, expand: str = None, overrideSharePermissions: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-2-filter-post). The filter is not selected as a favorite.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :param overrideSharePermissions: EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create filter", False)

        try:
            endpoint = "/rest/api/2/filter"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if overrideSharePermissions is not None:
                params["overrideSharePermissions"] = overrideSharePermissions
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create filter Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create filter completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create filter failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDefaultShareScope(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default sharing settings for new filters and dashboards for a user.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get default share scope", False)

        try:
            endpoint = "/rest/api/2/filter/defaultShareScope"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get default share scope Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get default share scope completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get default share scope failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setDefaultShareScope(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the default sharing for new filters and dashboards for a user.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set default share scope", False)

        try:
            endpoint = "/rest/api/2/filter/defaultShareScope"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set default share scope Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set default share scope completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set default share scope failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFavouriteFilters(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the visible favorite filters of the user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:

 *  owned by the user.
 *  shared with a group that the user is a member of.
 *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  shared with a public project.
 *  shared with the public.

For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.

        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get favorite filters", False)

        try:
            endpoint = "/rest/api/2/filter/favourite"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get favorite filters Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get favorite filters completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get favorite filters failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getMyFilters(self, expand: str = None, includeFavourites: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.

**[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:

 *  owned by the user.
 *  shared with a group that the user is a member of.
 *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  shared with a public project.
 *  shared with the public.

For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.

        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :param includeFavourites: Include the user's favorite filters in the response.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get my filters", False)

        try:
            endpoint = "/rest/api/2/filter/my"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if includeFavourites is not None:
                params["includeFavourites"] = includeFavourites

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get my filters Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get my filters completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get my filters failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFiltersPaginated(self, filterName: str = None, accountId: str = None, owner: str = None, groupname: str = None, groupId: str = None, projectId: int = None, id: List[Any] = None, orderBy: str = None, startAt: int = None, maxResults: int = None, expand: str = None, overrideSharePermissions: bool = None, isSubstringMatch: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of filters. Use this operation to get:

 *  specific filters, by defining `id` only.
 *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param filterName: String used to perform a case-insensitive partial match with `name`.
        :param accountId: User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.
        :param owner: This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.
        :param groupname: As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.
        :param groupId: Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.
        :param projectId: Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.
        :param id: The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
 *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
 *  `is_favourite` Sorts by whether the filter is marked as a favorite.
 *  `id` Sorts by filter ID.
 *  `name` Sorts by filter name.
 *  `owner` Sorts by the ID of the filter owner.
 *  `is_shared` Sorts by whether the filter is shared.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `description` Returns the description of the filter.
 *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
 *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
 *  `jql` Returns the JQL query that the filter uses.
 *  `owner` Returns the owner of the filter.
 *  `searchUrl` Returns a URL to perform the filter's JQL query.
 *  `sharePermissions` Returns the share permissions defined for the filter.
 *  `editPermissions` Returns the edit permissions defined for the filter.
 *  `isWritable` Returns whether the current user has permission to edit the filter.
 *  `approximateLastUsed` \[Experimental\] Returns the approximate date and time when the filter was last evaluated.
 *  `subscriptions` Returns the users that are subscribed to the filter.
 *  `viewUrl` Returns a URL to view the filter.
        :param overrideSharePermissions: EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :param isSubstringMatch: When `true` this will perform a case-insensitive substring match for the provided `filterName`. When `false` the filter name will be searched using [full text search syntax](https://support.atlassian.com/jira-software-cloud/docs/search-for-issues-using-the-text-field/).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search for filters", False)

        try:
            endpoint = "/rest/api/2/filter/search"
            params = {}
            if filterName is not None:
                params["filterName"] = filterName
            if accountId is not None:
                params["accountId"] = accountId
            if owner is not None:
                params["owner"] = owner
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            if projectId is not None:
                params["projectId"] = projectId
            if id is not None:
                params["id"] = id
            if orderBy is not None:
                params["orderBy"] = orderBy
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if expand is not None:
                params["expand"] = expand
            if overrideSharePermissions is not None:
                params["overrideSharePermissions"] = overrideSharePermissions
            if isSubstringMatch is not None:
                params["isSubstringMatch"] = isSubstringMatch

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search for filters Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search for filters completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search for filters failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteFilter(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Delete a filter.

**[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the filter to delete.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete filter", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete filter Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete filter completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete filter failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFilter(self, id: int, expand: str = None, overrideSharePermissions: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a filter.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, the filter is only returned where it is:

 *  owned by the user.
 *  shared with a group that the user is a member of.
 *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  shared with a public project.
 *  shared with the public.

        :param id: The ID of the filter to return.
        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :param overrideSharePermissions: EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get filter", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if overrideSharePermissions is not None:
                params["overrideSharePermissions"] = overrideSharePermissions

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get filter Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get filter completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get filter failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateFilter(self, id: int, expand: str = None, overrideSharePermissions: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.

**[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.

        :param id: The ID of the filter to update.
        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :param overrideSharePermissions: EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update filter", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if overrideSharePermissions is not None:
                params["overrideSharePermissions"] = overrideSharePermissions
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update filter Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update filter completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update filter failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def resetColumns(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Reset the user's column configuration for the filter to the default.

**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param id: The ID of the filter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Reset columns", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/columns"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Reset columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Reset columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Reset columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getColumns(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, column details are only returned for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param id: The ID of the filter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get columns", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/columns"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setColumns(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-2-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.

The parameters for this resource are expressed as HTML form data. For example, in curl:

`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/2/filter/10000/columns`

**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param id: The ID of the filter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set columns", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/columns"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteFavouriteForFilter(self, id: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param id: The ID of the filter.
        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove filter as favorite", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/favourite"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove filter as favorite Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove filter as favorite completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove filter as favorite failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setFavouriteForFilter(self, id: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Add a filter as a favorite for the user.

**[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param id: The ID of the filter.
        :param expand: Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
 *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add filter as favorite", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/favourite"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add filter as favorite Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add filter as favorite completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add filter as favorite failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def changeFilterOwner(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the owner of the filter.

**[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the filter to update.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Change filter owner", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/owner"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Change filter owner Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Change filter owner completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Change filter owner failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSharePermissions(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, share permissions are only returned for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param id: The ID of the filter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get share permissions", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/permission"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get share permissions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get share permissions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get share permissions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addSharePermission(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.

Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-2-filter-id-put).

**[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.

        :param id: The ID of the filter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add share permission", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/permission"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add share permission Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add share permission completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add share permission failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteSharePermission(self, id: int, permissionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a share permission from a filter.

**[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.

        :param id: The ID of the filter.
        :param permissionId: The ID of the share permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete share permission", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/permission/{permissionId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete share permission Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete share permission completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete share permission failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSharePermission(self, id: int, permissionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None, however, a share permission is only returned for:

 *  filters owned by the user.
 *  filters shared with a group that the user is a member of.
 *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
 *  filters shared with a public project.
 *  filters shared with the public.

        :param id: The ID of the filter.
        :param permissionId: The ID of the share permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get share permission", False)

        try:
            endpoint = f"/rest/api/2/filter/{id}/permission/{permissionId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get share permission Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get share permission completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get share permission failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeGroup(self, groupname: str = None, groupId: str = None, swapGroup: str = None, swapGroupId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).

        :param groupname: groupname
        :param groupId: The ID of the group. This parameter cannot be used with the `groupname` parameter.
        :param swapGroup: As a group's name can change, use of `swapGroupId` is recommended to identify a group.  
The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.
        :param swapGroupId: The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove group", False)

        try:
            endpoint = "/rest/api/2/group"
            params = {}
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            if swapGroup is not None:
                params["swapGroup"] = swapGroup
            if swapGroupId is not None:
                params["swapGroupId"] = swapGroupId

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove group Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove group completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove group failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getGroup(self, groupname: str = None, groupId: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        This operation is deprecated, use [`group/member`](#api-rest-api-2-group-member-get).

Returns all users in a group.

**[Permissions](#permissions) required:** either of:

 *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param groupname: As a group's name can change, use of `groupId` is recommended to identify a group.  
The name of the group. This parameter cannot be used with the `groupId` parameter.
        :param groupId: The ID of the group. This parameter cannot be used with the `groupName` parameter.
        :param expand: List of fields to expand.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get group", False)

        try:
            endpoint = "/rest/api/2/group"
            params = {}
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get group Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get group completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get group failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createGroup(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create group", False)

        try:
            endpoint = "/rest/api/2/group"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create group Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create group completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create group failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkGetGroups(self, startAt: int = None, maxResults: int = None, groupId: List[Any] = None, groupName: List[Any] = None, accessType: str = None, applicationKey: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of groups.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param groupId: The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.
        :param groupName: The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.
        :param accessType: The access level of a group. Valid values: 'site-admin', 'admin', 'user'.
        :param applicationKey: The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk get groups", False)

        try:
            endpoint = "/rest/api/2/group/bulk"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if groupId is not None:
                params["groupId"] = groupId
            if groupName is not None:
                params["groupName"] = groupName
            if accessType is not None:
                params["accessType"] = accessType
            if applicationKey is not None:
                params["applicationKey"] = applicationKey

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk get groups Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk get groups completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk get groups failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUsersFromGroup(self, groupname: str = None, groupId: str = None, includeInactiveUsers: bool = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all users in a group.

Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.

**[Permissions](#permissions) required:** either of:

 *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param groupname: As a group's name can change, use of `groupId` is recommended to identify a group.  
The name of the group. This parameter cannot be used with the `groupId` parameter.
        :param groupId: The ID of the group. This parameter cannot be used with the `groupName` parameter.
        :param includeInactiveUsers: Include inactive users.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page (number should be between 1 and 50).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get users from group", False)

        try:
            endpoint = "/rest/api/2/group/member"
            params = {}
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            if includeInactiveUsers is not None:
                params["includeInactiveUsers"] = includeInactiveUsers
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get users from group Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get users from group completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get users from group failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeUserFromGroup(self, groupname: str = None, groupId: str = None, username: str = None, accountId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes a user from a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).

        :param groupname: As a group's name can change, use of `groupId` is recommended to identify a group.  
The name of the group. This parameter cannot be used with the `groupId` parameter.
        :param groupId: The ID of the group. This parameter cannot be used with the `groupName` parameter.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove user from group", False)

        try:
            endpoint = "/rest/api/2/group/user"
            params = {}
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove user from group Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove user from group completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove user from group failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addUserToGroup(self, groupname: str = None, groupId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a user to a group.

**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).

        :param groupname: As a group's name can change, use of `groupId` is recommended to identify a group.  
The name of the group. This parameter cannot be used with the `groupId` parameter.
        :param groupId: The ID of the group. This parameter cannot be used with the `groupName` parameter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add user to group", False)

        try:
            endpoint = "/rest/api/2/group/user"
            params = {}
            if groupname is not None:
                params["groupname"] = groupname
            if groupId is not None:
                params["groupId"] = groupId
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add user to group Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add user to group completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add user to group failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findGroups(self, accountId: str = None, query: str = None, exclude: List[Any] = None, excludeId: List[Any] = None, maxResults: int = None, caseInsensitive: bool = None, userName: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.

The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.

The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.

*Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.

        :param accountId: This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-2-user-groups-get).
        :param query: The string to find in group names.
        :param exclude: As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  
A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.
        :param excludeId: A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.
        :param maxResults: The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
        :param caseInsensitive: Whether the search for groups should be case insensitive.
        :param userName: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find groups", False)

        try:
            endpoint = "/rest/api/2/groups/picker"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if query is not None:
                params["query"] = query
            if exclude is not None:
                params["exclude"] = exclude
            if excludeId is not None:
                params["excludeId"] = excludeId
            if maxResults is not None:
                params["maxResults"] = maxResults
            if caseInsensitive is not None:
                params["caseInsensitive"] = caseInsensitive
            if userName is not None:
                params["userName"] = userName

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find groups Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find groups completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find groups failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUsersAndGroups(self, query: str, maxResults: int = None, showAvatar: bool = None, fieldId: str = None, projectId: List[Any] = None, issueTypeId: List[Any] = None, avatarSize: str = None, caseInsensitive: bool = None, excludeConnectAddons: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of users and groups matching a string. The string is used:

 *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
 *  for groups, to find a case-sensitive match with group name.

For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.

Optionally, the search can be refined to:

 *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
    
     *  projects.
     *  issue types.
    
    If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
 *  not return Connect app users and groups.
 *  return groups that have a case-insensitive match with the query.

The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).

        :param query: The search string.
        :param maxResults: The maximum number of items to return in each list.
        :param showAvatar: Whether the user avatar should be returned. If an invalid value is provided, the default value is used.
        :param fieldId: The custom field ID of the field this request is for.
        :param projectId: The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.
        :param issueTypeId: The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.
        :param avatarSize: The size of the avatar to return. If an invalid value is provided, the default value is used.
        :param caseInsensitive: Whether the search for groups should be case insensitive.
        :param excludeConnectAddons: Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users and groups", False)

        try:
            endpoint = "/rest/api/2/groupuserpicker"
            params = {}
            if query is not None:
                params["query"] = query
            if maxResults is not None:
                params["maxResults"] = maxResults
            if showAvatar is not None:
                params["showAvatar"] = showAvatar
            if fieldId is not None:
                params["fieldId"] = fieldId
            if projectId is not None:
                params["projectId"] = projectId
            if issueTypeId is not None:
                params["issueTypeId"] = issueTypeId
            if avatarSize is not None:
                params["avatarSize"] = avatarSize
            if caseInsensitive is not None:
                params["caseInsensitive"] = caseInsensitive
            if excludeConnectAddons is not None:
                params["excludeConnectAddons"] = excludeConnectAddons

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users and groups Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users and groups completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users and groups failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getLicense(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns licensing information about the Jira instance.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get license", False)

        try:
            endpoint = "/rest/api/2/instance/license"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get license Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get license completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get license failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssue(self, updateHistory: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.

The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-2-issue-createmeta-get). These are the same fields that appear on the issue's create screen.

Creating a subtask differs from creating an issue as follows:

 *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-2-issue-createmeta-get) to find subtask issue types).
 *  `parent` must contain the ID or key of the parent issue.

**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.

        :param updateHistory: Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue", False)

        try:
            endpoint = "/rest/api/2/issue"
            params = {}
            if updateHistory is not None:
                params["updateHistory"] = updateHistory
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def archiveIssuesAsync(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.

You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.

**Note that:**

 *  you can't archive subtasks directly, only through their parent issues
 *  you can only archive issues from software, service management, and business projects

**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)

**License required:** Premium or Enterprise

**Signed-in users only:** This API can't be accessed anonymously.

**Rate limiting:** Only a single request per jira instance can be active at any given time.

  



        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Archive issue(s) by JQL", False)

        try:
            endpoint = "/rest/api/2/issue/archive"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Archive issue(s) by JQL Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Archive issue(s) by JQL completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Archive issue(s) by JQL failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def archiveIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.

**Note that:**

 *  you can't archive subtasks directly, only through their parent issues
 *  you can only archive issues from software, service management, and business projects

**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)

**License required:** Premium or Enterprise

**Signed-in users only:** This API can't be accessed anonymously.

  



        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Archive issue(s) by issue ID/key", False)

        try:
            endpoint = "/rest/api/2/issue/archive"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Archive issue(s) by issue ID/key Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Archive issue(s) by issue ID/key completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Archive issue(s) by issue ID/key failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.

The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-2-issue-createmeta-get). These are the same fields that appear on the issues' create screens.

Creating a subtask differs from creating an issue as follows:

 *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-2-issue-createmeta-get) to find subtask issue types).
 *  `parent` the must contain the ID or key of the parent issue.

**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk create issue", False)

        try:
            endpoint = "/rest/api/2/issue/bulk"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk create issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk create issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk create issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkFetchIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the details for a set of requested issues. You can request up to 100 issues.

Each issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned.

Issues will be returned in ascending `id` order. If there are errors, Jira will return a list of issues which couldn't be fetched along with error messages.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk fetch issues", False)

        try:
            endpoint = "/rest/api/2/issue/bulkfetch"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk fetch issues Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk fetch issues completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk fetch issues failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCreateIssueMeta(self, projectIds: List[Any] = None, projectKeys: List[Any] = None, issuetypeIds: List[Any] = None, issuetypeNames: List[Any] = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-2-issue-post) and [Create issues](#api-rest-api-2-issue-bulk-post).

Deprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).

The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.

        :param projectIds: List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.
        :param projectKeys: List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.
        :param issuetypeIds: List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.
        :param issuetypeNames: List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.
        :param expand: Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-2-issue-post) and [Create issues](#api-rest-api-2-issue-bulk-post).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get create issue metadata", False)

        try:
            endpoint = "/rest/api/2/issue/createmeta"
            params = {}
            if projectIds is not None:
                params["projectIds"] = projectIds
            if projectKeys is not None:
                params["projectKeys"] = projectKeys
            if issuetypeIds is not None:
                params["issuetypeIds"] = issuetypeIds
            if issuetypeNames is not None:
                params["issuetypeNames"] = issuetypeNames
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get create issue metadata Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get create issue metadata completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get create issue metadata failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCreateIssueMetaIssueTypes(self, projectIdOrKey: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-2-issue-post) and [Create issues](#api-rest-api-2-issue-bulk-post).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.

        :param projectIdOrKey: The ID or key of the project.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get create metadata issue types for a project", False)

        try:
            endpoint = f"/rest/api/2/issue/createmeta/{projectIdOrKey}/issuetypes"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get create metadata issue types for a project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get create metadata issue types for a project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get create metadata issue types for a project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCreateIssueMetaIssueTypeId(self, projectIdOrKey: str, issueTypeId: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-2-issue-post) and [Create issues](#api-rest-api-2-issue-bulk-post).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.

        :param projectIdOrKey: The ID or key of the project.
        :param issueTypeId: The issuetype ID.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get create field metadata for a project and issue type id", False)

        try:
            endpoint = f"/rest/api/2/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get create field metadata for a project and issue type id Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get create field metadata for a project and issue type id completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get create field metadata for a project and issue type id failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueLimitReport(self, isReturningKeys: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all issues breaching and approaching per-issue limits.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param isReturningKeys: Return issue keys instead of issue ids in the response.

Usage: Add `?isReturningKeys=true` to the end of the path to request issue keys.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue limit report", False)

        try:
            endpoint = "/rest/api/2/issue/limit/report"
            params = {}
            if isReturningKeys is not None:
                params["isReturningKeys"] = isReturningKeys

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue limit report Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue limit report completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue limit report failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssuePickerResource(self, query: str = None, currentJQL: str = None, currentIssueKey: str = None, currentProjectId: str = None, showSubTasks: bool = None, showSubTaskParent: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.

This operation returns two lists:

 *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
 *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param query: A string to match against text fields in the issue such as title, description, or comments.
        :param currentJQL: A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.
        :param currentIssueKey: The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.
        :param currentProjectId: The ID of a project that suggested issues must belong to.
        :param showSubTasks: Indicate whether to include subtasks in the suggestions list.
        :param showSubTaskParent: When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue picker suggestions", False)

        try:
            endpoint = "/rest/api/2/issue/picker"
            params = {}
            if query is not None:
                params["query"] = query
            if currentJQL is not None:
                params["currentJQL"] = currentJQL
            if currentIssueKey is not None:
                params["currentIssueKey"] = currentIssueKey
            if currentProjectId is not None:
                params["currentProjectId"] = currentProjectId
            if showSubTasks is not None:
                params["showSubTasks"] = showSubTasks
            if showSubTaskParent is not None:
                params["showSubTaskParent"] = showSubTaskParent

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue picker suggestions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue picker suggestions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue picker suggestions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkSetIssuesPropertiesList(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.

This operation is:

 *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk set issues properties by list", False)

        try:
            endpoint = "/rest/api/2/issue/properties"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk set issues properties by list Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk set issues properties by list completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk set issues properties by list failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkSetIssuePropertiesByIssue(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.

This operation is:

 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.
 *  non-transactional. Updating some entities may fail. Such information will available in the task result.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk set issue properties by issue", False)

        try:
            endpoint = "/rest/api/2/issue/properties/multi"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk set issue properties by issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk set issue properties by issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk set issue properties by issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkDeleteIssueProperty(self, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.

The criteria the filter used to identify eligible issues are:

 *  `entityIds` Only issues from this list are eligible.
 *  `currentValue` Only issues with the property set to this value are eligible.

If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.

If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.

This operation is:

 *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:**

 *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.

        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk delete issue property", False)

        try:
            endpoint = f"/rest/api/2/issue/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk delete issue property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk delete issue property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk delete issue property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkSetIssueProperty(self, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets a property value on multiple issues.

The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.

The issues to be updated can be specified by a filter.

The filter identifies issues eligible for update using these criteria:

 *  `entityIds` Only issues from this list are eligible.
 *  `currentValue` Only issues with the property set to this value are eligible.
 *  `hasProperty`:
    
     *  If *true*, only issues with the property are eligible.
     *  If *false*, only issues without the property are eligible.

If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.

If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).

The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.

This operation is:

 *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.

        :param propertyKey: The key of the property. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk set issue property", False)

        try:
            endpoint = f"/rest/api/2/issue/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk set issue property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk set issue property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk set issue property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def unarchiveIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.

**Note that:**

 *  you can't unarchive subtasks directly, only through their parent issues
 *  you can only unarchive issues from software, service management, and business projects

**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)

**License required:** Premium or Enterprise

**Signed-in users only:** This API can't be accessed anonymously.

  



        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Unarchive issue(s) by issue keys/ID", False)

        try:
            endpoint = "/rest/api/2/issue/unarchive"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Unarchive issue(s) by issue keys/ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Unarchive issue(s) by issue keys/ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Unarchive issue(s) by issue keys/ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIsWatchingIssueBulk(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get is watching issue bulk", False)

        try:
            endpoint = "/rest/api/2/issue/watching"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get is watching issue bulk Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get is watching issue bulk completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get is watching issue bulk failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssue(self, issueIdOrKey: str, deleteSubtasks: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue.

An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param deleteSubtasks: Whether the issue's subtasks are deleted when the issue is deleted.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}"
            params = {}
            if deleteSubtasks is not None:
                params["deleteSubtasks"] = deleteSubtasks

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssue(self, issueIdOrKey: str, fields: List[Any] = None, fieldsByKeys: bool = None, expand: str = None, properties: List[Any] = None, updateHistory: bool = None, failFast: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the details for an issue.

The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param fields: A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:

 *  `*all` Returns all fields.
 *  `*navigable` Returns navigable fields.
 *  Any issue field, prefixed with a minus to exclude.

Examples:

 *  `summary,comment` Returns only the summary and comments fields.
 *  `-description` Returns all (default) fields except description.
 *  `*navigable,-comment` Returns all navigable fields except comment.

This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.

Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-2-search-get) and [Search for issues using JQL (POST)](#api-rest-api-2-search-post) where the default is all navigable fields.
        :param fieldsByKeys: Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.
        :param expand: Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `renderedFields` Returns field values rendered in HTML format.
 *  `names` Returns the display name of each field.
 *  `schema` Returns the schema describing a field type.
 *  `transitions` Returns all possible transitions for the issue.
 *  `editmeta` Returns information about how each field can be edited.
 *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
 *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
        :param properties: A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:

 *  `*all` Returns all issue properties.
 *  Any issue property key, prefixed with a minus to exclude.

Examples:

 *  `*all` Returns all properties.
 *  `*all,-prop1` Returns all properties except `prop1`.
 *  `prop1,prop2` Returns `prop1` and `prop2` properties.

This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
        :param updateHistory: Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-2-search-get) `lastViewed` field.
        :param failFast: Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}"
            params = {}
            if fields is not None:
                params["fields"] = fields
            if fieldsByKeys is not None:
                params["fieldsByKeys"] = fieldsByKeys
            if expand is not None:
                params["expand"] = expand
            if properties is not None:
                params["properties"] = properties
            if updateHistory is not None:
                params["updateHistory"] = updateHistory
            if failFast is not None:
                params["failFast"] = failFast

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def editIssue(self, issueIdOrKey: str, notifyUsers: bool = None, overrideScreenSecurity: bool = None, overrideEditableFlag: bool = None, returnIssue: bool = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition is not supported and is ignored here. To transition an issue, please use [Transition issue](#api-rest-api-2-issue-issueIdOrKey-transitions-post).

The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-2-issue-issueIdOrKey-editmeta-get).

The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*.

Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param notifyUsers: Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.
        :param overrideScreenSecurity: Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :param overrideEditableFlag: Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :param returnIssue: Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).
        :param expand: The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Edit issue", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}"
            params = {}
            if notifyUsers is not None:
                params["notifyUsers"] = notifyUsers
            if overrideScreenSecurity is not None:
                params["overrideScreenSecurity"] = overrideScreenSecurity
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag
            if returnIssue is not None:
                params["returnIssue"] = returnIssue
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Edit issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Edit issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Edit issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignIssue(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.

If `name` or `accountId` is set to:

 *  `"-1"`, the issue is assigned to the default assignee for the project.
 *  `null`, the issue is set to unassigned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue to be assigned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign issue", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/assignee"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addAttachment(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).

Note that:

 *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
 *  The name of the multipart/form-data parameter that contains the attachments must be `file`.

The following examples upload a file called *myfile.txt* to the issue *TEST-123*:

#### curl ####

    curl --location --request POST 'https://your-domain.atlassian.net/rest/api/2/issue/TEST-123/attachments'
     -u 'email@example.com:<api_token>'
     -H 'X-Atlassian-Token: no-check'
     --form 'file=@"myfile.txt"'

#### Node.js ####

    // This code sample uses the 'node-fetch' and 'form-data' libraries:
     // https://www.npmjs.com/package/node-fetch
     // https://www.npmjs.com/package/form-data
     const fetch = require('node-fetch');
     const FormData = require('form-data');
     const fs = require('fs');
    
     const filePath = 'myfile.txt';
     const form = new FormData();
     const stats = fs.statSync(filePath);
     const fileSizeInBytes = stats.size;
     const fileStream = fs.createReadStream(filePath);
    
     form.append('file', fileStream, {knownLength: fileSizeInBytes});
    
     fetch('https://your-domain.atlassian.net/rest/api/2/issue/TEST-123/attachments', {
         method: 'POST',
         body: form,
         headers: {
             'Authorization': `Basic ${Buffer.from(
                 'email@example.com:'
             ).toString('base64')}`,
             'Accept': 'application/json',
             'X-Atlassian-Token': 'no-check'
         }
     })
         .then(response => {
             console.log(
                 `Response: ${response.status} ${response.statusText}`
             );
             return response.text();
         })
         .then(text => console.log(text))
         .catch(err => console.error(err));

#### Java ####

    // This code sample uses the  'Unirest' library:
     // http://unirest.io/java.html
     HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
             .basicAuth("email@example.com", "")
             .header("Accept", "application/json")
             .header("X-Atlassian-Token", "no-check")
             .field("file", new File("myfile.txt"))
             .asJson();
    
             System.out.println(response.getBody());

#### Python ####

    # This code sample uses the 'requests' library:
     # http://docs.python-requests.org
     import requests
     from requests.auth import HTTPBasicAuth
     import json
    
     url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
    
     auth = HTTPBasicAuth("email@example.com", "")
    
     headers = {
        "Accept": "application/json",
        "X-Atlassian-Token": "no-check"
     }
    
     response = requests.request(
        "POST",
        url,
        headers = headers,
        auth = auth,
        files = {
             "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
        }
     )
    
     print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))

#### PHP ####

    // This code sample uses the 'Unirest' library:
     // http://unirest.io/php.html
     Unirest\Request::auth('email@example.com', '');
    
     $headers = array(
       'Accept' => 'application/json',
       'X-Atlassian-Token' => 'no-check'
     );
    
     $parameters = array(
       'file' => File::add('myfile.txt')
     );
    
     $response = Unirest\Request::post(
       'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
       $headers,
       $parameters
     );
    
     var_dump($response)

#### Forge ####

    // This sample uses Atlassian Forge and the `form-data` library.
     // https://developer.atlassian.com/platform/forge/
     // https://www.npmjs.com/package/form-data
     import api from "@forge/api";
     import FormData from "form-data";
    
     const form = new FormData();
     form.append('file', fileStream, {knownLength: fileSizeInBytes});
    
     const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
         method: 'POST',
         body: form,
         headers: {
             'Accept': 'application/json',
             'X-Atlassian-Token': 'no-check'
         }
     });
    
     console.log(`Response: ${response.status} ${response.statusText}`);
     console.log(await response.json());

Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** 

 *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue that attachments are added to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add attachment", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/attachments"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add attachment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add attachment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add attachment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getChangeLogs(self, issueIdOrKey: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get changelogs", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/changelog"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get changelogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get changelogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get changelogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getChangeLogsByIds(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns changelogs for an issue specified by a list of changelog IDs.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get changelogs by IDs", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/changelog/list"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get changelogs by IDs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get changelogs by IDs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get changelogs by IDs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getComments(self, issueIdOrKey: str, startAt: int = None, maxResults: int = None, orderBy: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all comments for an issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Comments are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param orderBy: [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.
        :param expand: Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get comments", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/comment"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if orderBy is not None:
                params["orderBy"] = orderBy
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get comments Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get comments completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get comments failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addComment(self, issueIdOrKey: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a comment to an issue.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param expand: Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add comment", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/comment"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add comment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add comment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add comment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteComment(self, issueIdOrKey: str, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a comment.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
 *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param id: The ID of the comment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete comment", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/comment/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete comment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete comment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete comment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getComment(self, issueIdOrKey: str, id: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a comment.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param id: The ID of the comment.
        :param expand: Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get comment", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/comment/{id}"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get comment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get comment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get comment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateComment(self, issueIdOrKey: str, id: str, notifyUsers: bool = None, overrideEditableFlag: bool = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a comment.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
 *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param id: The ID of the comment.
        :param notifyUsers: Whether users are notified when a comment is updated.
        :param overrideEditableFlag: Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :param expand: Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update comment", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/comment/{id}"
            params = {}
            if notifyUsers is not None:
                params["notifyUsers"] = notifyUsers
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update comment Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update comment completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update comment failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getEditIssueMeta(self, issueIdOrKey: str, overrideScreenSecurity: bool = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-2-issue-issueIdOrKey-put).

This endpoint will check for these conditions:

1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
5.  Issue has a project, issue type, and status defined.
6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.

Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.

Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:

 *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
 *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param overrideScreenSecurity: Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :param overrideEditableFlag: Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get edit issue metadata", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/editmeta"
            params = {}
            if overrideScreenSecurity is not None:
                params["overrideScreenSecurity"] = overrideScreenSecurity
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get edit issue metadata Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get edit issue metadata completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get edit issue metadata failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def notify(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an email notification for an issue and adds it to the mail queue.

**[Permissions](#permissions) required:**

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: ID or key of the issue that the notification is sent for.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Send notification for issue", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/notify"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Send notification for issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Send notification for issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Send notification for issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssuePropertyKeys(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the URLs and keys of an issue's properties.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Property details are only returned where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The key or ID of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue property keys", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueProperty(self, issueIdOrKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue's property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The key or ID of the issue.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue property", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueProperty(self, issueIdOrKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the key and value of an issue's property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The key or ID of the issue.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue property", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setIssueProperty(self, issueIdOrKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of an issue's property. Use this resource to store custom data against an issue.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param propertyKey: The key of the issue property. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set issue property", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set issue property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set issue property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set issue property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteRemoteIssueLinkByGlobalId(self, issueIdOrKey: str, globalId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param globalId: The global ID of a remote issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete remote issue link by global ID", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/remotelink"
            params = {}
            if globalId is not None:
                params["globalId"] = globalId

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete remote issue link by global ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete remote issue link by global ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete remote issue link by global ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getRemoteIssueLinks(self, issueIdOrKey: str, globalId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param globalId: The global ID of the remote issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get remote issue links", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/remotelink"
            params = {}
            if globalId is not None:
                params["globalId"] = globalId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get remote issue links Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get remote issue links completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get remote issue links failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createOrUpdateRemoteIssueLink(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates or updates a remote issue link for an issue.

If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create or update remote issue link", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/remotelink"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create or update remote issue link Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create or update remote issue link completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create or update remote issue link failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteRemoteIssueLinkById(self, issueIdOrKey: str, linkId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a remote issue link from an issue.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param linkId: The ID of a remote issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete remote issue link by ID", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete remote issue link by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete remote issue link by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete remote issue link by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getRemoteIssueLinkById(self, issueIdOrKey: str, linkId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a remote issue link for an issue.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param linkId: The ID of the remote issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get remote issue link by ID", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get remote issue link by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get remote issue link by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get remote issue link by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateRemoteIssueLink(self, issueIdOrKey: str, linkId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a remote issue link for an issue.

Note: Fields without values in the request are set to null.

This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :param linkId: The ID of the remote issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update remote issue link by ID", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update remote issue link by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update remote issue link by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update remote issue link by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getTransitions(self, issueIdOrKey: str, expand: str = None, transitionId: str = None, skipRemoteOnlyCondition: bool = None, includeUnavailableTransitions: bool = None, sortByOpsBarAndStatus: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.

Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.

This operation can be accessed anonymously.

**[Permissions](#permissions) required: A list or transition is returned only when the user has:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.

        :param issueIdOrKey: The ID or key of the issue.
        :param expand: Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-2-issue-issueIdOrKey-transitions-post).
        :param transitionId: The ID of the transition.
        :param skipRemoteOnlyCondition: Whether transitions with the condition *Hide From User Condition* are included in the response.
        :param includeUnavailableTransitions: Whether details of transitions that fail a condition are included in the response
        :param sortByOpsBarAndStatus: Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get transitions", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/transitions"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if transitionId is not None:
                params["transitionId"] = transitionId
            if skipRemoteOnlyCondition is not None:
                params["skipRemoteOnlyCondition"] = skipRemoteOnlyCondition
            if includeUnavailableTransitions is not None:
                params["includeUnavailableTransitions"] = includeUnavailableTransitions
            if sortByOpsBarAndStatus is not None:
                params["sortByOpsBarAndStatus"] = sortByOpsBarAndStatus

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get transitions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get transitions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get transitions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def doTransition(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.

sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-2-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Transition issue", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/transitions"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Transition issue Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Transition issue completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Transition issue failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeVote(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.

This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete vote", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/votes"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete vote Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete vote completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete vote failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getVotes(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns details about the votes on an issue.

This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get votes", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/votes"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get votes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get votes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get votes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addVote(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.

This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add vote", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/votes"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add vote Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add vote completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add vote failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeWatcher(self, issueIdOrKey: str, username: str = None, accountId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a user as a watcher of an issue.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.

        :param issueIdOrKey: The ID or key of the issue.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete watcher", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/watchers"
            params = {}
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete watcher Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete watcher completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete watcher failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueWatchers(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the watchers for an issue.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue watchers", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/watchers"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue watchers Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue watchers completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue watchers failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addWatcher(self, issueIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.

This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.

        :param issueIdOrKey: The ID or key of the issue.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add watcher", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/watchers"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add watcher Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add watcher completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add watcher failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkDeleteWorklogs(self, issueIdOrKey: str, adjustEstimate: str = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a list of worklogs from an issue. This is an experimental API with limitations:

 *  You can't delete more than 5000 worklogs at once.
 *  No notifications will be sent for deleted worklogs.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog.
 *  If any worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param adjustEstimate: Defines how to update the issue's time estimate, the options are:

 *  `leave` Leaves the estimate unchanged.
 *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being deleted.
        :param overrideEditableFlag: Whether the work log entries should be removed to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk delete worklogs", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog"
            params = {}
            if adjustEstimate is not None:
                params["adjustEstimate"] = adjustEstimate
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk delete worklogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk delete worklogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk delete worklogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueWorklog(self, issueIdOrKey: str, startAt: int = None, maxResults: int = None, startedAfter: int = None, startedBefore: int = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Workloads are only returned where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param startedAfter: The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.
        :param startedBefore: The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.
        :param expand: Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue worklogs", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if startedAfter is not None:
                params["startedAfter"] = startedAfter
            if startedBefore is not None:
                params["startedBefore"] = startedBefore
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue worklogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue worklogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue worklogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addWorklog(self, issueIdOrKey: str, notifyUsers: bool = None, adjustEstimate: str = None, newEstimate: str = None, reduceBy: str = None, expand: str = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a worklog to an issue.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param issueIdOrKey: The ID or key the issue.
        :param notifyUsers: Whether users watching the issue are notified by email.
        :param adjustEstimate: Defines how to update the issue's time estimate, the options are:

 *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
 *  `leave` Leaves the estimate unchanged.
 *  `manual` Reduces the estimate by amount specified in `reduceBy`.
 *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
        :param newEstimate: The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
        :param reduceBy: The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.
        :param expand: Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.
        :param overrideEditableFlag: Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add worklog", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog"
            params = {}
            if notifyUsers is not None:
                params["notifyUsers"] = notifyUsers
            if adjustEstimate is not None:
                params["adjustEstimate"] = adjustEstimate
            if newEstimate is not None:
                params["newEstimate"] = newEstimate
            if reduceBy is not None:
                params["reduceBy"] = reduceBy
            if expand is not None:
                params["expand"] = expand
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add worklog Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add worklog completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add worklog failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkMoveWorklogs(self, issueIdOrKey: str, adjustEstimate: str = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Moves a list of worklogs from one issue to another. This is an experimental API with several limitations:

 *  You can't move more than 5000 worklogs at once.
 *  You can't move worklogs containing an attachment.
 *  You can't move worklogs restricted by project roles.
 *  No notifications will be sent for moved worklogs.
 *  No webhooks or events will be sent for moved worklogs.
 *  No issue history will be recorded for moved worklogs.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects containing the source and destination issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Delete all worklogs*[ and *Edit all worklogs*](https://confluence.atlassian.com/x/yodKLg)[project permission](https://confluence.atlassian.com/x/yodKLg)
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: issueIdOrKey
        :param adjustEstimate: Defines how to update the issues' time estimate, the options are:

 *  `leave` Leaves the estimate unchanged.
 *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being moved in the source issue, and increases it in the destination issue.
        :param overrideEditableFlag: Whether the work log entry should be moved to and from the issues even if the issues are not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk move worklogs", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/move"
            params = {}
            if adjustEstimate is not None:
                params["adjustEstimate"] = adjustEstimate
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk move worklogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk move worklogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk move worklogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorklog(self, issueIdOrKey: str, id: str, notifyUsers: bool = None, adjustEstimate: str = None, newEstimate: str = None, increaseBy: str = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a worklog from an issue.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param id: The ID of the worklog.
        :param notifyUsers: Whether users watching the issue are notified by email.
        :param adjustEstimate: Defines how to update the issue's time estimate, the options are:

 *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
 *  `leave` Leaves the estimate unchanged.
 *  `manual` Increases the estimate by amount specified in `increaseBy`.
 *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
        :param newEstimate: The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
        :param increaseBy: The amount to increase the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `manual`.
        :param overrideEditableFlag: Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete worklog", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{id}"
            params = {}
            if notifyUsers is not None:
                params["notifyUsers"] = notifyUsers
            if adjustEstimate is not None:
                params["adjustEstimate"] = adjustEstimate
            if newEstimate is not None:
                params["newEstimate"] = newEstimate
            if increaseBy is not None:
                params["increaseBy"] = increaseBy
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete worklog Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete worklog completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete worklog failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorklog(self, issueIdOrKey: str, id: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a worklog.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param id: The ID of the worklog.
        :param expand: Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts

`properties`, which returns worklog properties.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get worklog", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{id}"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get worklog Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get worklog completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get worklog failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorklog(self, issueIdOrKey: str, id: str, notifyUsers: bool = None, adjustEstimate: str = None, newEstimate: str = None, expand: str = None, overrideEditableFlag: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a worklog.

Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key the issue.
        :param id: The ID of the worklog.
        :param notifyUsers: Whether users watching the issue are notified by email.
        :param adjustEstimate: Defines how to update the issue's time estimate, the options are:

 *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
 *  `leave` Leaves the estimate unchanged.
 *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
        :param newEstimate: The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
        :param expand: Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.
        :param overrideEditableFlag: Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update worklog", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{id}"
            params = {}
            if notifyUsers is not None:
                params["notifyUsers"] = notifyUsers
            if adjustEstimate is not None:
                params["adjustEstimate"] = adjustEstimate
            if newEstimate is not None:
                params["newEstimate"] = newEstimate
            if expand is not None:
                params["expand"] = expand
            if overrideEditableFlag is not None:
                params["overrideEditableFlag"] = overrideEditableFlag
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update worklog Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update worklog completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update worklog failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorklogPropertyKeys(self, issueIdOrKey: str, worklogId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the keys of all properties for a worklog.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param worklogId: The ID of the worklog.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get worklog property keys", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{worklogId}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get worklog property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get worklog property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get worklog property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorklogProperty(self, issueIdOrKey: str, worklogId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a worklog property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param worklogId: The ID of the worklog.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete worklog property", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete worklog property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete worklog property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete worklog property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorklogProperty(self, issueIdOrKey: str, worklogId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the value of a worklog property.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param worklogId: The ID of the worklog.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get worklog property", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get worklog property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get worklog property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get worklog property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setWorklogProperty(self, issueIdOrKey: str, worklogId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of a worklog property. Use this operation to store custom data against the worklog.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
 *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.

        :param issueIdOrKey: The ID or key of the issue.
        :param worklogId: The ID of the worklog.
        :param propertyKey: The key of the issue property. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set worklog property", False)

        try:
            endpoint = f"/rest/api/2/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set worklog property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set worklog property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set worklog property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def linkIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.

This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/2/issue/[linked issue key]?fields=issuelinks`.

If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
 *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
 *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue link", False)

        try:
            endpoint = "/rest/api/2/issueLink"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue link Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue link completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue link failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueLink(self, linkId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue link.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
 *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.

        :param linkId: The ID of the issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue link", False)

        try:
            endpoint = f"/rest/api/2/issueLink/{linkId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue link Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue link completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue link failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueLink(self, linkId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an issue link.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.

        :param linkId: The ID of the issue link.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue link", False)

        try:
            endpoint = f"/rest/api/2/issueLink/{linkId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue link Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue link completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue link failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueLinkTypes(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of all issue link types.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue link types", False)

        try:
            endpoint = "/rest/api/2/issueLinkType"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue link types Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue link types completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue link types failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueLinkType(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue link type", False)

        try:
            endpoint = "/rest/api/2/issueLinkType"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue link type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue link type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue link type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueLinkType(self, issueLinkTypeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue link type.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueLinkTypeId: The ID of the issue link type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue link type", False)

        try:
            endpoint = f"/rest/api/2/issueLinkType/{issueLinkTypeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue link type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue link type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue link type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueLinkType(self, issueLinkTypeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an issue link type.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.

        :param issueLinkTypeId: The ID of the issue link type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue link type", False)

        try:
            endpoint = f"/rest/api/2/issueLinkType/{issueLinkTypeId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue link type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue link type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue link type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateIssueLinkType(self, issueLinkTypeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates an issue link type.

To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueLinkTypeId: The ID of the issue link type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue link type", False)

        try:
            endpoint = f"/rest/api/2/issueLinkType/{issueLinkTypeId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue link type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue link type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue link type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def exportArchivedIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.

Note that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.

**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)

**License required:** Premium or Enterprise

**Signed-in users only:** This API can't be accessed anonymously.

**Rate limiting:** Only a single request can be active at any given time.

  



        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Export archived issue(s)", False)

        try:
            endpoint = "/rest/api/2/issues/archive/export"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Export archived issue(s) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Export archived issue(s) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Export archived issue(s) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueSecuritySchemes(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue security schemes", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue security schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue security schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue security schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueSecurityScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue security scheme", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue security scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue security scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue security scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSecurityLevels(self, startAt: str = None, maxResults: str = None, id: List[Any] = None, schemeId: List[Any] = None, onlyDefault: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue security levels.

Only issue security levels in the context of classic projects are returned.

Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.
        :param schemeId: The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
        :param onlyDefault: When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue security levels", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes/level"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if schemeId is not None:
                params["schemeId"] = schemeId
            if onlyDefault is not None:
                params["onlyDefault"] = onlyDefault

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue security levels Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue security levels completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue security levels failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setDefaultLevels(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets default issue security levels for schemes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set default issue security levels", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes/level/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set default issue security levels Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set default issue security levels completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set default issue security levels failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSecurityLevelMembers(self, startAt: str = None, maxResults: str = None, id: List[Any] = None, schemeId: List[Any] = None, levelId: List[Any] = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue security level members.

Only issue security level members in the context of classic projects are returned.

Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.
        :param schemeId: The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.
        :param levelId: The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `all` Returns all expandable information
 *  `field` Returns information about the custom field granted the permission
 *  `group` Returns information about the group that is granted the permission
 *  `projectRole` Returns information about the project role granted the permission
 *  `user` Returns information about the user who is granted the permission
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue security level members", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes/level/member"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if schemeId is not None:
                params["schemeId"] = schemeId
            if levelId is not None:
                params["levelId"] = levelId
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue security level members Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue security level members completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue security level members failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchProjectsUsingSecuritySchemes(self, startAt: str = None, maxResults: str = None, issueSecuritySchemeId: List[Any] = None, projectId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param issueSecuritySchemeId: The list of security scheme IDs to be filtered out.
        :param projectId: The list of project IDs to be filtered out.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get projects using issue security schemes", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes/project"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if issueSecuritySchemeId is not None:
                params["issueSecuritySchemeId"] = issueSecuritySchemeId
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get projects using issue security schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get projects using issue security schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get projects using issue security schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def associateSchemesToProjects(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Associate security scheme to project", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes/project"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Associate security scheme to project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Associate security scheme to project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Associate security scheme to project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchSecuritySchemes(self, startAt: str = None, maxResults: str = None, id: List[Any] = None, projectId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue security schemes.  
If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.

Only issue security schemes in the context of classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.
        :param projectId: The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search issue security schemes", False)

        try:
            endpoint = "/rest/api/2/issuesecurityschemes/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search issue security schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search issue security schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search issue security schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueSecurityScheme(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an issue security scheme along with its security levels.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.

        :param id: The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue security scheme", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue security scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue security scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue security scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateIssueSecurityScheme(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the issue security scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue security scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue security scheme", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue security scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue security scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue security scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueSecurityLevelMembers(self, issueSecuritySchemeId: int, startAt: int = None, maxResults: int = None, issueSecurityLevelId: List[Any] = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns issue security level members.

Only issue security level members in context of classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueSecuritySchemeId: The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param issueSecurityLevelId: The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue security level members by issue security scheme", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{issueSecuritySchemeId}/members"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if issueSecurityLevelId is not None:
                params["issueSecurityLevelId"] = issueSecurityLevelId
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue security level members by issue security scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue security level members by issue security scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue security level members by issue security scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteSecurityScheme(self, schemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue security scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the issue security scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue security scheme", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{schemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue security scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue security scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue security scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addSecurityLevel(self, schemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the issue security scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add issue security levels", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{schemeId}/level"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add issue security levels Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add issue security levels completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add issue security levels failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeLevel(self, schemeId: str, levelId: str, replaceWith: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue security level.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the issue security scheme.
        :param levelId: The ID of the issue security level to remove.
        :param replaceWith: The ID of the issue security level that will replace the currently selected level.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove issue security level", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{schemeId}/level/{levelId}"
            params = {}
            if replaceWith is not None:
                params["replaceWith"] = replaceWith

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove issue security level Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove issue security level completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove issue security level failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateSecurityLevel(self, schemeId: str, levelId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the issue security level.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the issue security scheme level belongs to.
        :param levelId: The ID of the issue security level to update.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue security level", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{schemeId}/level/{levelId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue security level Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue security level completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue security level failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addSecurityLevelMembers(self, schemeId: str, levelId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds members to the issue security level. You can add up to 100 members per request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the issue security scheme.
        :param levelId: The ID of the issue security level.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add issue security level members", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{schemeId}/level/{levelId}/member"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add issue security level members Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add issue security level members completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add issue security level members failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeMemberFromSecurityLevel(self, schemeId: str, levelId: str, memberId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes an issue security level member from an issue security scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the issue security scheme.
        :param levelId: The ID of the issue security level.
        :param memberId: The ID of the issue security level member to be removed.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove member from issue security level", False)

        try:
            endpoint = f"/rest/api/2/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove member from issue security level Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove member from issue security level completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove member from issue security level failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueAllTypes(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all issue types.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issue types are only returned as follows:

 *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
 *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all issue types for user", False)

        try:
            endpoint = "/rest/api/2/issuetype"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all issue types for user Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all issue types for user completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all issue types for user failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueType(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue type and adds it to the default issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue type", False)

        try:
            endpoint = "/rest/api/2/issuetype"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypesForProject(self, projectId: int, level: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns issue types for a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectId: The ID of the project.
        :param level: The level of the issue type to filter by. Use:

 *  `-1` for Subtask.
 *  `0` for Base.
 *  `1` for Epic.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue types for project", False)

        try:
            endpoint = "/rest/api/2/issuetype/project"
            params = {}
            if projectId is not None:
                params["projectId"] = projectId
            if level is not None:
                params["level"] = level

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue types for project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue types for project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue types for project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueType(self, id: str, alternativeIssueTypeId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-2-issuetype-id-alternatives-get) resource.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue type.
        :param alternativeIssueTypeId: The ID of the replacement issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue type", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{id}"
            params = {}
            if alternativeIssueTypeId is not None:
                params["alternativeIssueTypeId"] = alternativeIssueTypeId

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueType(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an issue type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateIssueType(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the issue type.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue type", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAlternativeIssueTypes(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param id: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get alternative issue types", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{id}/alternatives"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get alternative issue types Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get alternative issue types completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get alternative issue types failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueTypeAvatar(self, id: str, x: int = None, y: int = None, size: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Loads an avatar for the issue type.

Specify the avatar's local file location in the body of the request. Also, include the following headers:

 *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
 *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

For example:  
`curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/2/issuetype/{issueTypeId}'This`

The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

After creating the avatar, use [ Update issue type](#api-rest-api-2-issuetype-id-put) to set it as the issue type's displayed avatar.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue type.
        :param x: The X coordinate of the top-left corner of the crop region.
        :param y: The Y coordinate of the top-left corner of the crop region.
        :param size: The length of each side of the crop region.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Load issue type avatar", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{id}/avatar2"
            params = {}
            if x is not None:
                params["x"] = x
            if y is not None:
                params["y"] = y
            if size is not None:
                params["size"] = size
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Load issue type avatar Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Load issue type avatar completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Load issue type avatar failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypePropertyKeys(self, issueTypeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.

        :param issueTypeId: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type property keys", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{issueTypeId}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueTypeProperty(self, issueTypeId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeId: The ID of the issue type.
        :param propertyKey: The key of the property. Use [Get issue type property keys](#api-rest-api-2-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue type property", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{issueTypeId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue type property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue type property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue type property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeProperty(self, issueTypeId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.

        :param issueTypeId: The ID of the issue type.
        :param propertyKey: The key of the property. Use [Get issue type property keys](#api-rest-api-2-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type property", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{issueTypeId}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setIssueTypeProperty(self, issueTypeId: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeId: The ID of the issue type.
        :param propertyKey: The key of the issue type property. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set issue type property", False)

        try:
            endpoint = f"/rest/api/2/issuetype/{issueTypeId}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set issue type property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set issue type property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set issue type property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllIssueTypeSchemes(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, orderBy: str = None, expand: str = None, queryString: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue type schemes.

Only issue type schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `name` Sorts by issue type scheme name.
 *  `id` Sorts by issue type scheme ID.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.
 *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
        :param queryString: String used to perform a case-insensitive partial match with issue type scheme name.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all issue type schemes", False)

        try:
            endpoint = "/rest/api/2/issuetypescheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if orderBy is not None:
                params["orderBy"] = orderBy
            if expand is not None:
                params["expand"] = expand
            if queryString is not None:
                params["queryString"] = queryString

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all issue type schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all issue type schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all issue type schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueTypeScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue type scheme", False)

        try:
            endpoint = "/rest/api/2/issuetypescheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue type scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue type scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue type scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeSchemesMapping(self, startAt: int = None, maxResults: int = None, issueTypeSchemeId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue type scheme items.

Only issue type scheme items used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param issueTypeSchemeId: The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type scheme items", False)

        try:
            endpoint = "/rest/api/2/issuetypescheme/mapping"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if issueTypeSchemeId is not None:
                params["issueTypeSchemeId"] = issueTypeSchemeId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type scheme items Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type scheme items completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type scheme items failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeSchemeForProjects(self, startAt: int = None, maxResults: int = None, projectId: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.

Only issue type schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param projectId: The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type schemes for projects", False)

        try:
            endpoint = "/rest/api/2/issuetypescheme/project"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type schemes for projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type schemes for projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type schemes for projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignIssueTypeSchemeToProject(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns an issue type scheme to a project.

If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.

Issue type schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign issue type scheme to project", False)

        try:
            endpoint = "/rest/api/2/issuetypescheme/project"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign issue type scheme to project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign issue type scheme to project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign issue type scheme to project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueTypeScheme(self, issueTypeSchemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue type scheme.

Only issue type schemes used in classic projects can be deleted.

Any projects assigned to the scheme are reassigned to the default issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeSchemeId: The ID of the issue type scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue type scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescheme/{issueTypeSchemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue type scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue type scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue type scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateIssueTypeScheme(self, issueTypeSchemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates an issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeSchemeId: The ID of the issue type scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue type scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescheme/{issueTypeSchemeId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue type scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue type scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue type scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addIssueTypesToIssueTypeScheme(self, issueTypeSchemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds issue types to an issue type scheme.

The added issue types are appended to the issue types list.

If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeSchemeId: The ID of the issue type scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add issue types to issue type scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescheme/{issueTypeSchemeId}/issuetype"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add issue types to issue type scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add issue types to issue type scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add issue types to issue type scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def reorderIssueTypesInIssueTypeScheme(self, issueTypeSchemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the order of issue types in an issue type scheme.

The request body parameters must meet the following requirements:

 *  all of the issue types must belong to the issue type scheme.
 *  either `after` or `position` must be provided.
 *  the issue type in `after` must not be in the issue type list.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeSchemeId: The ID of the issue type scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Change order of issue types", False)

        try:
            endpoint = f"/rest/api/2/issuetypescheme/{issueTypeSchemeId}/issuetype/move"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Change order of issue types Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Change order of issue types completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Change order of issue types failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeIssueTypeFromIssueTypeScheme(self, issueTypeSchemeId: int, issueTypeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes an issue type from an issue type scheme.

This operation cannot remove:

 *  any issue type used by issues.
 *  any issue types from the default issue type scheme.
 *  the last standard issue type from an issue type scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeSchemeId: The ID of the issue type scheme.
        :param issueTypeId: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove issue type from issue type scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove issue type from issue type scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove issue type from issue type scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove issue type from issue type scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeScreenSchemes(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, queryString: str = None, orderBy: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue type screen schemes.

Only issue type screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param queryString: String used to perform a case-insensitive partial match with issue type screen scheme name.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `name` Sorts by issue type screen scheme name.
 *  `id` Sorts by issue type screen scheme ID.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type screen schemes", False)

        try:
            endpoint = "/rest/api/2/issuetypescreenscheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if queryString is not None:
                params["queryString"] = queryString
            if orderBy is not None:
                params["orderBy"] = orderBy
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type screen schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type screen schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type screen schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createIssueTypeScreenScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create issue type screen scheme", False)

        try:
            endpoint = "/rest/api/2/issuetypescreenscheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create issue type screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create issue type screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create issue type screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeScreenSchemeMappings(self, startAt: int = None, maxResults: int = None, issueTypeScreenSchemeId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue type screen scheme items.

Only issue type screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param issueTypeScreenSchemeId: The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type screen scheme items", False)

        try:
            endpoint = "/rest/api/2/issuetypescreenscheme/mapping"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if issueTypeScreenSchemeId is not None:
                params["issueTypeScreenSchemeId"] = issueTypeScreenSchemeId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type screen scheme items Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type screen scheme items completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type screen scheme items failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueTypeScreenSchemeProjectAssociations(self, startAt: int = None, maxResults: int = None, projectId: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.

Only issue type screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param projectId: The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type screen schemes for projects", False)

        try:
            endpoint = "/rest/api/2/issuetypescreenscheme/project"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type screen schemes for projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type screen schemes for projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type screen schemes for projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignIssueTypeScreenSchemeToProject(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns an issue type screen scheme to a project.

Issue type screen schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign issue type screen scheme to project", False)

        try:
            endpoint = "/rest/api/2/issuetypescreenscheme/project"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign issue type screen scheme to project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign issue type screen scheme to project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign issue type screen scheme to project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteIssueTypeScreenScheme(self, issueTypeScreenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeScreenSchemeId: The ID of the issue type screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue type screen scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescreenscheme/{issueTypeScreenSchemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue type screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue type screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue type screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateIssueTypeScreenScheme(self, issueTypeScreenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeScreenSchemeId: The ID of the issue type screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue type screen scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescreenscheme/{issueTypeScreenSchemeId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue type screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue type screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue type screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def appendMappingsForIssueTypeScreenScheme(self, issueTypeScreenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Appends issue type to screen scheme mappings to an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeScreenSchemeId: The ID of the issue type screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Append mappings to issue type screen scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Append mappings to issue type screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Append mappings to issue type screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Append mappings to issue type screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateDefaultScreenScheme(self, issueTypeScreenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeScreenSchemeId: The ID of the issue type screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update issue type screen scheme default screen scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update issue type screen scheme default screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update issue type screen scheme default screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update issue type screen scheme default screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeMappingsFromIssueTypeScreenScheme(self, issueTypeScreenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes issue type to screen scheme mappings from an issue type screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeScreenSchemeId: The ID of the issue type screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove mappings from issue type screen scheme", False)

        try:
            endpoint = f"/rest/api/2/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove mappings from issue type screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove mappings from issue type screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove mappings from issue type screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectsForIssueTypeScreenScheme(self, issueTypeScreenSchemeId: int, startAt: int = None, maxResults: int = None, query: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.

Only company-managed projects associated with an issue type screen scheme are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param issueTypeScreenSchemeId: The ID of the issue type screen scheme.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param query: query
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type screen scheme projects", False)

        try:
            endpoint = f"/rest/api/2/issuetypescreenscheme/{issueTypeScreenSchemeId}/project"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if query is not None:
                params["query"] = query

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type screen scheme projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type screen scheme projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type screen scheme projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAutoComplete(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.

To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-2-jql-autocompletedata-post) can be used.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get field reference data (GET)", False)

        try:
            endpoint = "/rest/api/2/jql/autocompletedata"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get field reference data (GET) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get field reference data (GET) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get field reference data (GET) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAutoCompletePost(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.

This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.

It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get field reference data (POST)", False)

        try:
            endpoint = "/rest/api/2/jql/autocompletedata"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get field reference data (POST) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get field reference data (POST) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get field reference data (POST) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFieldAutoCompleteForQueryString(self, fieldName: str = None, fieldValue: str = None, predicateName: str = None, predicateValue: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the JQL search auto complete suggestions for a field.

Suggestions can be obtained by providing:

 *  `fieldName` to get a list of all values for the field.
 *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
 *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
 *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param fieldName: The name of the field.
        :param fieldValue: The partial field item name entered by the user.
        :param predicateName: The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.
        :param predicateValue: The partial predicate item name entered by the user.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get field auto complete suggestions", False)

        try:
            endpoint = "/rest/api/2/jql/autocompletedata/suggestions"
            params = {}
            if fieldName is not None:
                params["fieldName"] = fieldName
            if fieldValue is not None:
                params["fieldValue"] = fieldValue
            if predicateName is not None:
                params["predicateName"] = predicateName
            if predicateValue is not None:
                params["predicateValue"] = predicateValue

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get field auto complete suggestions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get field auto complete suggestions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get field auto complete suggestions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPrecomputations(self, functionKey: List[Any] = None, startAt: int = None, maxResults: int = None, orderBy: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.

**[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.

The new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param functionKey: The function key in format:

 *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`
 *  Connect: `[App key]__[Module key]`
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `functionKey` Sorts by the functionKey.
 *  `used` Sorts by the used timestamp.
 *  `created` Sorts by the created timestamp.
 *  `updated` Sorts by the updated timestamp.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get precomputations (apps)", False)

        try:
            endpoint = "/rest/api/2/jql/function/computation"
            params = {}
            if functionKey is not None:
                params["functionKey"] = functionKey
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if orderBy is not None:
                params["orderBy"] = orderBy

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get precomputations (apps) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get precomputations (apps) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get precomputations (apps) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updatePrecomputations(self, skipNotFoundPrecomputations: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Update the precomputation value of a function created by a Forge/Connect app.

**[Permissions](#permissions) required:** An API for apps to update their own precomputations.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param skipNotFoundPrecomputations: skipNotFoundPrecomputations
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update precomputations (apps)", False)

        try:
            endpoint = "/rest/api/2/jql/function/computation"
            params = {}
            if skipNotFoundPrecomputations is not None:
                params["skipNotFoundPrecomputations"] = skipNotFoundPrecomputations
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update precomputations (apps) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update precomputations (apps) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update precomputations (apps) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPrecomputationsByID(self, orderBy: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns function precomputations by IDs, along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.

**[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.

The new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param orderBy: [Order](#ordering) the results by a field:

 *  `functionKey` Sorts by the functionKey.
 *  `used` Sorts by the used timestamp.
 *  `created` Sorts by the created timestamp.
 *  `updated` Sorts by the updated timestamp.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get precomputations by ID (apps)", False)

        try:
            endpoint = "/rest/api/2/jql/function/computation/search"
            params = {}
            if orderBy is not None:
                params["orderBy"] = orderBy
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get precomputations by ID (apps) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get precomputations by ID (apps) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get precomputations by ID (apps) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def matchIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Checks whether one or more issues would be returned by one or more JQL queries.

**[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Check issues against JQL", False)

        try:
            endpoint = "/rest/api/2/jql/match"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Check issues against JQL Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Check issues against JQL completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Check issues against JQL failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def parseJqlQueries(self, validation: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Parses and validates JQL queries.

Validation is performed in context of the current user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param validation: How to validate the JQL query and treat the validation results. Validation options include:

 *  `strict` Returns all errors. If validation fails, the query structure is not returned.
 *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.
 *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Parse JQL query", False)

        try:
            endpoint = "/rest/api/2/jql/parse"
            params = {}
            if validation is not None:
                params["validation"] = validation
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Parse JQL query Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Parse JQL query completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Parse JQL query failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def migrateQueries(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.

You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Convert user identifiers to account IDs in JQL queries", False)

        try:
            endpoint = "/rest/api/2/jql/pdcleaner"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Convert user identifiers to account IDs in JQL queries Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Convert user identifiers to account IDs in JQL queries completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Convert user identifiers to account IDs in JQL queries failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def sanitiseJqlQueries(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.

For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.

Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).

Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Sanitize JQL queries", False)

        try:
            endpoint = "/rest/api/2/jql/sanitize"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Sanitize JQL queries Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Sanitize JQL queries completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Sanitize JQL queries failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllLabels(self, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of labels.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all labels", False)

        try:
            endpoint = "/rest/api/2/label"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all labels Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all labels completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all labels failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getApproximateLicenseCount(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get approximate license count", False)

        try:
            endpoint = "/rest/api/2/license/approximateLicenseCount"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get approximate license count Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get approximate license count completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get approximate license count failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getApproximateApplicationLicenseCount(self, applicationKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param applicationKey: The ID of the application, represents a specific version of Jira.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get approximate application license count", False)

        try:
            endpoint = f"/rest/api/2/license/approximateLicenseCount/product/{applicationKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get approximate application license count Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get approximate application license count completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get approximate application license count failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getMyPermissions(self, projectKey: str = None, projectId: str = None, issueKey: str = None, issueId: str = None, permissions: str = None, projectUuid: str = None, projectConfigurationUuid: str = None, commentId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.

The user is reported as having a project permission:

 *  in the global context, if the user has the project permission in any project.
 *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
 *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
 *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.

This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.

For [Jira Service Management project permissions](https://support.atlassian.com/jira-cloud-administration/docs/customize-jira-service-management-permissions/), this will be evaluated similarly to a user in the customer portal. For example, if the BROWSE\_PROJECTS permission is granted to Service Project Customer - Portal Access, any users with access to the customer portal will have the BROWSE\_PROJECTS permission.

Global permissions are unaffected by context.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param projectKey: The key of project. Ignored if `projectId` is provided.
        :param projectId: The ID of project.
        :param issueKey: The key of the issue. Ignored if `issueId` is provided.
        :param issueId: The ID of the issue.
        :param permissions: A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-2-permissions-get).
        :param projectUuid: projectUuid
        :param projectConfigurationUuid: projectConfigurationUuid
        :param commentId: The ID of the comment.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get my permissions", False)

        try:
            endpoint = "/rest/api/2/mypermissions"
            params = {}
            if projectKey is not None:
                params["projectKey"] = projectKey
            if projectId is not None:
                params["projectId"] = projectId
            if issueKey is not None:
                params["issueKey"] = issueKey
            if issueId is not None:
                params["issueId"] = issueId
            if permissions is not None:
                params["permissions"] = permissions
            if projectUuid is not None:
                params["projectUuid"] = projectUuid
            if projectConfigurationUuid is not None:
                params["projectConfigurationUuid"] = projectConfigurationUuid
            if commentId is not None:
                params["commentId"] = commentId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get my permissions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get my permissions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get my permissions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removePreference(self, key: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a preference of the user, which restores the default value of system defined settings.

Note that these keys are deprecated:

 *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
 *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.

Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param key: The key of the preference.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete preference", False)

        try:
            endpoint = "/rest/api/2/mypreferences"
            params = {}
            if key is not None:
                params["key"] = key

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete preference Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete preference completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete preference failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPreference(self, key: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the value of a preference of the current user.

Note that these keys are deprecated:

 *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
 *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.

These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.

 *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
 *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
 *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
 *  *user.notifications.mentions* Whether the user gets notified when they are mentions.

Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param key: The key of the preference.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get preference", False)

        try:
            endpoint = "/rest/api/2/mypreferences"
            params = {}
            if key is not None:
                params["key"] = key

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get preference Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get preference completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get preference failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setPreference(self, key: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:

 *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
 *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
 *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
 *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
 *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.

Note that these keys are deprecated:

 *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
 *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.

These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.

 *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
 *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
 *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
 *  *user.notifications.mentions* Whether the user gets notified when they are mentions.

Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param key: The key of the preference. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set preference", False)

        try:
            endpoint = "/rest/api/2/mypreferences"
            params = {}
            if key is not None:
                params["key"] = key
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set preference Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set preference completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set preference failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteLocale(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.

Deletes the locale of the user, which restores the default setting.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete locale", False)

        try:
            endpoint = "/rest/api/2/mypreferences/locale"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete locale Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete locale completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete locale failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getLocale(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the locale for the user.

If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get locale", False)

        try:
            endpoint = "/rest/api/2/mypreferences/locale"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get locale Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get locale completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get locale failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setLocale(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.

Sets the locale of the user. The locale must be one supported by the instance of Jira.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set locale", False)

        try:
            endpoint = "/rest/api/2/mypreferences/locale"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set locale Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set locale completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set locale failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getCurrentUser(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns details for the current user.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param expand: Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `groups` Returns all groups, including nested groups, the user belongs to.
 *  `applicationRoles` Returns the application roles the user is assigned to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get current user", False)

        try:
            endpoint = "/rest/api/2/myself"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get current user Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get current user completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get current user failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getNotificationSchemes(self, startAt: str = None, maxResults: str = None, id: List[Any] = None, projectId: List[Any] = None, onlyDefault: bool = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.

*Note that you should allow for events without recipients to appear in responses.*

**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of notification schemes IDs to be filtered by
        :param projectId: The list of projects IDs to be filtered by
        :param onlyDefault: When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `all` Returns all expandable information
 *  `field` Returns information about any custom fields assigned to receive an event
 *  `group` Returns information about any groups assigned to receive an event
 *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
 *  `projectRole` Returns information about any project roles assigned to receive an event
 *  `user` Returns information about any users assigned to receive an event
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get notification schemes paginated", False)

        try:
            endpoint = "/rest/api/2/notificationscheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if projectId is not None:
                params["projectId"] = projectId
            if onlyDefault is not None:
                params["onlyDefault"] = onlyDefault
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get notification schemes paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get notification schemes paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get notification schemes paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createNotificationScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a notification scheme with notifications. You can create up to 1000 notifications per request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create notification scheme", False)

        try:
            endpoint = "/rest/api/2/notificationscheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getNotificationSchemeToProjectMappings(self, startAt: str = None, maxResults: str = None, notificationSchemeId: List[Any] = None, projectId: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param notificationSchemeId: The list of notifications scheme IDs to be filtered out
        :param projectId: The list of project IDs to be filtered out
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get projects using notification schemes paginated", False)

        try:
            endpoint = "/rest/api/2/notificationscheme/project"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if notificationSchemeId is not None:
                params["notificationSchemeId"] = notificationSchemeId
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get projects using notification schemes paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get projects using notification schemes paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get projects using notification schemes paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getNotificationScheme(self, id: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.

**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.

        :param id: The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-2-notificationscheme-get) to get a list of notification scheme IDs.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `all` Returns all expandable information
 *  `field` Returns information about any custom fields assigned to receive an event
 *  `group` Returns information about any groups assigned to receive an event
 *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
 *  `projectRole` Returns information about any project roles assigned to receive an event
 *  `user` Returns information about any users assigned to receive an event
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get notification scheme", False)

        try:
            endpoint = f"/rest/api/2/notificationscheme/{id}"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateNotificationScheme(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a notification scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the notification scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update notification scheme", False)

        try:
            endpoint = f"/rest/api/2/notificationscheme/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addNotifications(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds notifications to a notification scheme. You can add up to 1000 notifications per request.

*Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the notification scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add notifications to notification scheme", False)

        try:
            endpoint = f"/rest/api/2/notificationscheme/{id}/notification"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add notifications to notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add notifications to notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add notifications to notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteNotificationScheme(self, notificationSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a notification scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param notificationSchemeId: The ID of the notification scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete notification scheme", False)

        try:
            endpoint = f"/rest/api/2/notificationscheme/{notificationSchemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeNotificationFromNotificationScheme(self, notificationSchemeId: str, notificationId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes a notification from a notification scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param notificationSchemeId: The ID of the notification scheme.
        :param notificationId: The ID of the notification.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove notification from notification scheme", False)

        try:
            endpoint = f"/rest/api/2/notificationscheme/{notificationSchemeId}/notification/{notificationId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove notification from notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove notification from notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove notification from notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllPermissions(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all permissions, including:

 *  global permissions.
 *  project permissions.
 *  global permissions added by plugins.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all permissions", False)

        try:
            endpoint = "/rest/api/2/permissions"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all permissions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all permissions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all permissions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getBulkPermissions(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns:

 *  for a list of global permissions, the global permissions granted to a user.
 *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.

If no account ID is provided, the operation returns details for the logged in user.

Note that:

 *  Invalid project and issue IDs are ignored.
 *  A maximum of 1000 projects and 1000 issues can be checked.
 *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
 *  Empty strings in `projectPermissions.permissions` are ignored.

**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.

 *  **Classic**: `read:jira-work`
 *  **Granular**: `read:permission:jira`

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get bulk permissions", False)

        try:
            endpoint = "/rest/api/2/permissions/check"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get bulk permissions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get bulk permissions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get bulk permissions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPermittedProjects(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all the projects where the user is granted a list of project permissions.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get permitted projects", False)

        try:
            endpoint = "/rest/api/2/permissions/project"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get permitted projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get permitted projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get permitted projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllPermissionSchemes(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all permission schemes.

### About permission schemes and grants ###

A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.

#### Holder object ####

The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.

The `holder` object is defined by the following properties:

 *  `type` Identifies the user or group (see the list of types below).
 *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
 *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`

The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):

 *  `anyone` Grant for anonymous users.
 *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
 *  `assignee` Grant for the user currently assigned to an issue.
 *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
 *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
 *  `projectLead` Grant for a project lead.
 *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
 *  `reporter` Grant for the user who reported the issue.
 *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
 *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
 *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).

#### Built-in permissions ####

The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.

**Project permissions**

 *  `ADMINISTER_PROJECTS`
 *  `BROWSE_PROJECTS`
 *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
 *  `SERVICEDESK_AGENT` (Jira Service Desk only)
 *  `VIEW_DEV_TOOLS` (Jira Software only)
 *  `VIEW_READONLY_WORKFLOW`

**Issue permissions**

 *  `ASSIGNABLE_USER`
 *  `ASSIGN_ISSUES`
 *  `CLOSE_ISSUES`
 *  `CREATE_ISSUES`
 *  `DELETE_ISSUES`
 *  `EDIT_ISSUES`
 *  `LINK_ISSUES`
 *  `MODIFY_REPORTER`
 *  `MOVE_ISSUES`
 *  `RESOLVE_ISSUES`
 *  `SCHEDULE_ISSUES`
 *  `SET_ISSUE_SECURITY`
 *  `TRANSITION_ISSUES`

**Voters and watchers permissions**

 *  `MANAGE_WATCHERS`
 *  `VIEW_VOTERS_AND_WATCHERS`

**Comments permissions**

 *  `ADD_COMMENTS`
 *  `DELETE_ALL_COMMENTS`
 *  `DELETE_OWN_COMMENTS`
 *  `EDIT_ALL_COMMENTS`
 *  `EDIT_OWN_COMMENTS`

**Attachments permissions**

 *  `CREATE_ATTACHMENTS`
 *  `DELETE_ALL_ATTACHMENTS`
 *  `DELETE_OWN_ATTACHMENTS`

**Time tracking permissions**

 *  `DELETE_ALL_WORKLOGS`
 *  `DELETE_OWN_WORKLOGS`
 *  `EDIT_ALL_WORKLOGS`
 *  `EDIT_OWN_WORKLOGS`
 *  `WORK_ON_ISSUES`

**[Permissions](#permissions) required:** Permission to access Jira.

        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all permission schemes", False)

        try:
            endpoint = "/rest/api/2/permissionscheme"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all permission schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all permission schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all permission schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createPermissionScheme(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create permission scheme", False)

        try:
            endpoint = "/rest/api/2/permissionscheme"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create permission scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create permission scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create permission scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deletePermissionScheme(self, schemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a permission scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the permission scheme being deleted.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete permission scheme", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete permission scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete permission scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete permission scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPermissionScheme(self, schemeId: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a permission scheme.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param schemeId: The ID of the permission scheme to return.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get permission scheme", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get permission scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get permission scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get permission scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updatePermissionScheme(self, schemeId: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a permission scheme. Below are some important things to note when using this resource:

 *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
 *  If you want to update only the name and description, then do not send a permissions list in the request.
 *  Sending an empty list will remove all permission grants from the permission scheme.

If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-2-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-2-permissionscheme-schemeId-permission-permissionId-delete).

See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the permission scheme to update.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update permission scheme", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update permission scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update permission scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update permission scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPermissionSchemeGrants(self, schemeId: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all permission grants for a permission scheme.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param schemeId: The ID of the permission scheme.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

 *  `permissions` Returns all permission grants for each permission scheme.
 *  `user` Returns information about the user who is granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `field` Returns information about the custom field granted the permission.
 *  `all` Returns all expandable information.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get permission scheme grants", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}/permission"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get permission scheme grants Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get permission scheme grants completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get permission scheme grants failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createPermissionGrant(self, schemeId: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a permission grant in a permission scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the permission scheme in which to create a new permission grant.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

 *  `permissions` Returns all permission grants for each permission scheme.
 *  `user` Returns information about the user who is granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `field` Returns information about the custom field granted the permission.
 *  `all` Returns all expandable information.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create permission grant", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}/permission"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create permission grant Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create permission grant completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create permission grant failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deletePermissionSchemeEntity(self, schemeId: int, permissionId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the permission scheme to delete the permission grant from.
        :param permissionId: The ID of the permission grant to delete.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete permission scheme grant", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}/permission/{permissionId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete permission scheme grant Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete permission scheme grant completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete permission scheme grant failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPermissionSchemeGrant(self, schemeId: int, permissionId: int, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a permission grant.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param schemeId: The ID of the permission scheme.
        :param permissionId: The ID of the permission grant.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get permission scheme grant", False)

        try:
            endpoint = f"/rest/api/2/permissionscheme/{schemeId}/permission/{permissionId}"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get permission scheme grant Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get permission scheme grant completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get permission scheme grant failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPlans(self, includeTrashed: bool = None, includeArchived: bool = None, cursor: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of plans.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param includeTrashed: Whether to include trashed plans in the results.
        :param includeArchived: Whether to include archived plans in the results.
        :param cursor: The cursor to start from. If not provided, the first page will be returned.
        :param maxResults: The maximum number of plans to return per page. The maximum value is 50. The default value is 50.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get plans paginated", False)

        try:
            endpoint = "/rest/api/2/plans/plan"
            params = {}
            if includeTrashed is not None:
                params["includeTrashed"] = includeTrashed
            if includeArchived is not None:
                params["includeArchived"] = includeArchived
            if cursor is not None:
                params["cursor"] = cursor
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get plans paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get plans paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get plans paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createPlan(self, useGroupId: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a plan.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param useGroupId: Whether to accept group IDs instead of group names. Group names are deprecated.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create plan", False)

        try:
            endpoint = "/rest/api/2/plans/plan"
            params = {}
            if useGroupId is not None:
                params["useGroupId"] = useGroupId
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPlan(self, planId: int, useGroupId: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a plan.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :param useGroupId: Whether to return group IDs instead of group names. Group names are deprecated.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}"
            params = {}
            if useGroupId is not None:
                params["useGroupId"] = useGroupId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updatePlan(self, planId: int, useGroupId: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates any of the following details of a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).

 *  name
 *  leadAccountId
 *  scheduling
    
     *  estimation with StoryPoints, Days or Hours as possible values
     *  startDate
        
         *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values
         *  dateCustomFieldId
     *  endDate
        
         *  type with DueDate, TargetStartDate, TargetEndDate or DateCustomField as possible values
         *  dateCustomFieldId
     *  inferredDates with None, SprintDates or ReleaseDates as possible values
     *  dependencies with Sequential or Concurrent as possible values
 *  issueSources
    
     *  type with Board, Project or Filter as possible values
     *  value
 *  exclusionRules
    
     *  numberOfDaysToShowCompletedIssues
     *  issueIds
     *  workStatusIds
     *  workStatusCategoryIds
     *  issueTypeIds
     *  releaseIds
 *  crossProjectReleases
    
     *  name
     *  releaseIds
 *  customFields
    
     *  customFieldId
     *  filter
 *  permissions
    
     *  type with View or Edit as possible values
     *  holder
        
         *  type with Group or AccountId as possible values
         *  value

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

*Note that "add" operations do not respect array indexes in target locations. Call the "Get plan" endpoint to find out the order of array elements.*

        :param planId: The ID of the plan.
        :param useGroupId: Whether to accept group IDs instead of group names. Group names are deprecated.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}"
            params = {}
            if useGroupId is not None:
                params["useGroupId"] = useGroupId
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def archivePlan(self, planId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Archives a plan.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Archive plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/archive"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Archive plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Archive plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Archive plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def duplicatePlan(self, planId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Duplicates a plan.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Duplicate plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/duplicate"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Duplicate plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Duplicate plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Duplicate plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getTeams(self, planId: int, cursor: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :param cursor: The cursor to start from. If not provided, the first page will be returned.
        :param maxResults: The maximum number of plan teams to return per page. The maximum value is 50. The default value is 50.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get teams in plan paginated", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team"
            params = {}
            if cursor is not None:
                params["cursor"] = cursor
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get teams in plan paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get teams in plan paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get teams in plan paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addAtlassianTeam(self, planId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds an existing Atlassian team to a plan and configures their plannning settings.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add Atlassian team to plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/atlassian"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add Atlassian team to plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add Atlassian team to plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add Atlassian team to plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeAtlassianTeam(self, planId: int, atlassianTeamId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes an Atlassian team from a plan and deletes their planning settings.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :param atlassianTeamId: The ID of the Atlassian team.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove Atlassian team from plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/atlassian/{atlassianTeamId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove Atlassian team from plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove Atlassian team from plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove Atlassian team from plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAtlassianTeam(self, planId: int, atlassianTeamId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns planning settings for an Atlassian team in a plan.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :param atlassianTeamId: The ID of the Atlassian team.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get Atlassian team in plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/atlassian/{atlassianTeamId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get Atlassian team in plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get Atlassian team in plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get Atlassian team in plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateAtlassianTeam(self, planId: int, atlassianTeamId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).

 *  planningStyle
 *  issueSourceId
 *  sprintLength
 *  capacity

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

*Note that "add" operations do not respect array indexes in target locations. Call the "Get Atlassian team in plan" endpoint to find out the order of array elements.*

        :param planId: The ID of the plan.
        :param atlassianTeamId: The ID of the Atlassian team.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update Atlassian team in plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/atlassian/{atlassianTeamId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update Atlassian team in plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update Atlassian team in plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update Atlassian team in plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createPlanOnlyTeam(self, planId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a plan-only team and configures their planning settings.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create plan-only team", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/planonly"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create plan-only team Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create plan-only team completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create plan-only team failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deletePlanOnlyTeam(self, planId: int, planOnlyTeamId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a plan-only team and their planning settings.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :param planOnlyTeamId: The ID of the plan-only team.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete plan-only team", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/planonly/{planOnlyTeamId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete plan-only team Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete plan-only team completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete plan-only team failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPlanOnlyTeam(self, planId: int, planOnlyTeamId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns planning settings for a plan-only team.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :param planOnlyTeamId: The ID of the plan-only team.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get plan-only team", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/planonly/{planOnlyTeamId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get plan-only team Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get plan-only team completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get plan-only team failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updatePlanOnlyTeam(self, planId: int, planOnlyTeamId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).

 *  name
 *  planningStyle
 *  issueSourceId
 *  sprintLength
 *  capacity
 *  memberAccountIds

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

*Note that "add" operations do not respect array indexes in target locations. Call the "Get plan-only team" endpoint to find out the order of array elements.*

        :param planId: The ID of the plan.
        :param planOnlyTeamId: The ID of the plan-only team.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update plan-only team", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/team/planonly/{planOnlyTeamId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update plan-only team Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update plan-only team completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update plan-only team failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def trashPlan(self, planId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Moves a plan to trash.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param planId: The ID of the plan.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Trash plan", False)

        try:
            endpoint = f"/rest/api/2/plans/plan/{planId}/trash"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Trash plan Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Trash plan completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Trash plan failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPriorities(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the list of all issue priorities.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get priorities", False)

        try:
            endpoint = "/rest/api/2/priority"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get priorities Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get priorities completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get priorities failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createPriority(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue priority.

Deprecation applies to iconUrl param in request body which will be sunset on 16th Mar 2025. For more details refer to [changelog](https://developer.atlassian.com/changelog/#CHANGE-1525).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create priority", False)

        try:
            endpoint = "/rest/api/2/priority"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create priority Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create priority completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create priority failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setDefaultPriority(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets default issue priority.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set default priority", False)

        try:
            endpoint = "/rest/api/2/priority/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set default priority Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set default priority completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set default priority failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def movePriorities(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the order of issue priorities.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Move priorities", False)

        try:
            endpoint = "/rest/api/2/priority/move"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Move priorities Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Move priorities completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Move priorities failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchPriorities(self, startAt: str = None, maxResults: str = None, id: List[Any] = None, projectId: List[Any] = None, priorityName: str = None, onlyDefault: bool = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:

 *  a list of priority IDs. Any invalid priority IDs are ignored.
 *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.
 *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`.
        :param projectId: The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, `projectId=10010&projectId=10111`.
        :param priorityName: The name of priority to search for.
        :param onlyDefault: Whether only the default priority is returned.
        :param expand: Use `schemes` to return the associated priority schemes for each priority. Limited to returning first 15 priority schemes per priority.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search priorities", False)

        try:
            endpoint = "/rest/api/2/priority/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if projectId is not None:
                params["projectId"] = projectId
            if priorityName is not None:
                params["priorityName"] = priorityName
            if onlyDefault is not None:
                params["onlyDefault"] = onlyDefault
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search priorities Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search priorities completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search priorities failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deletePriority(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue priority.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue priority.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete priority", False)

        try:
            endpoint = f"/rest/api/2/priority/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete priority Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete priority completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete priority failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPriority(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an issue priority.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param id: The ID of the issue priority.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get priority", False)

        try:
            endpoint = f"/rest/api/2/priority/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get priority Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get priority completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get priority failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updatePriority(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates an issue priority.

At least one request body parameter must be defined.

Deprecation applies to iconUrl param in request body which will be sunset on 16th Mar 2025. For more details refer to [changelog](https://developer.atlassian.com/changelog/#CHANGE-1525).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue priority.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update priority", False)

        try:
            endpoint = f"/rest/api/2/priority/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update priority Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update priority completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update priority failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPrioritySchemes(self, startAt: str = None, maxResults: str = None, priorityId: List[Any] = None, schemeId: List[Any] = None, schemeName: str = None, onlyDefault: bool = None, orderBy: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of priority schemes.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param priorityId: A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.
        :param schemeId: A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.
        :param schemeName: The name of scheme to search for.
        :param onlyDefault: Whether only the default priority is returned.
        :param orderBy: The ordering to return the priority schemes by.
        :param expand: A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get priority schemes", False)

        try:
            endpoint = "/rest/api/2/priorityscheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if priorityId is not None:
                params["priorityId"] = priorityId
            if schemeId is not None:
                params["schemeId"] = schemeId
            if schemeName is not None:
                params["schemeName"] = schemeName
            if onlyDefault is not None:
                params["onlyDefault"] = onlyDefault
            if orderBy is not None:
                params["orderBy"] = orderBy
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get priority schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get priority schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get priority schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createPriorityScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a new priority scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create priority scheme", False)

        try:
            endpoint = "/rest/api/2/priorityscheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create priority scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create priority scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create priority scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def suggestedPrioritiesForMappings(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Suggested priorities for mappings", False)

        try:
            endpoint = "/rest/api/2/priorityscheme/mappings"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Suggested priorities for mappings Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Suggested priorities for mappings completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Suggested priorities for mappings failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvailablePrioritiesByPriorityScheme(self, startAt: str = None, maxResults: str = None, query: str = None, schemeId: str, exclude: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param query: The string to query priorities on by name.
        :param schemeId: The priority scheme ID.
        :param exclude: A list of priority IDs to exclude from the results.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get available priorities by priority scheme", False)

        try:
            endpoint = "/rest/api/2/priorityscheme/priorities/available"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if query is not None:
                params["query"] = query
            if schemeId is not None:
                params["schemeId"] = schemeId
            if exclude is not None:
                params["exclude"] = exclude

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get available priorities by priority scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get available priorities by priority scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get available priorities by priority scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deletePriorityScheme(self, schemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a priority scheme.

This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The priority scheme ID.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete priority scheme", False)

        try:
            endpoint = f"/rest/api/2/priorityscheme/{schemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete priority scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete priority scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete priority scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updatePriorityScheme(self, schemeId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a priority scheme. This includes its details, the lists of priorities and projects in it

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param schemeId: The ID of the priority scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update priority scheme", False)

        try:
            endpoint = f"/rest/api/2/priorityscheme/{schemeId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update priority scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update priority scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update priority scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getPrioritiesByPriorityScheme(self, schemeId: str, startAt: str = None, maxResults: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of priorities by scheme.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param schemeId: The priority scheme ID.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get priorities by priority scheme", False)

        try:
            endpoint = f"/rest/api/2/priorityscheme/{schemeId}/priorities"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get priorities by priority scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get priorities by priority scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get priorities by priority scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectsByPriorityScheme(self, schemeId: str, startAt: str = None, maxResults: str = None, projectId: List[Any] = None, query: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of projects by scheme.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param schemeId: The priority scheme ID.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param projectId: The project IDs to filter by. For example, `projectId=10000&projectId=10001`.
        :param query: The string to query projects on by name.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get projects by priority scheme", False)

        try:
            endpoint = f"/rest/api/2/priorityscheme/{schemeId}/projects"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if projectId is not None:
                params["projectId"] = projectId
            if query is not None:
                params["query"] = query

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get projects by priority scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get projects by priority scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get projects by priority scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllProjects(self, expand: str = None, recent: int = None, properties: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-2-project-search-get) that supports search and pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:

 *  `description` Returns the project description.
 *  `issueTypes` Returns all issue types associated with the project.
 *  `lead` Returns information about the project lead.
 *  `projectKeys` Returns all project keys associated with the project.
        :param recent: Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.
        :param properties: A list of project properties to return for the project. This parameter accepts a comma-separated list.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all projects", False)

        try:
            endpoint = "/rest/api/2/project"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if recent is not None:
                params["recent"] = recent
            if properties is not None:
                params["properties"] = properties

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createProject(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a project based on a project type template, as shown in the following table:

| Project Type Key | Project Template Key |  
|--|--|  
| `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
| `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  
| `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
The project types are available according to the installed Jira features as follows:

 *  Jira Core, the default, enables `business` projects.
 *  Jira Service Management enables `service_desk` projects.
 *  Jira Software enables `software` projects.

To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create project", False)

        try:
            endpoint = "/rest/api/2/project"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getRecent(self, expand: str = None, properties: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Projects are returned only where the user has one of:

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:

 *  `description` Returns the project description.
 *  `projectKeys` Returns all project keys associated with a project.
 *  `lead` Returns information about the project lead.
 *  `issueTypes` Returns all issue types associated with the project.
 *  `url` Returns the URL associated with the project.
 *  `permissions` Returns the permissions associated with the project.
 *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
 *  `*` Returns the project with all available expand options.
        :param properties: EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get recent projects", False)

        try:
            endpoint = "/rest/api/2/project/recent"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if properties is not None:
                params["properties"] = properties

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get recent projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get recent projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get recent projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchProjects(self, startAt: int = None, maxResults: int = None, orderBy: str = None, id: List[Any] = None, keys: List[Any] = None, query: str = None, typeKey: str = None, categoryId: int = None, action: str = None, expand: str = None, status: List[Any] = None, properties: List[Any] = None, propertyQuery: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of projects visible to the user.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Projects are returned only where the user has one of:

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param orderBy: [Order](#ordering) the results by a field.

 *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-2-projectCategory-get).
 *  `issueCount` Sorts by the total number of issues in each project.
 *  `key` Sorts by project key.
 *  `lastIssueUpdatedTime` Sorts by the last issue update time.
 *  `name` Sorts by project name.
 *  `owner` Sorts by project lead.
 *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
 *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.
        :param id: The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.
        :param keys: The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.
        :param query: Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).
        :param typeKey: Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.
        :param categoryId: The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
        :param action: Filter results by projects for which the user can:

 *  `view` the project, meaning that they have one of the following permissions:
    
     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  `edit` the project, meaning that they have one of the following permissions:
    
     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:

 *  `description` Returns the project description.
 *  `projectKeys` Returns all project keys associated with a project.
 *  `lead` Returns information about the project lead.
 *  `issueTypes` Returns all issue types associated with the project.
 *  `url` Returns the URL associated with the project.
 *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
        :param status: EXPERIMENTAL. Filter results by project status:

 *  `live` Search live projects.
 *  `archived` Search archived projects.
 *  `deleted` Search deleted projects, those in the recycle bin.
        :param properties: EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.
        :param propertyQuery: EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get projects paginated", False)

        try:
            endpoint = "/rest/api/2/project/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if orderBy is not None:
                params["orderBy"] = orderBy
            if id is not None:
                params["id"] = id
            if keys is not None:
                params["keys"] = keys
            if query is not None:
                params["query"] = query
            if typeKey is not None:
                params["typeKey"] = typeKey
            if categoryId is not None:
                params["categoryId"] = categoryId
            if action is not None:
                params["action"] = action
            if expand is not None:
                params["expand"] = expand
            if status is not None:
                params["status"] = status
            if properties is not None:
                params["properties"] = properties
            if propertyQuery is not None:
                params["propertyQuery"] = propertyQuery

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get projects paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get projects paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get projects paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllProjectTypes(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all project types", False)

        try:
            endpoint = "/rest/api/2/project/type"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all project types Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all project types completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all project types failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllAccessibleProjectTypes(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get licensed project types", False)

        try:
            endpoint = "/rest/api/2/project/type/accessible"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get licensed project types Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get licensed project types completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get licensed project types failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectTypeByKey(self, projectTypeKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param projectTypeKey: The key of the project type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project type by key", False)

        try:
            endpoint = f"/rest/api/2/project/type/{projectTypeKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project type by key Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project type by key completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project type by key failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAccessibleProjectTypeByKey(self, projectTypeKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param projectTypeKey: The key of the project type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get accessible project type by key", False)

        try:
            endpoint = f"/rest/api/2/project/type/{projectTypeKey}/accessible"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get accessible project type by key Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get accessible project type by key completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get accessible project type by key failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteProject(self, projectIdOrKey: str, enableUndo: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a project.

You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param enableUndo: Whether this project is placed in the Jira recycle bin where it will be available for restoration.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}"
            params = {}
            if enableUndo is not None:
                params["enableUndo"] = enableUndo

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProject(self, projectIdOrKey: str, expand: str = None, properties: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:

 *  `description` The project description.
 *  `issueTypes` The issue types associated with the project.
 *  `lead` The project lead.
 *  `projectKeys` All project keys associated with the project.
 *  `issueTypeHierarchy` The project issue type hierarchy.
        :param properties: A list of project properties to return for the project. This parameter accepts a comma-separated list.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if properties is not None:
                params["properties"] = properties

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateProject(self, projectIdOrKey: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.

All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:

 *  `description` The project description.
 *  `issueTypes` The issue types associated with the project.
 *  `lead` The project lead.
 *  `projectKeys` All project keys associated with the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def archiveProject(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Archive project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/archive"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Archive project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Archive project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Archive project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateProjectAvatar(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the avatar displayed for a project.

Use [Load project avatar](#api-rest-api-2-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).

        :param projectIdOrKey: The ID or (case-sensitive) key of the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set project avatar", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/avatar"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set project avatar Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set project avatar completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set project avatar failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteProjectAvatar(self, projectIdOrKey: str, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a custom avatar from a project. Note that system avatars cannot be deleted.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).

        :param projectIdOrKey: The project ID or (case-sensitive) key.
        :param id: The ID of the avatar.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete project avatar", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/avatar/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete project avatar Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete project avatar completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete project avatar failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createProjectAvatar(self, projectIdOrKey: str, x: int = None, y: int = None, size: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Loads an avatar for a project.

Specify the avatar's local file location in the body of the request. Also, include the following headers:

 *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
 *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

For example:  
`curl --request POST `

`--user email@example.com:<api_token> `

`--header 'X-Atlassian-Token: no-check' `

`--header 'Content-Type: image/< image_type>' `

`--data-binary "<@/path/to/file/with/your/avatar>" `

`--url 'https://your-domain.atlassian.net/rest/api/2/project/{projectIdOrKey}/avatar2'`

The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

After creating the avatar use [Set project avatar](#api-rest-api-2-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.

**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).

        :param projectIdOrKey: The ID or (case-sensitive) key of the project.
        :param x: The X coordinate of the top-left corner of the crop region.
        :param y: The Y coordinate of the top-left corner of the crop region.
        :param size: The length of each side of the crop region.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Load project avatar", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/avatar2"
            params = {}
            if x is not None:
                params["x"] = x
            if y is not None:
                params["y"] = y
            if size is not None:
                params["size"] = size
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Load project avatar Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Load project avatar completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Load project avatar failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllProjectAvatars(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all project avatars, grouped by system and custom avatars.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The ID or (case-sensitive) key of the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all project avatars", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/avatars"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all project avatars Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all project avatars completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all project avatars failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeDefaultProjectClassification(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Remove the default data classification level for a project.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case-sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove the default data classification level from a project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/classification-level/default"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove the default data classification level from a project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove the default data classification level from a project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove the default data classification level from a project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDefaultProjectClassification(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default data classification for a project.

**[Permissions](#permissions) required:**

 *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case-sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get the default data classification level of a project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/classification-level/default"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get the default data classification level of a project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get the default data classification level of a project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get the default data classification level of a project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateDefaultProjectClassification(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the default data classification level for a project.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
 *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case-sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update the default data classification level of a project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/classification-level/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update the default data classification level of a project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update the default data classification level of a project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update the default data classification level of a project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectComponentsPaginated(self, projectIdOrKey: str, startAt: int = None, maxResults: int = None, orderBy: str = None, componentSource: str = None, query: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-2-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.

If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `description` Sorts by the component description.
 *  `issueCount` Sorts by the count of issues associated with the component.
 *  `lead` Sorts by the user key of the component's project lead.
 *  `name` Sorts by component name.
        :param componentSource: The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.
        :param query: Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project components paginated", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/component"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if orderBy is not None:
                params["orderBy"] = orderBy
            if componentSource is not None:
                params["componentSource"] = componentSource
            if query is not None:
                params["query"] = query

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project components paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project components paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project components paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectComponents(self, projectIdOrKey: str, componentSource: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all components in a project. See the [Get project components paginated](#api-rest-api-2-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.

If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param componentSource: The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project components", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/components"
            params = {}
            if componentSource is not None:
                params["componentSource"] = componentSource

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project components Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project components completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project components failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteProjectAsynchronously(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a project asynchronously.

This operation is:

 *  transactional, that is, if part of the delete fails the project is not deleted.
 *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete project asynchronously", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/delete"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete project asynchronously Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete project asynchronously completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete project asynchronously failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFeaturesForProject(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the list of features for a project.

        :param projectIdOrKey: The ID or (case-sensitive) key of the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project features", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/features"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project features Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project features completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project features failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def toggleFeatureForProject(self, projectIdOrKey: str, featureKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the state of a project feature.

        :param projectIdOrKey: The ID or (case-sensitive) key of the project.
        :param featureKey: The key of the feature.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set project feature state", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/features/{featureKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set project feature state Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set project feature state completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set project feature state failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectPropertyKeys(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project property keys", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteProjectProperty(self, projectIdOrKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param propertyKey: The project property key. Use [Get project property keys](#api-rest-api-2-project-projectIdOrKey-properties-get) to get a list of all project property keys.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete project property", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete project property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete project property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete project property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectProperty(self, projectIdOrKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param propertyKey: The project property key. Use [Get project property keys](#api-rest-api-2-project-projectIdOrKey-properties-get) to get a list of all project property keys.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project property", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setProjectProperty(self, projectIdOrKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param propertyKey: The key of the project property. The maximum length is 255 characters.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set project property", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set project property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set project property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set project property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def restore(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Restores a project that has been archived or placed in the Jira recycle bin.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Restore deleted or archived project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/restore"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Restore deleted or archived project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Restore deleted or archived project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Restore deleted or archived project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectRoles(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.

Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-2-role-get) for more information.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project roles for project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/role"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project roles for project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project roles for project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project roles for project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteActor(self, projectIdOrKey: str, id: int, user: str = None, group: str = None, groupId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes actors from a project role for the project.

To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-2-role-id-actors-delete).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :param user: The user account ID of the user to remove from the project role.
        :param group: The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
        :param groupId: The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete actors from project role", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/role/{id}"
            params = {}
            if user is not None:
                params["user"] = user
            if group is not None:
                params["group"] = group
            if groupId is not None:
                params["groupId"] = groupId

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete actors from project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete actors from project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete actors from project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectRole(self, projectIdOrKey: str, id: int, excludeInactiveUsers: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.

To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-2-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :param excludeInactiveUsers: Exclude inactive users.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project role for project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/role/{id}"
            params = {}
            if excludeInactiveUsers is not None:
                params["excludeInactiveUsers"] = excludeInactiveUsers

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project role for project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project role for project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project role for project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addActorUsers(self, projectIdOrKey: str, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds actors to a project role for the project.

To replace all actors for the project, use [Set actors for project role](#api-rest-api-2-project-projectIdOrKey-role-id-put).

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add actors to project role", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/role/{id}"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add actors to project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add actors to project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add actors to project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setActors(self, projectIdOrKey: str, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the actors for a project role for a project, replacing all existing actors.

To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-2-project-projectIdOrKey-role-id-post).

**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set actors for project role", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/role/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set actors for project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set actors for project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set actors for project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectRoleDetails(self, projectIdOrKey: str, currentMember: bool = None, excludeConnectAddons: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param currentMember: Whether the roles should be filtered to include only those the user is assigned to.
        :param excludeConnectAddons: excludeConnectAddons
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project role details", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/roledetails"
            params = {}
            if currentMember is not None:
                params["currentMember"] = currentMember
            if excludeConnectAddons is not None:
                params["excludeConnectAddons"] = excludeConnectAddons

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project role details Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project role details completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project role details failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllStatuses(self, projectIdOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all statuses for project", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/statuses"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all statuses for project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all statuses for project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all statuses for project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectVersionsPaginated(self, projectIdOrKey: str, startAt: int = None, maxResults: int = None, orderBy: str = None, query: str = None, status: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-2-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `description` Sorts by version description.
 *  `name` Sorts by version name.
 *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
 *  `sequence` Sorts by the order of appearance in the user interface.
 *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.
        :param query: Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).
        :param status: A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `issuesstatus` Returns the number of issues in each status category for each version.
 *  `operations` Returns actions that can be performed on the specified version.
 *  `driver` Returns the Atlassian account ID of the version driver.
 *  `approvers` Returns a list containing the approvers for this version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project versions paginated", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/version"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if orderBy is not None:
                params["orderBy"] = orderBy
            if query is not None:
                params["query"] = query
            if status is not None:
                params["status"] = status
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project versions paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project versions paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project versions paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectVersions(self, projectIdOrKey: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-2-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectIdOrKey: The project ID or project key (case sensitive).
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project versions", False)

        try:
            endpoint = f"/rest/api/2/project/{projectIdOrKey}/versions"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project versions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project versions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project versions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectEmail(self, projectId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectId: The project ID.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project's sender email", False)

        try:
            endpoint = f"/rest/api/2/project/{projectId}/email"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project's sender email Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project's sender email completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project's sender email failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateProjectEmail(self, projectId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).

If `emailAddress` is an empty string, the default email address is restored.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)

        :param projectId: The project ID.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set project's sender email", False)

        try:
            endpoint = f"/rest/api/2/project/{projectId}/email"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set project's sender email Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set project's sender email completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set project's sender email failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getHierarchy(self, projectId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Get the issue type hierarchy for a next-gen project.

The issue type hierarchy for a project consists of:

 *  *Epic* at level 1 (optional).
 *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
 *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.

        :param projectId: The ID of the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project issue type hierarchy", False)

        try:
            endpoint = f"/rest/api/2/project/{projectId}/hierarchy"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project issue type hierarchy Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project issue type hierarchy completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project issue type hierarchy failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectIssueSecurityScheme(self, projectKeyOrId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).

        :param projectKeyOrId: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project issue security scheme", False)

        try:
            endpoint = f"/rest/api/2/project/{projectKeyOrId}/issuesecuritylevelscheme"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project issue security scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project issue security scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project issue security scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getNotificationSchemeForProject(self, projectKeyOrId: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).

        :param projectKeyOrId: The project ID or project key (case sensitive).
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `all` Returns all expandable information
 *  `field` Returns information about any custom fields assigned to receive an event
 *  `group` Returns information about any groups assigned to receive an event
 *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
 *  `projectRole` Returns information about any project roles assigned to receive an event
 *  `user` Returns information about any users assigned to receive an event
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project notification scheme", False)

        try:
            endpoint = f"/rest/api/2/project/{projectKeyOrId}/notificationscheme"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project notification scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project notification scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project notification scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAssignedPermissionScheme(self, projectKeyOrId: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).

        :param projectKeyOrId: The project ID or project key (case sensitive).
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get assigned permission scheme", False)

        try:
            endpoint = f"/rest/api/2/project/{projectKeyOrId}/permissionscheme"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get assigned permission scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get assigned permission scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get assigned permission scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignPermissionScheme(self, projectKeyOrId: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)

        :param projectKeyOrId: The project ID or project key (case sensitive).
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:

 *  `all` Returns all expandable information.
 *  `field` Returns information about the custom field granted the permission.
 *  `group` Returns information about the group that is granted the permission.
 *  `permissions` Returns all permission grants for each permission scheme.
 *  `projectRole` Returns information about the project role granted the permission.
 *  `user` Returns information about the user who is granted the permission.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign permission scheme", False)

        try:
            endpoint = f"/rest/api/2/project/{projectKeyOrId}/permissionscheme"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign permission scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign permission scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign permission scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getSecurityLevelsForProject(self, projectKeyOrId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.

        :param projectKeyOrId: The project ID or project key (case sensitive).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project issue security levels", False)

        try:
            endpoint = f"/rest/api/2/project/{projectKeyOrId}/securitylevel"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project issue security levels Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project issue security levels completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project issue security levels failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllProjectCategories(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all project categories.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all project categories", False)

        try:
            endpoint = "/rest/api/2/projectCategory"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all project categories Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all project categories completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all project categories failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createProjectCategory(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a project category.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create project category", False)

        try:
            endpoint = "/rest/api/2/projectCategory"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create project category Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create project category completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create project category failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeProjectCategory(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a project category.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: ID of the project category to delete.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete project category", False)

        try:
            endpoint = f"/rest/api/2/projectCategory/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete project category Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete project category completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete project category failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectCategoryById(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a project category.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param id: The ID of the project category.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project category by ID", False)

        try:
            endpoint = f"/rest/api/2/projectCategory/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project category by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project category by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project category by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateProjectCategory(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a project category.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: id
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update project category", False)

        try:
            endpoint = f"/rest/api/2/projectCategory/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update project category Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update project category completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update project category failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def validateProjectKey(self, key: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Validates a project key by confirming the key is a valid string and not in use.

**[Permissions](#permissions) required:** None.

        :param key: The project key.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Validate project key", False)

        try:
            endpoint = "/rest/api/2/projectvalidate/key"
            params = {}
            if key is not None:
                params["key"] = key

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Validate project key Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Validate project key completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Validate project key failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getValidProjectKey(self, key: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.

**[Permissions](#permissions) required:** None.

        :param key: The project key.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get valid project key", False)

        try:
            endpoint = "/rest/api/2/projectvalidate/validProjectKey"
            params = {}
            if key is not None:
                params["key"] = key

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get valid project key Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get valid project key completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get valid project key failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getValidProjectName(self, name: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.

**[Permissions](#permissions) required:** None.

        :param name: The project name.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get valid project name", False)

        try:
            endpoint = "/rest/api/2/projectvalidate/validProjectName"
            params = {}
            if name is not None:
                params["name"] = name

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get valid project name Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get valid project name completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get valid project name failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getResolutions(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of all issue resolution values.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get resolutions", False)

        try:
            endpoint = "/rest/api/2/resolution"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get resolutions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get resolutions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get resolutions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createResolution(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates an issue resolution.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create resolution", False)

        try:
            endpoint = "/rest/api/2/resolution"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create resolution Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create resolution completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create resolution failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setDefaultResolution(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets default issue resolution.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set default resolution", False)

        try:
            endpoint = "/rest/api/2/resolution/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set default resolution Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set default resolution completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set default resolution failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def moveResolutions(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Changes the order of issue resolutions.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Move resolutions", False)

        try:
            endpoint = "/rest/api/2/resolution/move"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Move resolutions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Move resolutions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Move resolutions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchResolutions(self, startAt: str = None, maxResults: str = None, id: List[Any] = None, onlyDefault: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:

 *  a list of resolutions IDs.
 *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of resolutions IDs to be filtered out
        :param onlyDefault: When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search resolutions", False)

        try:
            endpoint = "/rest/api/2/resolution/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if onlyDefault is not None:
                params["onlyDefault"] = onlyDefault

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search resolutions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search resolutions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search resolutions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteResolution(self, id: str, replaceWith: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an issue resolution.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain subsequent updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue resolution.
        :param replaceWith: The ID of the issue resolution that will replace the currently selected resolution.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete resolution", False)

        try:
            endpoint = f"/rest/api/2/resolution/{id}"
            params = {}
            if replaceWith is not None:
                params["replaceWith"] = replaceWith

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete resolution Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete resolution completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete resolution failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getResolution(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns an issue resolution value.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param id: The ID of the issue resolution value.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get resolution", False)

        try:
            endpoint = f"/rest/api/2/resolution/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get resolution Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get resolution completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get resolution failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateResolution(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates an issue resolution.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the issue resolution.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update resolution", False)

        try:
            endpoint = f"/rest/api/2/resolution/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update resolution Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update resolution completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update resolution failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllProjectRoles(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets a list of all project roles, complete with project role details and default actors.

### About project roles ###

[Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).

Project roles are used in [permission schemes](#api-rest-api-2-permissionscheme-get), [email notification schemes](#api-rest-api-2-notificationscheme-get), [issue security levels](#api-rest-api-2-issuesecurityschemes-get), [comment visibility](#api-rest-api-2-comment-list-post), and workflow conditions.

#### Members and actors ####

In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.

Actors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:

 *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
 *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all project roles", False)

        try:
            endpoint = "/rest/api/2/role"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all project roles Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all project roles completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all project roles failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createProjectRole(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a new project role with no [default actors](#api-rest-api-2-resolution-get). You can use the [Add default actors to project role](#api-rest-api-2-role-id-actors-post) operation to add default actors to the project role after creating it.

*Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create project role", False)

        try:
            endpoint = "/rest/api/2/role"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteProjectRole(self, id: int, swap: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role to delete. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :param swap: The ID of the project role that will replace the one being deleted. The swap will attempt to swap the role in schemes (notifications, permissions, issue security), workflows, worklogs and comments.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete project role", False)

        try:
            endpoint = f"/rest/api/2/role/{id}"
            params = {}
            if swap is not None:
                params["swap"] = swap

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectRoleById(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project role by ID", False)

        try:
            endpoint = f"/rest/api/2/role/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project role by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project role by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project role by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def partialUpdateProjectRole(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates either the project role's name or its description.

You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Partial update project role", False)

        try:
            endpoint = f"/rest/api/2/role/{id}"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Partial update project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Partial update project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Partial update project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def fullyUpdateProjectRole(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the project role's name and description. You must include both a name and a description in the request.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Fully update project role", False)

        try:
            endpoint = f"/rest/api/2/role/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Fully update project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Fully update project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Fully update project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteProjectRoleActorsFromRole(self, id: int, user: str = None, groupId: str = None, group: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the [default actors](#api-rest-api-2-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.

Changing a project role's default actors does not affect project role members for projects already created.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :param user: The user account ID of the user to remove as a default actor.
        :param groupId: The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.
        :param group: The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete default actors from project role", False)

        try:
            endpoint = f"/rest/api/2/role/{id}/actors"
            params = {}
            if user is not None:
                params["user"] = user
            if groupId is not None:
                params["groupId"] = groupId
            if group is not None:
                params["group"] = group

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete default actors from project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete default actors from project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete default actors from project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectRoleActorsForRole(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the [default actors](#api-rest-api-2-resolution-get) for the project role.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get default actors for project role", False)

        try:
            endpoint = f"/rest/api/2/role/{id}/actors"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get default actors for project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get default actors for project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get default actors for project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addProjectRoleActorsToRole(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds [default actors](#api-rest-api-2-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.

Changing a project role's default actors does not affect project role members for projects already created.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add default actors to project role", False)

        try:
            endpoint = f"/rest/api/2/role/{id}/actors"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add default actors to project role Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add default actors to project role completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add default actors to project role failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getScreens(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, queryString: str = None, scope: List[Any] = None, orderBy: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param queryString: String used to perform a case-insensitive partial match with screen name.
        :param scope: The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `id` Sorts by screen ID.
 *  `name` Sorts by screen name.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get screens", False)

        try:
            endpoint = "/rest/api/2/screens"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if queryString is not None:
                params["queryString"] = queryString
            if scope is not None:
                params["scope"] = scope
            if orderBy is not None:
                params["orderBy"] = orderBy

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get screens Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get screens completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get screens failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createScreen(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a screen with a default field tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create screen", False)

        try:
            endpoint = "/rest/api/2/screens"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create screen Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create screen completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create screen failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addFieldToDefaultScreen(self, fieldId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a field to the default tab of the default screen.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param fieldId: The ID of the field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add field to default screen", False)

        try:
            endpoint = f"/rest/api/2/screens/addToDefault/{fieldId}"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add field to default screen Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add field to default screen completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add field to default screen failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getBulkScreenTabs(self, screenId: List[Any] = None, tabId: List[Any] = None, startAt: int = None, maxResult: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the list of tabs for a bulk of screens.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.
        :param tabId: The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResult: The maximum number of items to return per page. The maximum number is 100,
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get bulk screen tabs", False)

        try:
            endpoint = "/rest/api/2/screens/tabs"
            params = {}
            if screenId is not None:
                params["screenId"] = screenId
            if tabId is not None:
                params["tabId"] = tabId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResult is not None:
                params["maxResult"] = maxResult

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get bulk screen tabs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get bulk screen tabs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get bulk screen tabs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteScreen(self, screenId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.

Only screens used in classic projects can be deleted.

        :param screenId: The ID of the screen.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete screen", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete screen Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete screen completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete screen failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateScreen(self, screenId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a screen. Only screens used in classic projects can be updated.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update screen", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update screen Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update screen completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update screen failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvailableScreenFields(self, screenId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the fields that can be added to a tab on a screen.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get available screen fields", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/availableFields"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get available screen fields Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get available screen fields completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get available screen fields failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllScreenTabs(self, screenId: int, projectKey: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the list of tabs for a screen.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.

        :param screenId: The ID of the screen.
        :param projectKey: The key of the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all screen tabs", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs"
            params = {}
            if projectKey is not None:
                params["projectKey"] = projectKey

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all screen tabs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all screen tabs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all screen tabs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addScreenTab(self, screenId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a tab for a screen.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create screen tab", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create screen tab Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create screen tab completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create screen tab failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteScreenTab(self, screenId: int, tabId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete screen tab", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete screen tab Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete screen tab completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete screen tab failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def renameScreenTab(self, screenId: int, tabId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the name of a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update screen tab", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update screen tab Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update screen tab completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update screen tab failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllScreenTabFields(self, screenId: int, tabId: int, projectKey: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all fields for a screen tab.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :param projectKey: The key of the project.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all screen tab fields", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}/fields"
            params = {}
            if projectKey is not None:
                params["projectKey"] = projectKey

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all screen tab fields Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all screen tab fields completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all screen tab fields failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def addScreenTabField(self, screenId: int, tabId: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a field to a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Add screen tab field", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}/fields"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Add screen tab field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Add screen tab field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Add screen tab field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeScreenTabField(self, screenId: int, tabId: int, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes a field from a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :param id: The ID of the field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove screen tab field", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove screen tab field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove screen tab field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove screen tab field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def moveScreenTabField(self, screenId: int, tabId: int, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Moves a screen tab field.

If `after` and `position` are provided in the request, `position` is ignored.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :param id: The ID of the field.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Move screen tab field", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}/fields/{id}/move"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Move screen tab field Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Move screen tab field completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Move screen tab field failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def moveScreenTab(self, screenId: int, tabId: int, pos: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Moves a screen tab.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenId: The ID of the screen.
        :param tabId: The ID of the screen tab.
        :param pos: The position of tab. The base index is 0.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Move screen tab", False)

        try:
            endpoint = f"/rest/api/2/screens/{screenId}/tabs/{tabId}/move/{pos}"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Move screen tab Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Move screen tab completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Move screen tab failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getScreenSchemes(self, startAt: int = None, maxResults: int = None, id: List[Any] = None, expand: str = None, queryString: str = None, orderBy: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of screen schemes.

Only screen schemes used in classic projects are returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param id: The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
        :param expand: Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.
        :param queryString: String used to perform a case-insensitive partial match with screen scheme name.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `id` Sorts by screen scheme ID.
 *  `name` Sorts by screen scheme name.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get screen schemes", False)

        try:
            endpoint = "/rest/api/2/screenscheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if id is not None:
                params["id"] = id
            if expand is not None:
                params["expand"] = expand
            if queryString is not None:
                params["queryString"] = queryString
            if orderBy is not None:
                params["orderBy"] = orderBy

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get screen schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get screen schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get screen schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createScreenScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a screen scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create screen scheme", False)

        try:
            endpoint = "/rest/api/2/screenscheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteScreenScheme(self, screenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.

Only screens schemes used in classic projects can be deleted.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenSchemeId: The ID of the screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete screen scheme", False)

        try:
            endpoint = f"/rest/api/2/screenscheme/{screenSchemeId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateScreenScheme(self, screenSchemeId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a screen scheme. Only screen schemes used in classic projects can be updated.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param screenSchemeId: The ID of the screen scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update screen scheme", False)

        try:
            endpoint = f"/rest/api/2/screenscheme/{screenSchemeId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update screen scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update screen scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update screen scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchForIssuesUsingJql(self, jql: str = None, startAt: int = None, maxResults: int = None, validateQuery: str = None, fields: List[Any] = None, expand: str = None, properties: List[Any] = None, fieldsByKeys: bool = None, failFast: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).

If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-2-search-post) version of this resource.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param jql: The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:

 *  If no JQL expression is provided, all issues are returned.
 *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
 *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.
        :param validateQuery: Determines how to validate the JQL query and treat the validation results. Supported values are:

 *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
 *  `warn` Returns all errors as warnings.
 *  `none` No validation is performed.
 *  `true` *Deprecated* A legacy synonym for `strict`.
 *  `false` *Deprecated* A legacy synonym for `warn`.

Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
        :param fields: A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:

 *  `*all` Returns all fields.
 *  `*navigable` Returns navigable fields.
 *  Any issue field, prefixed with a minus to exclude.

Examples:

 *  `summary,comment` Returns only the summary and comments fields.
 *  `-description` Returns all navigable (default) fields except description.
 *  `*all,-comment` Returns all fields except comments.

This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.

Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
        :param expand: Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `renderedFields` Returns field values rendered in HTML format.
 *  `names` Returns the display name of each field.
 *  `schema` Returns the schema describing a field type.
 *  `transitions` Returns all possible transitions for the issue.
 *  `operations` Returns all possible operations for the issue.
 *  `editmeta` Returns information about how each field can be edited.
 *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
 *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
        :param properties: A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.
        :param fieldsByKeys: Reference fields by their key (rather than ID).
        :param failFast: Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search for issues using JQL (GET)", False)

        try:
            endpoint = "/rest/api/2/search"
            params = {}
            if jql is not None:
                params["jql"] = jql
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if validateQuery is not None:
                params["validateQuery"] = validateQuery
            if fields is not None:
                params["fields"] = fields
            if expand is not None:
                params["expand"] = expand
            if properties is not None:
                params["properties"] = properties
            if fieldsByKeys is not None:
                params["fieldsByKeys"] = fieldsByKeys
            if failFast is not None:
                params["failFast"] = failFast

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search for issues using JQL (GET) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search for issues using JQL (GET) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search for issues using JQL (GET) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchForIssuesUsingJqlPost(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).

There is a [GET](#api-rest-api-2-search-get) version of this resource that can be used for smaller JQL query expressions.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search for issues using JQL (POST)", False)

        try:
            endpoint = "/rest/api/2/search"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search for issues using JQL (POST) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search for issues using JQL (POST) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search for issues using JQL (POST) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def countIssues(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Provide an estimated count of the issues that match the [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned output. This endpoint requires JQL to be bounded.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Count issues using JQL", False)

        try:
            endpoint = "/rest/api/2/search/approximate-count"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Count issues using JQL Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Count issues using JQL completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Count issues using JQL failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchForIssuesIds(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).

Use the [Search](#api-rest-api-2-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search issue IDs using JQL", False)

        try:
            endpoint = "/rest/api/2/search/id"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search issue IDs using JQL Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search issue IDs using JQL completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search issue IDs using JQL failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchAndReconsileIssuesUsingJql(self, jql: str = None, nextPageToken: str = None, maxResults: int = None, fields: List[Any] = None, expand: str = None, properties: List[Any] = None, fieldsByKeys: bool = None, failFast: bool = None, reconcileIssues: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.

If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-2-search-post) version of this resource.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.

        :param jql: A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. For performance reasons, this parameter requires a bounded query. A bounded query is a query with a search restriction.

 *  Example of an unbounded query: `order by key desc`.
 *  Example of a bounded query: `assignee = currentUser() order by key`.

Additionally, `orderBy` clause can contain a maximum of 7 fields.
        :param nextPageToken: The token for a page to fetch that is not the first page. The first page has a `nextPageToken` of `null`. Use the `nextPageToken` to fetch the next page of issues.

Note: The `nextPageToken` field is **not included** in the response for the last page, indicating there is no next page.
        :param maxResults: The maximum number of items to return per page. To manage page size, API may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. It returns max 5000 issues.
        :param fields: A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:

 *  `*all` Returns all fields.
 *  `*navigable` Returns navigable fields.
 *  `id` Returns only issue IDs.
 *  Any issue field, prefixed with a minus to exclude.

The default is `id`.

Examples:

 *  `summary,comment` Returns only the summary and comments fields only.
 *  `-description` Returns all navigable (default) fields except description.
 *  `*all,-comment` Returns all fields except comments.

Multiple `fields` parameters can be included in a request.

Note: By default, this resource returns IDs only. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
        :param expand: Use [expand](#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a comma-delimited string of values. The expand options are:

 *  `renderedFields` Returns field values rendered in HTML format.
 *  `names` Returns the display name of each field.
 *  `schema` Returns the schema describing a field type.
 *  `transitions` Returns all possible transitions for the issue.
 *  `operations` Returns all possible operations for the issue.
 *  `editmeta` Returns information about how each field can be edited.
 *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
 *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.

Examples: `"names,changelog"` Returns the display name of each field as well as a list of recent updates to an issue.
        :param properties: A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
        :param fieldsByKeys: Reference fields by their key (rather than ID). The default is `false`.
        :param failFast: Fail this request early if we can't retrieve all field data.
        :param reconcileIssues: Strong consistency issue ids to be reconciled with search results. Accepts max 50 ids. All issues must exist.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search for issues using JQL enhanced search (GET)", False)

        try:
            endpoint = "/rest/api/2/search/jql"
            params = {}
            if jql is not None:
                params["jql"] = jql
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults
            if fields is not None:
                params["fields"] = fields
            if expand is not None:
                params["expand"] = expand
            if properties is not None:
                params["properties"] = properties
            if fieldsByKeys is not None:
                params["fieldsByKeys"] = fieldsByKeys
            if failFast is not None:
                params["failFast"] = failFast
            if reconcileIssues is not None:
                params["reconcileIssues"] = reconcileIssues

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search for issues using JQL enhanced search (GET) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search for issues using JQL enhanced search (GET) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search for issues using JQL enhanced search (GET) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchAndReconsileIssuesUsingJqlPost(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.

**[Permissions](#permissions) required:** Issues are included in the response where the user has:

 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
 *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search for issues using JQL enhanced search (POST)", False)

        try:
            endpoint = "/rest/api/2/search/jql"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search for issues using JQL enhanced search (POST) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search for issues using JQL enhanced search (POST) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search for issues using JQL enhanced search (POST) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueSecurityLevel(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns details of an issue security level.

Use [Get issue security scheme](#api-rest-api-2-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param id: The ID of the issue security level.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue security level", False)

        try:
            endpoint = f"/rest/api/2/securitylevel/{id}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue security level Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue security level completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue security level failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getServerInfo(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns information about the Jira instance.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get Jira instance info", False)

        try:
            endpoint = "/rest/api/2/serverInfo"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get Jira instance info Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get Jira instance info completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get Jira instance info failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIssueNavigatorDefaultColumns(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default issue navigator columns.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue navigator default columns", False)

        try:
            endpoint = "/rest/api/2/settings/columns"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue navigator default columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue navigator default columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue navigator default columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setIssueNavigatorDefaultColumns(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the default issue navigator columns.

The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:

`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/2/settings/columns`

If no column details are sent, then all default columns are removed.

A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-2-field-get).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set issue navigator default columns", False)

        try:
            endpoint = "/rest/api/2/settings/columns"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set issue navigator default columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set issue navigator default columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set issue navigator default columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getStatuses(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of all statuses associated with active workflows.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all statuses", False)

        try:
            endpoint = "/rest/api/2/status"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all statuses Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all statuses completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all statuses failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getStatus(self, idOrName: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a status. The status must be associated with an active workflow to be returned.

If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.

This operation can be accessed anonymously.

[Permissions](#permissions) required: None.

        :param idOrName: The ID or name of the status.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get status", False)

        try:
            endpoint = f"/rest/api/2/status/{idOrName}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get status Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get status completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get status failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getStatusCategories(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of all status categories.

**[Permissions](#permissions) required:** Permission to access Jira.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all status categories", False)

        try:
            endpoint = "/rest/api/2/statuscategory"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all status categories Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all status categories completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all status categories failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getStatusCategory(self, idOrKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-2-status-idOrName-get).

**[Permissions](#permissions) required:** Permission to access Jira.

        :param idOrKey: The ID or key of the status category.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get status category", False)

        try:
            endpoint = f"/rest/api/2/statuscategory/{idOrKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get status category Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get status category completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get status category failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteStatusesById(self, id: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes statuses by ID.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)

        :param id: The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.

Min items `1`, Max items `50`
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk delete Statuses", False)

        try:
            endpoint = "/rest/api/2/statuses"
            params = {}
            if id is not None:
                params["id"] = id

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk delete Statuses Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk delete Statuses completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk delete Statuses failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getStatusesById(self, expand: str = None, id: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of the statuses specified by one or more status IDs.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)

        :param expand: Deprecated. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2298) for details.

Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `usages` Returns the project and issue types that use the status in their workflow.
 *  `workflowUsages` Returns the workflows that use the status.
        :param id: The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.

Min items `1`, Max items `50`
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk get statuses", False)

        try:
            endpoint = "/rest/api/2/statuses"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if id is not None:
                params["id"] = id

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk get statuses Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk get statuses completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk get statuses failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createStatuses(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates statuses for a global or project scope.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk create statuses", False)

        try:
            endpoint = "/rest/api/2/statuses"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk create statuses Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk create statuses completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk create statuses failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateStatuses(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates statuses by ID.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk update statuses", False)

        try:
            endpoint = "/rest/api/2/statuses"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk update statuses Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk update statuses completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk update statuses failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def search(self, expand: str = None, projectId: str = None, startAt: int = None, maxResults: int = None, searchString: str = None, statusCategory: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.

**[Permissions](#permissions) required:**

 *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
 *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)

        :param expand: Deprecated. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2298) for details.

Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `usages` Returns the project and issue types that use the status in their workflow.
 *  `workflowUsages` Returns the workflows that use the status.
        :param projectId: The project the status is part of or null for global statuses.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param searchString: Term to match status names against or null to search for all statuses in the search scope.
        :param statusCategory: Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search statuses paginated", False)

        try:
            endpoint = "/rest/api/2/statuses/search"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if projectId is not None:
                params["projectId"] = projectId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if searchString is not None:
                params["searchString"] = searchString
            if statusCategory is not None:
                params["statusCategory"] = statusCategory

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search statuses paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search statuses paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search statuses paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectIssueTypeUsagesForStatus(self, statusId: str, projectId: str, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of issue types in a project using a given status.

        :param statusId: The statusId to fetch issue type usages for
        :param projectId: The projectId to fetch issue type usages for
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue type usages by status and project", False)

        try:
            endpoint = f"/rest/api/2/statuses/{statusId}/project/{projectId}/issueTypeUsages"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue type usages by status and project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue type usages by status and project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue type usages by status and project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectUsagesForStatus(self, statusId: str, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of projects using a given status.

        :param statusId: The statusId to fetch project usages for
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get project usages by status", False)

        try:
            endpoint = f"/rest/api/2/statuses/{statusId}/projectUsages"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get project usages by status Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get project usages by status completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get project usages by status failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowUsagesForStatus(self, statusId: str, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of workflows using a given status.

        :param statusId: The statusId to fetch workflow usages for
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow usages by status", False)

        try:
            endpoint = f"/rest/api/2/statuses/{statusId}/workflowUsages"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow usages by status Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow usages by status completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow usages by status failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getTask(self, taskId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the status of a [long-running asynchronous task](#async).

When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.

**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.

 *  `read:jira-work`

**[Permissions](#permissions) required:** either of:

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  Creator of the task.

        :param taskId: The ID of the task.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get task", False)

        try:
            endpoint = f"/rest/api/2/task/{taskId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get task Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get task completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get task failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def cancelTask(self, taskId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Cancels a task.

**[Permissions](#permissions) required:** either of:

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
 *  Creator of the task.

        :param taskId: The ID of the task.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Cancel task", False)

        try:
            endpoint = f"/rest/api/2/task/{taskId}/cancel"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Cancel task Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Cancel task completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Cancel task failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUiModifications(self, startAt: int = None, maxResults: int = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets UI modifications. UI modifications can only be retrieved by Forge apps.

**[Permissions](#permissions) required:** None.

The new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param expand: Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `data` Returns UI modification data.
 *  `contexts` Returns UI modification contexts.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get UI modifications", False)

        try:
            endpoint = "/rest/api/2/uiModifications"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get UI modifications Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get UI modifications completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get UI modifications failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createUiModification(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a UI modification. UI modification can only be created by Forge apps.

Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.

**[Permissions](#permissions) required:**

 *  *None* if the UI modification is created without contexts.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create UI modification", False)

        try:
            endpoint = "/rest/api/2/uiModifications"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create UI modification Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create UI modification completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create UI modification failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteUiModification(self, uiModificationId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.

**[Permissions](#permissions) required:** None.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param uiModificationId: The ID of the UI modification.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete UI modification", False)

        try:
            endpoint = f"/rest/api/2/uiModifications/{uiModificationId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete UI modification Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete UI modification completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete UI modification failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateUiModification(self, uiModificationId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a UI modification. UI modification can only be updated by Forge apps.

Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.

**[Permissions](#permissions) required:**

 *  *None* if the UI modification is created without contexts.
 *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param uiModificationId: The ID of the UI modification.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update UI modification", False)

        try:
            endpoint = f"/rest/api/2/uiModifications/{uiModificationId}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update UI modification Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update UI modification completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update UI modification failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvatars(self, type: str, entityId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the system and custom avatars for a project, issue type or priority.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
 *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
 *  for system avatars, none.
 *  for priority avatars, none.

        :param type: The avatar type.
        :param entityId: The ID of the item the avatar is associated with.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get avatars", False)

        try:
            endpoint = f"/rest/api/2/universal_avatar/type/{type}/owner/{entityId}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get avatars Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get avatars completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get avatars failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def storeAvatar(self, type: str, entityId: str, x: int = None, y: int = None, size: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Loads a custom avatar for a project, issue type or priority.

Specify the avatar's local file location in the body of the request. Also, include the following headers:

 *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
 *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.

For example:  
`curl --request POST `

`--user email@example.com:<api_token> `

`--header 'X-Atlassian-Token: no-check' `

`--header 'Content-Type: image/< image_type>' `

`--data-binary "<@/path/to/file/with/your/avatar>" `

`--url 'https://your-domain.atlassian.net/rest/api/2/universal_avatar/type/{type}/owner/{entityId}'`

The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.

The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.

After creating the avatar use:

 *  [Update issue type](#api-rest-api-2-issuetype-id-put) to set it as the issue type's displayed avatar.
 *  [Set project avatar](#api-rest-api-2-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
 *  [Update priority](#api-rest-api-2-priority-id-put) to set it as the priority's displayed avatar.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param type: The avatar type.
        :param entityId: The ID of the item the avatar is associated with.
        :param x: The X coordinate of the top-left corner of the crop region.
        :param y: The Y coordinate of the top-left corner of the crop region.
        :param size: The length of each side of the crop region.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Load avatar", False)

        try:
            endpoint = f"/rest/api/2/universal_avatar/type/{type}/owner/{entityId}"
            params = {}
            if x is not None:
                params["x"] = x
            if y is not None:
                params["y"] = y
            if size is not None:
                params["size"] = size
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Load avatar Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Load avatar completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Load avatar failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteAvatar(self, type: str, owningObjectId: str, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an avatar from a project, issue type or priority.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param type: The avatar type.
        :param owningObjectId: The ID of the item the avatar is associated with.
        :param id: The ID of the avatar.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete avatar", False)

        try:
            endpoint = f"/rest/api/2/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete avatar Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete avatar completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete avatar failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvatarImageByType(self, type: str, size: str = None, format: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default project, issue type or priority avatar image.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param type: The icon type of the avatar.
        :param size: The size of the avatar image. If not provided the default size is returned.
        :param format: The format to return the avatar image in. If not provided the original content format is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get avatar image by type", False)

        try:
            endpoint = f"/rest/api/2/universal_avatar/view/type/{type}"
            params = {}
            if size is not None:
                params["size"] = size
            if format is not None:
                params["format"] = format

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get avatar image by type Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get avatar image by type completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get avatar image by type failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvatarImageByID(self, type: str, id: int, size: str = None, format: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a project, issue type or priority avatar image by ID.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  For system avatars, none.
 *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
 *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
 *  For priority avatars, none.

        :param type: The icon type of the avatar.
        :param id: The ID of the avatar.
        :param size: The size of the avatar image. If not provided the default size is returned.
        :param format: The format to return the avatar image in. If not provided the original content format is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get avatar image by ID", False)

        try:
            endpoint = f"/rest/api/2/universal_avatar/view/type/{type}/avatar/{id}"
            params = {}
            if size is not None:
                params["size"] = size
            if format is not None:
                params["format"] = format

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get avatar image by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get avatar image by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get avatar image by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAvatarImageByOwner(self, type: str, entityId: str, size: str = None, format: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the avatar image for a project, issue type or priority.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  For system avatars, none.
 *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
 *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
 *  For priority avatars, none.

        :param type: The icon type of the avatar.
        :param entityId: The ID of the project or issue type the avatar belongs to.
        :param size: The size of the avatar image. If not provided the default size is returned.
        :param format: The format to return the avatar image in. If not provided the original content format is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get avatar image by owner", False)

        try:
            endpoint = f"/rest/api/2/universal_avatar/view/type/{type}/owner/{entityId}"
            params = {}
            if size is not None:
                params["size"] = size
            if format is not None:
                params["format"] = format

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get avatar image by owner Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get avatar image by owner completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get avatar image by owner failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def removeUser(self, accountId: str, username: str = None, key: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.

**[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param key: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete user", False)

        try:
            endpoint = "/rest/api/2/user"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if username is not None:
                params["username"] = username
            if key is not None:
                params["key"] = key

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete user Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete user completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete user failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUser(self, accountId: str = None, username: str = None, key: str = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a user.

Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
        :param key: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
        :param expand: Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `groups` includes all groups and nested groups to which the user belongs.
 *  `applicationRoles` includes details of all the applications to which the user has access.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user", False)

        try:
            endpoint = "/rest/api/2/user"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if username is not None:
                params["username"] = username
            if key is not None:
                params["key"] = key
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createUser(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.

If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create user", False)

        try:
            endpoint = "/rest/api/2/user"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create user Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create user completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create user failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findBulkAssignableUsers(self, query: str = None, username: str = None, accountId: str = None, projectKeys: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** None.

        :param query: A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
        :param projectKeys: A list of project keys (case sensitive). This parameter accepts a comma-separated list.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users assignable to projects", False)

        try:
            endpoint = "/rest/api/2/user/assignable/multiProjectSearch"
            params = {}
            if query is not None:
                params["query"] = query
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId
            if projectKeys is not None:
                params["projectKeys"] = projectKeys
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users assignable to projects Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users assignable to projects completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users assignable to projects failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findAssignableUsers(self, query: str = None, sessionId: str = None, username: str = None, accountId: str = None, project: str = None, issueKey: str = None, issueId: str = None, startAt: int = None, maxResults: int = None, actionDescriptorId: int = None, recommend: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:

 *  a new issue, by providing the `projectKeyOrId`.
 *  an updated issue, by providing the `issueKey` or `issueId`.
 *  to an issue during a transition (workflow action), by providing the `issueKey` or `issueId` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-2-issue-issueIdOrKey-get).

In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)

        :param query: A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.
        :param sessionId: The sessionId of this request. SessionId is the same until the assignee is set.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
        :param project: The project ID or project key (case sensitive). Required, unless `issueKey` or `issueId` is specified.
        :param issueKey: The key of the issue. Required, unless `issueId` or `project` is specified.
        :param issueId: The ID of the issue. Required, unless `issueKey` or `project` is specified.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.
        :param actionDescriptorId: The ID of the transition.
        :param recommend: recommend
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users assignable to issues", False)

        try:
            endpoint = "/rest/api/2/user/assignable/search"
            params = {}
            if query is not None:
                params["query"] = query
            if sessionId is not None:
                params["sessionId"] = sessionId
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId
            if project is not None:
                params["project"] = project
            if issueKey is not None:
                params["issueKey"] = issueKey
            if issueId is not None:
                params["issueId"] = issueId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if actionDescriptorId is not None:
                params["actionDescriptorId"] = actionDescriptorId
            if recommend is not None:
                params["recommend"] = recommend

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users assignable to issues Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users assignable to issues completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users assignable to issues failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkGetUsers(self, startAt: int = None, maxResults: int = None, username: List[Any] = None, key: List[Any] = None, accountId: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of the users specified by one or more account IDs.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param username: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param key: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk get users", False)

        try:
            endpoint = "/rest/api/2/user/bulk"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if username is not None:
                params["username"] = username
            if key is not None:
                params["key"] = key
            if accountId is not None:
                params["accountId"] = accountId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk get users Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk get users completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk get users failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def bulkGetUsersMigration(self, startAt: int = None, maxResults: int = None, username: List[Any] = None, key: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param username: Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.
        :param key: Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get account IDs for users", False)

        try:
            endpoint = "/rest/api/2/user/bulk/migration"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if username is not None:
                params["username"] = username
            if key is not None:
                params["key"] = key

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get account IDs for users Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get account IDs for users completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get account IDs for users failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def resetUserColumns(self, accountId: str = None, username: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
 *  Permission to access Jira, to set the calling user's columns.

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Reset user default columns", False)

        try:
            endpoint = "/rest/api/2/user/columns"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if username is not None:
                params["username"] = username

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Reset user default columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Reset user default columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Reset user default columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUserDefaultColumns(self, accountId: str = None, username: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
 *  Permission to access Jira, to get the calling user's column details.

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param username: This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user default columns", False)

        try:
            endpoint = "/rest/api/2/user/columns"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if username is not None:
                params["username"] = username

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user default columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user default columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user default columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setUserColumns(self, accountId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.

The parameters for this resource are expressed as HTML form data. For example, in curl:

`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/2/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
 *  Permission to access Jira, to set the calling user's columns.

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set user default columns", False)

        try:
            endpoint = "/rest/api/2/user/columns"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set user default columns Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set user default columns completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set user default columns failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUserEmail(self, accountId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a user's email address regardless of the user's profile visibility settings. For Connect apps, this API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603). For Forge apps, this API only supports access via asApp() requests.

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user email", False)

        try:
            endpoint = "/rest/api/2/user/email"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user email Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user email completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user email failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUserEmailBulk(self, accountId: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a user's email address regardless of the user's profile visibility settings. For Connect apps, this API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603). For Forge apps, this API only supports access via asApp() requests.

        :param accountId: The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user email bulk", False)

        try:
            endpoint = "/rest/api/2/user/email/bulk"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user email bulk Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user email bulk completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user email bulk failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUserGroups(self, accountId: str, username: str = None, key: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the groups to which a user belongs.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param key: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user groups", False)

        try:
            endpoint = "/rest/api/2/user/groups"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if username is not None:
                params["username"] = username
            if key is not None:
                params["key"] = key

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user groups Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user groups completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user groups failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUsersWithAllPermissions(self, query: str = None, username: str = None, accountId: str = None, permissions: str, issueKey: str = None, projectKey: str = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of users who fulfill these criteria:

 *  their user attributes match a search string.
 *  they have a set of permissions for a project or issue.

If no search string is provided, a list of all users with the permissions is returned.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
 *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.

        :param query: A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
        :param permissions: A comma separated list of permissions. Permissions can be specified as any:

 *  permission returned by [Get all permissions](#api-rest-api-2-permissions-get).
 *  custom project permission added by Connect apps.
 *  (deprecated) one of the following:
    
     *  ASSIGNABLE\_USER
     *  ASSIGN\_ISSUE
     *  ATTACHMENT\_DELETE\_ALL
     *  ATTACHMENT\_DELETE\_OWN
     *  BROWSE
     *  CLOSE\_ISSUE
     *  COMMENT\_DELETE\_ALL
     *  COMMENT\_DELETE\_OWN
     *  COMMENT\_EDIT\_ALL
     *  COMMENT\_EDIT\_OWN
     *  COMMENT\_ISSUE
     *  CREATE\_ATTACHMENT
     *  CREATE\_ISSUE
     *  DELETE\_ISSUE
     *  EDIT\_ISSUE
     *  LINK\_ISSUE
     *  MANAGE\_WATCHER\_LIST
     *  MODIFY\_REPORTER
     *  MOVE\_ISSUE
     *  PROJECT\_ADMIN
     *  RESOLVE\_ISSUE
     *  SCHEDULE\_ISSUE
     *  SET\_ISSUE\_SECURITY
     *  TRANSITION\_ISSUE
     *  VIEW\_VERSION\_CONTROL
     *  VIEW\_VOTERS\_AND\_WATCHERS
     *  VIEW\_WORKFLOW\_READONLY
     *  WORKLOG\_DELETE\_ALL
     *  WORKLOG\_DELETE\_OWN
     *  WORKLOG\_EDIT\_ALL
     *  WORKLOG\_EDIT\_OWN
     *  WORK\_ISSUE
        :param issueKey: The issue key for the issue.
        :param projectKey: The project key for the project (case sensitive).
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users with permissions", False)

        try:
            endpoint = "/rest/api/2/user/permission/search"
            params = {}
            if query is not None:
                params["query"] = query
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId
            if permissions is not None:
                params["permissions"] = permissions
            if issueKey is not None:
                params["issueKey"] = issueKey
            if projectKey is not None:
                params["projectKey"] = projectKey
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users with permissions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users with permissions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users with permissions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUsersForPicker(self, query: str, maxResults: int = None, showAvatar: bool = None, exclude: List[Any] = None, excludeAccountIds: List[Any] = None, avatarSize: str = None, excludeConnectUsers: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.

This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.

        :param query: A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.
        :param maxResults: The maximum number of items to return. The total number of matched users is returned in `total`.
        :param showAvatar: Include the URI to the user's avatar.
        :param exclude: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param excludeAccountIds: A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.
        :param avatarSize: avatarSize
        :param excludeConnectUsers: excludeConnectUsers
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users for picker", False)

        try:
            endpoint = "/rest/api/2/user/picker"
            params = {}
            if query is not None:
                params["query"] = query
            if maxResults is not None:
                params["maxResults"] = maxResults
            if showAvatar is not None:
                params["showAvatar"] = showAvatar
            if exclude is not None:
                params["exclude"] = exclude
            if excludeAccountIds is not None:
                params["excludeAccountIds"] = excludeAccountIds
            if avatarSize is not None:
                params["avatarSize"] = avatarSize
            if excludeConnectUsers is not None:
                params["excludeConnectUsers"] = excludeConnectUsers

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users for picker Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users for picker completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users for picker failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUserPropertyKeys(self, accountId: str = None, userKey: str = None, username: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the keys of all properties for a user.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
 *  Access to Jira, to access the calling user's property keys.

        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param userKey: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param username: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user property keys", False)

        try:
            endpoint = "/rest/api/2/user/properties"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if userKey is not None:
                params["userKey"] = userKey
            if username is not None:
                params["username"] = username

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user property keys Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user property keys completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user property keys failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteUserProperty(self, propertyKey: str, accountId: str = None, userKey: str = None, username: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a property from a user.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
 *  Access to Jira, to delete a property from the calling user's record.

        :param propertyKey: The key of the user's property.
        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param userKey: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param username: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete user property", False)

        try:
            endpoint = f"/rest/api/2/user/properties/{propertyKey}"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if userKey is not None:
                params["userKey"] = userKey
            if username is not None:
                params["username"] = username

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete user property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete user property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete user property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getUserProperty(self, propertyKey: str, accountId: str = None, userKey: str = None, username: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-2-user-properties-get) is called.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
 *  Access to Jira, to get a property from the calling user's record.

        :param propertyKey: The key of the user's property.
        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param userKey: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param username: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get user property", False)

        try:
            endpoint = f"/rest/api/2/user/properties/{propertyKey}"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if userKey is not None:
                params["userKey"] = userKey
            if username is not None:
                params["username"] = username

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get user property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get user property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get user property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setUserProperty(self, propertyKey: str, accountId: str = None, userKey: str = None, username: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of a user's property. Use this resource to store custom data against a user.

Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.

**[Permissions](#permissions) required:**

 *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
 *  Access to Jira, to set a property on the calling user's record.

        :param propertyKey: The key of the user's property. The maximum length is 255 characters.
        :param accountId: The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        :param userKey: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param username: This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set user property", False)

        try:
            endpoint = f"/rest/api/2/user/properties/{propertyKey}"
            params = {}
            if accountId is not None:
                params["accountId"] = accountId
            if userKey is not None:
                params["userKey"] = userKey
            if username is not None:
                params["username"] = username
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set user property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set user property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set user property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUsers(self, query: str = None, username: str = None, accountId: str = None, startAt: int = None, maxResults: int = None, property: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of active users that match the search string and property.

This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

This operation can be accessed anonymously.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.

        :param query: A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.
        :param username: username
        :param accountId: A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.
        :param startAt: The index of the first item to return in a page of filtered results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param property: A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users", False)

        try:
            endpoint = "/rest/api/2/user/search"
            params = {}
            if query is not None:
                params["query"] = query
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if property is not None:
                params["property"] = property

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUsersByQuery(self, query: str, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Finds users with a structured query and returns a [paginated](#pagination) list of user details.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

The query statements are:

 *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
 *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
 *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
 *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
 *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
 *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
 *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
 *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value. For example, if user property `location` is set to value `{"office": {"country": "AU", "city": "Sydney"}}`, then it's possible to use `[location].office.city is "Sydney"` to match the user.

The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:

`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`

        :param query: The search query.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users by query", False)

        try:
            endpoint = "/rest/api/2/user/search/query"
            params = {}
            if query is not None:
                params["query"] = query
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users by query Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users by query completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users by query failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUserKeysByQuery(self, query: str, startAt: int = None, maxResult: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Finds users with a structured query and returns a [paginated](#pagination) list of user keys.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

The query statements are:

 *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
 *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
 *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
 *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
 *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
 *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
 *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
 *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value. For example, if user property `location` is set to value `{"office": {"country": "AU", "city": "Sydney"}}`, then it's possible to use `[location].office.city is "Sydney"` to match the user.

The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:

`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`

        :param query: The search query.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResult: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find user keys by query", False)

        try:
            endpoint = "/rest/api/2/user/search/query/key"
            params = {}
            if query is not None:
                params["query"] = query
            if startAt is not None:
                params["startAt"] = startAt
            if maxResult is not None:
                params["maxResult"] = maxResult

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find user keys by query Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find user keys by query completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find user keys by query failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def findUsersWithBrowsePermission(self, query: str = None, username: str = None, accountId: str = None, issueKey: str = None, projectKey: str = None, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of users who fulfill these criteria:

 *  their user attributes match a search string.
 *  they have permission to browse issues.

Use this resource to find users who can browse:

 *  an issue, by providing the `issueKey`.
 *  any issue in a project, by providing the `projectKey`.

This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-2-users-search-get) and filter the records in your code.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.

        :param query: A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
        :param username: This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        :param accountId: A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
        :param issueKey: The issue key for the issue. Required, unless `projectKey` is specified.
        :param projectKey: The project key for the project (case sensitive). Required, unless `issueKey` is specified.
        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Find users with browse permission", False)

        try:
            endpoint = "/rest/api/2/user/viewissue/search"
            params = {}
            if query is not None:
                params["query"] = query
            if username is not None:
                params["username"] = username
            if accountId is not None:
                params["accountId"] = accountId
            if issueKey is not None:
                params["issueKey"] = issueKey
            if projectKey is not None:
                params["projectKey"] = projectKey
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Find users with browse permission Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Find users with browse permission completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Find users with browse permission failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllUsersDefault(self, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return.
        :param maxResults: The maximum number of items to return.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all users default", False)

        try:
            endpoint = "/rest/api/2/users"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all users default Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all users default completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all users default failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllUsers(self, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.

Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.

**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return.
        :param maxResults: The maximum number of items to return.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all users", False)

        try:
            endpoint = "/rest/api/2/users/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all users Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all users completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all users failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createVersion(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create version", False)

        try:
            endpoint = "/rest/api/2/version"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create version Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create version completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create version failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteVersion(self, id: str, moveFixIssuesTo: str = None, moveAffectedIssuesTo: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a project version.

Deprecated, use [ Delete and replace version](#api-rest-api-2-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.

Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.

        :param id: The ID of the version.
        :param moveFixIssuesTo: The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
        :param moveAffectedIssuesTo: The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete version", False)

        try:
            endpoint = f"/rest/api/2/version/{id}"
            params = {}
            if moveFixIssuesTo is not None:
                params["moveFixIssuesTo"] = moveFixIssuesTo
            if moveAffectedIssuesTo is not None:
                params["moveAffectedIssuesTo"] = moveAffectedIssuesTo

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete version Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete version completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete version failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getVersion(self, id: str, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.

        :param id: The ID of the version.
        :param expand: Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `operations` Returns the list of operations available for this version.
 *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
 *  `driver` Returns the Atlassian account ID of the version driver.
 *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get version", False)

        try:
            endpoint = f"/rest/api/2/version/{id}"
            params = {}
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get version Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get version completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get version failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateVersion(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.

        :param id: The ID of the version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update version", False)

        try:
            endpoint = f"/rest/api/2/version/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update version Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update version completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update version failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def mergeVersions(self, id: str, moveIssuesTo: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.

Consider using [ Delete and replace version](#api-rest-api-2-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.

        :param id: The ID of the version to delete.
        :param moveIssuesTo: The ID of the version to merge into.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Merge versions", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/mergeto/{moveIssuesTo}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Merge versions Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Merge versions completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Merge versions failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def moveVersion(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Modifies the version's sequence within the project, which affects the display order of the versions in Jira.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.

        :param id: The ID of the version to be moved.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Move version", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/move"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Move version Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Move version completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Move version failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getVersionRelatedIssues(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the following counts for a version:

 *  Number of issues where the `fixVersion` is set to the version.
 *  Number of issues where the `affectedVersion` is set to the version.
 *  Number of issues where a version custom field is set to the version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.

        :param id: The ID of the version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get version's related issues count", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/relatedIssueCounts"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get version's related issues count Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get version's related issues count completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get version's related issues count failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getRelatedWork(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns related work items for the given version id.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.

        :param id: The ID of the version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get related work", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/relatedwork"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get related work Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get related work completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get related work failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createRelatedWork(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.

        :param id: id
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create related work", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/relatedwork"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create related work Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create related work completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create related work failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateRelatedWork(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.

        :param id: The ID of the version to update the related work on. For the related work id, pass it to the input JSON.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update related work", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/relatedwork"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update related work Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update related work completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update related work failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteAndReplaceVersion(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a project version.

Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.

        :param id: The ID of the version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete and replace version", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/removeAndSwap"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete and replace version Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete and replace version completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete and replace version failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getVersionUnresolvedIssues(self, id: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns counts of the issues and unresolved issues for the project version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.

        :param id: The ID of the version.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get version's unresolved issues count", False)

        try:
            endpoint = f"/rest/api/2/version/{id}/unresolvedIssueCount"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get version's unresolved issues count Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get version's unresolved issues count completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get version's unresolved issues count failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteRelatedWork(self, versionId: str, relatedWorkId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the given related work for the given version.

This operation can be accessed anonymously.

**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.

        :param versionId: The ID of the version that the target related work belongs to.
        :param relatedWorkId: The ID of the related work to delete.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete related work", False)

        try:
            endpoint = f"/rest/api/2/version/{versionId}/relatedwork/{relatedWorkId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete related work Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete related work completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete related work failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWebhookById(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete webhooks by ID", False)

        try:
            endpoint = "/rest/api/2/webhook"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete webhooks by ID Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete webhooks by ID completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete webhooks by ID failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDynamicWebhooksForApp(self, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of the webhooks registered by the calling app.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get dynamic webhooks for app", False)

        try:
            endpoint = "/rest/api/2/webhook"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get dynamic webhooks for app Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get dynamic webhooks for app completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get dynamic webhooks for app failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def registerDynamicWebhooks(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Registers webhooks.

**NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Register dynamic webhooks", False)

        try:
            endpoint = "/rest/api/2/webhook"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Register dynamic webhooks Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Register dynamic webhooks completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Register dynamic webhooks failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getFailedWebhooks(self, maxResults: int = None, after: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.

After 72 hours the failure may no longer be returned by this operation.

The oldest failure is returned first.

This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.

**[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.

        :param maxResults: The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.
        :param after: The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get failed webhooks", False)

        try:
            endpoint = "/rest/api/2/webhook/failed"
            params = {}
            if maxResults is not None:
                params["maxResults"] = maxResults
            if after is not None:
                params["after"] = after

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get failed webhooks Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get failed webhooks completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get failed webhooks failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def refreshWebhooks(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.

Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Extend webhook life", False)

        try:
            endpoint = "/rest/api/2/webhook/refresh"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Extend webhook life Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Extend webhook life completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Extend webhook life failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllWorkflows(self, workflowName: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-2-workflow-search-get).

If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param workflowName: The name of the workflow to be returned. Only one workflow can be specified.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all workflows", False)

        try:
            endpoint = "/rest/api/2/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createWorkflow(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.

#### Conditions ####

Conditions enable workflow rules that govern whether a transition can execute.

##### Always false condition #####

A condition that always fails.

    {
       "type": "AlwaysFalseCondition"
     }

##### Block transition until approval #####

A condition that blocks issue transition if there is a pending approval.

    {
       "type": "BlockInProgressApprovalCondition"
     }

##### Compare number custom field condition #####

A condition that allows transition if a comparison between a number custom field and a value is true.

    {
       "type": "CompareNumberCFCondition",
       "configuration": {
         "comparator": "=",
         "fieldId": "customfield_10029",
         "fieldValue": 2
       }
     }

 *  `comparator` One of the supported comparator: `=`, `>`, and `<`.
 *  `fieldId` The custom numeric field ID. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     *  `com.pyxis.greenhopper.jira:jsw-story-points`
 *  `fieldValue` The value for comparison.

##### Hide from user condition #####

A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.

    {
       "type": "RemoteOnlyCondition"
     }

##### Only assignee condition #####

A condition that allows only the assignee to execute a transition.

    {
       "type": "AllowOnlyAssignee"
     }

##### Only Bamboo notifications workflow condition (deprecated) #####

A condition that makes the transition available only to Bamboo build notifications.

    {
       "type": "OnlyBambooNotificationsCondition"
     }

##### Only reporter condition #####

A condition that allows only the reporter to execute a transition.

    {
       "type": "AllowOnlyReporter"
     }

##### Permission condition #####

A condition that allows only users with a permission to execute a transition.

    {
       "type": "PermissionCondition",
       "configuration": {
           "permissionKey": "BROWSE_PROJECTS"
       }
     }

 *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.

##### Previous status condition #####

A condition that allows a transition based on whether an issue has or has not transitioned through a status.

    {
       "type": "PreviousStatusCondition",
       "configuration": {
         "ignoreLoopTransitions": true,
         "includeCurrentStatus": true,
         "mostRecentStatusOnly": true,
         "reverseCondition": true,
         "previousStatus": {
           "id": "5"
         }
       }
     }

By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:

 *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
 *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
 *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
 *  `reverseCondition` is `true`, then the status must not be present.

##### Separation of duties condition #####

A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.

    {
       "type": "SeparationOfDutiesCondition",
       "configuration": {
         "fromStatus": {
           "id": "5"
         },
         "toStatus": {
           "id": "6"
         }
       }
     }

 *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
 *  `toStatus` An object containing the ID of the target status of the transition that is blocked.

##### Subtask blocking condition #####

A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.

    {
       "type": "SubTaskBlockingCondition",
       "configuration": {
         "statuses": [
           {
             "id": "1"
           },
           {
             "id": "3"
           }
         ]
       }
     }

 *  `statuses` A list of objects containing status IDs.

##### User is in any group condition #####

A condition that allows users belonging to any group from a list of groups to execute a transition.

    {
       "type": "UserInAnyGroupCondition",
       "configuration": {
         "groups": [
           "administrators",
           "atlassian-addons-admin"
         ]
       }
     }

 *  `groups` A list of group names.

##### User is in any project role condition #####

A condition that allows only users with at least one project roles from a list of project roles to execute a transition.

    {
       "type": "InAnyProjectRoleCondition",
       "configuration": {
         "projectRoles": [
           {
             "id": "10002"
           },
           {
             "id": "10003"
           },
           {
             "id": "10012"
           },
           {
             "id": "10013"
           }
         ]
       }
     }

 *  `projectRoles` A list of objects containing project role IDs.

##### User is in custom field condition #####

A condition that allows only users listed in a given custom field to execute the transition.

    {
       "type": "UserIsInCustomFieldCondition",
       "configuration": {
         "allowUserInField": false,
         "fieldId": "customfield_10010"
       }
     }

 *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
 *  `fieldId` The ID of the field containing the list of users.

##### User is in group condition #####

A condition that allows users belonging to a group to execute a transition.

    {
       "type": "UserInGroupCondition",
       "configuration": {
         "group": "administrators"
       }
     }

 *  `group` The name of the group.

##### User is in group custom field condition #####

A condition that allows users belonging to a group specified in a custom field to execute a transition.

    {
       "type": "InGroupCFCondition",
       "configuration": {
         "fieldId": "customfield_10012"
       }
     }

 *  `fieldId` The ID of the field. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     *  `com.pyxis.greenhopper.jira:gh-epic-status`

##### User is in project role condition #####

A condition that allows users with a project role to execute a transition.

    {
       "type": "InProjectRoleCondition",
       "configuration": {
         "projectRole": {
           "id": "10002"
         }
       }
     }

 *  `projectRole` An object containing the ID of a project role.

##### Value field condition #####

A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.

    {
       "type": "ValueFieldCondition",
       "configuration": {
         "fieldId": "assignee",
         "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
         "comparisonType": "NUMBER",
         "comparator": "="
       }
     }

 *  `fieldId` The ID of a field used in the comparison.
 *  `fieldValue` The expected value of the field.
 *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
 *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.

**Notes:**

 *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
 *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
 *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.

#### Validators ####

Validators check that any input made to the transition is valid before the transition is performed.

##### Date field validator #####

A validator that compares two dates.

    {
       "type": "DateFieldValidator",
       "configuration": {
           "comparator": ">",
           "date1": "updated",
           "date2": "created",
           "expression": "1d",
           "includeTime": true
         }
     }

 *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.
 *  `date1` The date field to validate. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
 *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.

##### Windows date validator #####

A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.

    {
       "type": "WindowsDateValidator",
       "configuration": {
           "date1": "customfield_10009",
           "date2": "created",
           "windowsDays": 5
         }
     }

 *  `date1` The date field to validate. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `date2` The reference date. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *  `duedate`
     *  `created`
     *  `updated`
     *  `resolutiondate`
 *  `windowsDays` A positive integer indicating a number of days.

##### Field required validator #####

A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.

    {
         "type": "FieldRequiredValidator",
         "configuration": {
             "ignoreContext": true,
             "errorMessage": "Hey",
             "fieldIds": [
                 "versions",
                 "customfield_10037",
                 "customfield_10003"
             ]
         }
     }

 *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
 *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
 *  `fieldIds` The list of fields to validate.

##### Field changed validator #####

A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.

    {
         "type": "FieldChangedValidator",
         "configuration": {
             "fieldId": "comment",
             "errorMessage": "Hey",
             "exemptedGroups": [
                 "administrators",
                 "atlassian-addons-admin"
             ]
         }
     }

 *  `fieldId` The ID of a field.
 *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
 *  `exemptedGroups` OPTIONAL. The list of groups.

##### Field has single value validator #####

A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.

    {
         "type": "FieldHasSingleValueValidator",
         "configuration": {
             "fieldId": "attachment,
             "excludeSubtasks": true
         }
     }

 *  `fieldId` The ID of a field.
 *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.

##### Parent status validator #####

A validator that checks the status of the parent issue of a subtask. ÃŒf the issue is not a subtask, no validation is performed.

    {
         "type": "ParentStatusValidator",
         "configuration": {
             "parentStatuses": [
                 {
                   "id":"1"
                 },
                 {
                   "id":"2"
                 }
             ]
         }
     }

 *  `parentStatus` The list of required parent issue statuses.

##### Permission validator #####

A validator that checks the user has a permission.

    {
       "type": "PermissionValidator",
       "configuration": {
           "permissionKey": "ADMINISTER_PROJECTS"
       }
     }

 *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.

##### Previous status validator #####

A validator that checks if the issue has held a status.

    {
       "type": "PreviousStatusValidator",
       "configuration": {
           "mostRecentStatusOnly": false,
           "previousStatus": {
               "id": "15"
           }
       }
     }

 *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
 *  `previousStatus` An object containing the ID of an issue status.

##### Regular expression validator #####

A validator that checks the content of a field against a regular expression.

    {
       "type": "RegexpFieldValidator",
       "configuration": {
           "regExp": "[0-9]",
           "fieldId": "customfield_10029"
       }
     }

 *  `regExp`A regular expression.
 *  `fieldId` The ID of a field. Allowed field types:
    
     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     *  `com.pyxis.greenhopper.jira:jsw-story-points`
     *  `com.pyxis.greenhopper.jira:gh-epic-status`
     *  `description`
     *  `summary`

##### User permission validator #####

A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.

    {
         "type": "UserPermissionValidator",
         "configuration": {
             "permissionKey": "BROWSE_PROJECTS",
             "nullAllowed": false,
             "username": "TestUser"
         }
     }

 *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
 *  `nullAllowed` If `true`, allows the transition when `username` is empty.
 *  `username` The username to validate against the `permissionKey`.

#### Post functions ####

Post functions carry out any additional processing required after a Jira workflow transition is executed.

##### Fire issue event function #####

A post function that fires an event that is processed by the listeners.

    {
       "type": "FireIssueEventFunction",
       "configuration": {
         "event": {
           "id":"1"
         }
       }
     }

**Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.

 *  `event` An object containing the ID of the issue event.

##### Update issue status #####

A post function that sets issue status to the linked status of the destination workflow status.

    {
       "type": "UpdateIssueStatusFunction"
     }

**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.

##### Create comment #####

A post function that adds a comment entered during the transition to an issue.

    {
       "type": "CreateCommentFunction"
     }

**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.

##### Store issue #####

A post function that stores updates to an issue.

    {
       "type": "IssueStoreFunction"
     }

**Note:** This post function can only be added to the initial transition and can only be added once.

##### Assign to current user function #####

A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.

    {
         "type": "AssignToCurrentUserFunction"
     }

**Note:** This post function can be included once in a transition.

##### Assign to lead function #####

A post function that assigns the issue to the project or component lead developer.

    {
         "type": "AssignToLeadFunction"
     }

**Note:** This post function can be included once in a transition.

##### Assign to reporter function #####

A post function that assigns the issue to the reporter.

    {
         "type": "AssignToReporterFunction"
     }

**Note:** This post function can be included once in a transition.

##### Clear field value function #####

A post function that clears the value from a field.

    {
       "type": "ClearFieldValuePostFunction",
       "configuration": {
         "fieldId": "assignee"
       }
     }

 *  `fieldId` The ID of the field.

##### Copy value from other field function #####

A post function that copies the value of one field to another, either within an issue or from parent to subtask.

    {
       "type": "CopyValueFromOtherFieldPostFunction",
       "configuration": {
         "sourceFieldId": "assignee",
         "destinationFieldId": "creator",
         "copyType": "same"
       }
     }

 *  `sourceFieldId` The ID of the source field.
 *  `destinationFieldId` The ID of the destination field.
 *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.

##### Create Crucible review workflow function (deprecated) #####

A post function that creates a Crucible review for all unreviewed code for the issue.

    {
         "type": "CreateCrucibleReviewWorkflowFunction"
     }

**Note:** This post function can be included once in a transition.

##### Set issue security level based on user's project role function #####

A post function that sets the issue's security level if the current user has a project role.

    {
       "type": "SetIssueSecurityFromRoleFunction",
       "configuration": {
         "projectRole": {
             "id":"10002"
         },
         "issueSecurityLevel": {
             "id":"10000"
         }
       }
     }

 *  `projectRole` An object containing the ID of the project role.
 *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.

##### Trigger a webhook function #####

A post function that triggers a webhook.

    {
       "type": "TriggerWebhookFunction",
       "configuration": {
         "webhook": {
           "id": "1"
         }
       }
     }

 *  `webhook` An object containing the ID of the webhook listener to trigger.

##### Update issue custom field function #####

A post function that updates the content of an issue custom field.

    {
       "type": "UpdateIssueCustomFieldPostFunction",
       "configuration": {
         "mode": "append",
         "fieldId": "customfield_10003",
         "fieldValue": "yikes"
       }
     }

 *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
 *  `fieldId` The ID of the field.
 *  `fieldValue` The update content.

##### Update issue field function #####

A post function that updates a simple issue field.

    {
       "type": "UpdateIssueFieldFunction",
       "configuration": {
         "fieldId": "assignee",
         "fieldValue": "5f0c277e70b8a90025a00776"
       }
     }

 *  `fieldId` The ID of the field. Allowed field types:
    
     *  `assignee`
     *  `description`
     *  `environment`
     *  `priority`
     *  `resolution`
     *  `summary`
     *  `timeoriginalestimate`
     *  `timeestimate`
     *  `timespent`
 *  `fieldValue` The update value.
 *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
    
     *  an account ID.
     *  `automatic`.
     *  a blank string, which sets the value to `unassigned`.

#### Connect rules ####

Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.

    {
       "type": "appKey__moduleKey",
       "configuration": {
         "value":"{\"isValid\":\"true\"}"
       }
     }

 *  `type` A Connect rule key in a form of `appKey__moduleKey`.
 *  `value` The stringified JSON configuration of a Connect rule.

#### Forge rules ####

Forge transition rules are not yet supported.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create workflow", False)

        try:
            endpoint = "/rest/api/2/workflow"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowTransitionRuleConfigurations(self, startAt: int = None, maxResults: int = None, types: List[Any], keys: List[Any] = None, workflowNames: List[Any] = None, withTags: List[Any] = None, draft: bool = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:

 *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
 *  matching one or more transition rule keys.

Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.

Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param types: The types of the transition rules to return.
        :param keys: The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.
        :param workflowNames: The list of workflow names to filter by.
        :param withTags: The list of `tags` to filter by.
        :param draft: Whether draft or published workflows are returned. If not provided, both workflow types are returned.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow transition rule configurations", False)

        try:
            endpoint = "/rest/api/2/workflow/rule/config"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if types is not None:
                params["types"] = types
            if keys is not None:
                params["keys"] = keys
            if workflowNames is not None:
                params["workflowNames"] = workflowNames
            if withTags is not None:
                params["withTags"] = withTags
            if draft is not None:
                params["draft"] = draft
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow transition rule configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow transition rule configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow transition rule configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflowTransitionRuleConfigurations(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates configuration of workflow transition rules. The following rule types are supported:

 *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
 *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
 *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)

Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.

To assist with app migration, this operation can be used to:

 *  Disable a rule.
 *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).

Rules are enabled if the `disabled` parameter is not provided.

**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update workflow transition rule configurations", False)

        try:
            endpoint = "/rest/api/2/workflow/rule/config"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update workflow transition rule configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update workflow transition rule configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update workflow transition rule configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowTransitionRuleConfigurations(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes workflow transition rules from one or more workflows. These rule types are supported:

 *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
 *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
 *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)

Only rules created by the calling Connect app can be deleted.

**[Permissions](#permissions) required:** Only Connect apps can use this operation.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete workflow transition rule configurations", False)

        try:
            endpoint = "/rest/api/2/workflow/rule/config/delete"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete workflow transition rule configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete workflow transition rule configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete workflow transition rule configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowsPaginated(self, startAt: int = None, maxResults: int = None, workflowName: List[Any] = None, expand: str = None, queryString: str = None, orderBy: str = None, isActive: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.

This operation does not return next-gen workflows.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param workflowName: The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `transitions` For each workflow, returns information about the transitions inside the workflow.
 *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
 *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.
 *  `statuses` For each workflow, returns information about the statuses inside the workflow.
 *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
 *  `default` For each workflow, returns information about whether this is the default workflow.
 *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.
 *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.
 *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.
 *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.
        :param queryString: String used to perform a case-insensitive partial match with workflow name.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `name` Sorts by workflow name.
 *  `created` Sorts by create time.
 *  `updated` Sorts by update time.
        :param isActive: Filters active and inactive workflows.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflows paginated", False)

        try:
            endpoint = "/rest/api/2/workflow/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if workflowName is not None:
                params["workflowName"] = workflowName
            if expand is not None:
                params["expand"] = expand
            if queryString is not None:
                params["queryString"] = queryString
            if orderBy is not None:
                params["orderBy"] = orderBy
            if isActive is not None:
                params["isActive"] = isActive

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflows paginated Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflows paginated completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflows paginated failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowTransitionProperty(self, transitionId: int, key: str, workflowName: str, workflowMode: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param transitionId: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
        :param key: The name of the transition property to delete, also known as the name of the property.
        :param workflowName: The name of the workflow that the transition belongs to.
        :param workflowMode: The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete workflow transition property", False)

        try:
            endpoint = f"/rest/api/2/workflow/transitions/{transitionId}/properties"
            params = {}
            if key is not None:
                params["key"] = key
            if workflowName is not None:
                params["workflowName"] = workflowName
            if workflowMode is not None:
                params["workflowMode"] = workflowMode

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete workflow transition property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete workflow transition property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete workflow transition property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowTransitionProperties(self, transitionId: int, includeReservedKeys: bool = None, key: str = None, workflowName: str, workflowMode: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param transitionId: The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.
        :param includeReservedKeys: Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
        :param key: The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
        :param workflowName: The name of the workflow that the transition belongs to.
        :param workflowMode: The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow transition properties", False)

        try:
            endpoint = f"/rest/api/2/workflow/transitions/{transitionId}/properties"
            params = {}
            if includeReservedKeys is not None:
                params["includeReservedKeys"] = includeReservedKeys
            if key is not None:
                params["key"] = key
            if workflowName is not None:
                params["workflowName"] = workflowName
            if workflowMode is not None:
                params["workflowMode"] = workflowMode

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow transition properties Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow transition properties completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow transition properties failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createWorkflowTransitionProperty(self, transitionId: int, key: str, workflowName: str, workflowMode: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param transitionId: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
        :param key: The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
        :param workflowName: The name of the workflow that the transition belongs to.
        :param workflowMode: The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create workflow transition property", False)

        try:
            endpoint = f"/rest/api/2/workflow/transitions/{transitionId}/properties"
            params = {}
            if key is not None:
                params["key"] = key
            if workflowName is not None:
                params["workflowName"] = workflowName
            if workflowMode is not None:
                params["workflowMode"] = workflowMode
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create workflow transition property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create workflow transition property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create workflow transition property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflowTransitionProperty(self, transitionId: int, key: str, workflowName: str, workflowMode: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param transitionId: The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
        :param key: The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
        :param workflowName: The name of the workflow that the transition belongs to.
        :param workflowMode: The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update workflow transition property", False)

        try:
            endpoint = f"/rest/api/2/workflow/transitions/{transitionId}/properties"
            params = {}
            if key is not None:
                params["key"] = key
            if workflowName is not None:
                params["workflowName"] = workflowName
            if workflowMode is not None:
                params["workflowMode"] = workflowMode
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update workflow transition property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update workflow transition property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update workflow transition property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteInactiveWorkflow(self, entityId: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a workflow.

The workflow cannot be deleted if it is:

 *  an active workflow.
 *  a system workflow.
 *  associated with any workflow scheme.
 *  associated with any draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param entityId: The entity ID of the workflow.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete inactive workflow", False)

        try:
            endpoint = f"/rest/api/2/workflow/{entityId}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete inactive workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete inactive workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete inactive workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowProjectIssueTypeUsages(self, workflowId: str, projectId: int, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of issue types using a given workflow within a project.

        :param workflowId: The workflow ID
        :param projectId: The project ID
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue types in a project that are using a given workflow", False)

        try:
            endpoint = f"/rest/api/2/workflow/{workflowId}/project/{projectId}/issueTypeUsages"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue types in a project that are using a given workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue types in a project that are using a given workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue types in a project that are using a given workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectUsagesForWorkflow(self, workflowId: str, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of projects using a given workflow.

        :param workflowId: The workflow ID
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get projects using a given workflow", False)

        try:
            endpoint = f"/rest/api/2/workflow/{workflowId}/projectUsages"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get projects using a given workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get projects using a given workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get projects using a given workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowSchemeUsagesForWorkflow(self, workflowId: str, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of workflow schemes using a given workflow.

        :param workflowId: The workflow ID
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow schemes which are using a given workflow", False)

        try:
            endpoint = f"/rest/api/2/workflow/{workflowId}/workflowSchemes"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow schemes which are using a given workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow schemes which are using a given workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow schemes which are using a given workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def readWorkflows(self, expand: str = None, useTransitionLinksFormat: bool = None, useApprovalConfiguration: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.

**[Permissions](#permissions) required:**

 *  *Administer Jira* global permission to access all, including project-scoped, workflows
 *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows

        :param expand: Deprecated. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2298) for details.

Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
 *  `statuses.usages` Returns the project and issue types that each status is associated with.
        :param useTransitionLinksFormat: Return the new fields (`toStatusReference`/`links`) instead of the deprecated fields (`to`/`from`) for workflow transition port mappings.
        :param useApprovalConfiguration: Return the new field `approvalConfiguration` instead of the deprecated status properties for approval configuration.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk get workflows", False)

        try:
            endpoint = "/rest/api/2/workflows"
            params = {}
            if expand is not None:
                params["expand"] = expand
            if useTransitionLinksFormat is not None:
                params["useTransitionLinksFormat"] = useTransitionLinksFormat
            if useApprovalConfiguration is not None:
                params["useApprovalConfiguration"] = useApprovalConfiguration
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk get workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk get workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk get workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def workflowCapabilities(self, workflowId: str = None, projectId: str = None, issueTypeId: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).

**[Permissions](#permissions) required:**

 *  *Administer Jira* project permission to access all, including global-scoped, workflows
 *  *Administer projects* project permissions to access project-scoped workflows

The current list of Atlassian-provided rules:

#### Validators ####

A validator rule that checks if a user has the required permissions to execute the transition in the workflow.

##### Permission validator #####

A validator rule that checks if a user has the required permissions to execute the transition in the workflow.

    {
       "ruleKey": "system:check-permission-validator",
       "parameters": {
         "permissionKey": "ADMINISTER_PROJECTS"
       }
     }

Parameters:

 *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).

##### Parent or child blocking validator #####

A validator to block the child issue's transition depending on the parent issue's status.

    {
       "ruleKey" : "system:parent-or-child-blocking-validator"
       "parameters" : {
         "blocker" : "PARENT"
         "statusIds" : "1,2,3"
       }
     }

Parameters:

 *  `blocker` currently only supports `PARENT`.
 *  `statusIds` a comma-separated list of status IDs.

##### Previous status validator #####

A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.

    {
       "ruleKey": "system:previous-status-validator",
       "parameters": {
         "previousStatusIds": "10014",
         "mostRecentStatusOnly": "true"
       }
     }

Parameters:

 *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.
 *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.

##### Validate a field value #####

A validation that ensures a specific field's value meets the defined criteria before allowing an issue to transition in the workflow.

Depending on the rule type, the result will vary:

###### Field required ######

    {
       "ruleKey": "system:validate-field-value",
       "parameters": {
         "ruleType": "fieldRequired",
         "fieldsRequired": "assignee",
         "ignoreContext": "true",
         "errorMessage": "An assignee must be set!"
       }
     }

Parameters:

 *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.
 *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn't check a required field if its context isn't configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.
 *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).

###### Field changed ######

    {
       "ruleKey": "system:validate-field-value",
       "parameters": {
         "ruleType": "fieldChanged",
         "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",
         "fieldKey": "versions",
         "errorMessage": "Affect versions must be modified before transition"
       }
     }

Parameters:

 *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.
 *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.
 *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).

###### Field has a single value ######

    {
       "ruleKey": "system:validate-field-value",
       "parameters": {
         "ruleType": "fieldHasSingleValue",
         "fieldKey": "created",
         "excludeSubtasks": "true"
       }
     }

Parameters:

 *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
 *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.

###### Field matches regular expression ######

    {
       "ruleKey": "system:validate-field-value",
       "parameters": {
         "ruleType": "fieldMatchesRegularExpression",
         "regexp": "[0-9]{4}",
         "fieldKey": "description"
       }
     }

Parameters:

 *  `regexp` the regular expression used to validate the field\\u2019s content.
 *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.

###### Date field comparison ######

    {
       "ruleKey": "system:validate-field-value",
       "parameters": {
         "ruleType": "dateFieldComparison",
         "date1FieldKey": "duedate",
         "date2FieldKey": "customfield_10054",
         "includeTime": "true",
         "conditionSelected": ">="
       }
     }

Parameters:

 *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
 *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
 *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.
 *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.

###### Date range comparison ######

    {
       "ruleKey": "system:validate-field-value",
       "parameters": {
         "ruleType": "windowDateComparison",
         "date1FieldKey": "customfield_10009",
         "date2FieldKey": "customfield_10054",
         "numberOfDays": "3"
       }
     }

Parameters:

 *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
 *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
 *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.

This rule is composed by aggregating the following legacy rules:

 *  FieldRequiredValidator
 *  FieldChangedValidator
 *  FieldHasSingleValueValidator
 *  RegexpFieldValidator
 *  DateFieldValidator
 *  WindowsDateValidator

##### Proforma: Forms attached validator #####

Validates that one or more forms are attached to the issue.

    {
       "ruleKey" : "system:proforma-forms-attached"
       "parameters" : {}
     }

##### Proforma: Forms submitted validator #####

Validates that all forms attached to the issue have been submitted.

    {
       "ruleKey" : "system:proforma-forms-submitted"
       "parameters" : {}
     }

#### Conditions ####

Conditions enable workflow rules that govern whether a transition can execute.

##### Check field value #####

A condition rule evaluates as true if a specific field's value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field's value matches the desired condition.

    {
       "ruleKey": "system:check-field-value",
       "parameters": {
         "fieldId": "description",
         "fieldValue": "[\"Done\"]",
         "comparator": "=",
         "comparisonType": "STRING"
       }
     }

Parameters:

 *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
 *  `fieldValue` the list of values to check against the field\\u2019s value.
 *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
 *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.

##### Restrict issue transition #####

This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.

    {
       "ruleKey": "system:restrict-issue-transition",
       "parameters": {
         "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",
         "roleIds": "10002,10004",
         "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",
         "permissionKeys": "ADMINISTER_PROJECTS",
         "groupCustomFields": "customfield_10028",
         "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",
         "denyUserCustomFields": "customfield_10107"
       }
     }

Parameters:

 *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects
 *  `roleIds` a comma-separated list of role IDs.
 *  `groupIds` a comma-separated list of group IDs.
 *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
 *  `groupCustomFields` a comma-separated list of group custom field IDs.
 *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.
 *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.

This rule is composed by aggregating the following legacy rules:

 *  AllowOnlyAssignee
 *  AllowOnlyReporter
 *  InAnyProjectRoleCondition
 *  InProjectRoleCondition
 *  UserInAnyGroupCondition
 *  UserInGroupCondition
 *  PermissionCondtion
 *  InGroupCFCondition
 *  UserIsInCustomFieldCondition

##### Previous status condition #####

A condition that evaluates based on an issue's previous status(es) and specific criteria.

    {
       "ruleKey" : "system:previous-status-condition"
       "parameters" : {
         "previousStatusIds" : "10004",
         "not": "true",
         "mostRecentStatusOnly" : "true",
         "includeCurrentStatus": "true",
         "ignoreLoopTransitions": "true"
       }
     }

Parameters:

 *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.
 *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.
 *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
 *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.
 *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.

##### Parent or child blocking condition #####

A condition to block the parent\\u2019s issue transition depending on the child\\u2019s issue status.

    {
       "ruleKey" : "system:parent-or-child-blocking-condition"
       "parameters" : {
         "blocker" : "CHILD",
         "statusIds" : "1,2,3"
       }
     }

Parameters:

 *  `blocker` currently only supports `CHILD`.
 *  `statusIds` a comma-separated list of status IDs.

##### Separation of duties #####

A condition preventing the user from performing, if the user has already performed a transition on the issue.

    {
       "ruleKey": "system:separation-of-duties",
       "parameters": {
         "fromStatusId": "10161",
         "toStatusId": "10160"
       }
     }

Parameters:

 *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.
 *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.

##### Restrict transitions #####

A condition preventing all users from transitioning the issue can also optionally include APIs as well.

    {
       "ruleKey": "system:restrict-from-all-users",
       "parameters": {
         "restrictMode": "users"
       }
     }

Parameters:

 *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.

##### Jira Service Management block until approved #####

Block an issue transition until approval. Note: This is only supported in team-managed projects.

    {
       "ruleKey": "system:jsd-approvals-block-until-approved",
       "parameters": {
         "approvalConfigurationJson": "{"statusExternalUuid...}"
       }
     }

Parameters:

 *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.

##### Jira Service Management block until rejected #####

Block an issue transition until rejected. Note: This is only supported in team-managed projects.

    {
       "ruleKey": "system:jsd-approvals-block-until-rejected",
       "parameters": {
         "approvalConfigurationJson": "{"statusExternalUuid...}"
       }
     }

Parameters:

 *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.

##### Block in progress approval #####

Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.

    {
       "ruleKey": "system:block-in-progress-approval",
       "parameters": {}
     }

#### Post functions ####

Post functions carry out any additional processing required after a workflow transition is executed.

##### Change assignee #####

A post function rule that changes the assignee of an issue after a transition.

    {
       "ruleKey": "system:change-assignee",
       "parameters": {
         "type": "to-selected-user",
         "accountId": "example-account-id"
       }
     }

Parameters:

 *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`
 *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.

##### Copy field value #####

A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.

    {
       "ruleKey": "system:copy-value-from-other-field",
       "parameters": {
         "sourceFieldKey": "description",
         "targetFieldKey": "components",
         "issueSource": "SAME"
       }
     }

Parameters:

 *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`
 *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`
 *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.

##### Update field #####

A post function that updates or appends a specific field with the given value.

    {
       "ruleKey": "system:update-field",
       "parameters": {
         "field": "customfield_10056",
         "value": "asdf",
         "mode": "append"
       }
     }

Parameters:

 *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`
 *  `value` the value to update the field with.
 *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.

##### Trigger webhook #####

A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.

    {
       "ruleKey": "system:trigger-webhook",
       "parameters": {
         "webhookId": "1"
       }
     }

Parameters:

 *  `webhookId` the ID of the webhook.

#### Screen ####

##### Remind people to update fields #####

A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.

    {
       "ruleKey": "system:remind-people-to-update-fields",
       "params": {
         "remindingFieldIds": "assignee,customfield_10025",
         "remindingMessage": "The message",
         "remindingAlwaysAsk": "true"
       }
     }

Parameters:

 *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
 *  `remindingMessage` the message to display when prompting the users to update the fields.
 *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.

##### Shared transition screen #####

A common screen that is shared between transitions in a workflow.

    {
       "ruleKey": "system:transition-screen",
       "params": {
         "screenId": "3"
       }
     }

Parameters:

 *  `screenId` the ID of the screen.

#### Connect & Forge ####

##### Connect rules #####

Validator/Condition/Post function for Connect app.

    {
       "ruleKey": "connect:expression-validator",
       "parameters": {
         "appKey": "com.atlassian.app",
         "config": "",
         "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",
         "disabled": "false",
         "tag": ""
       }
     }

Parameters:

 *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`
 *  `appKey` the reference to the Connect app
 *  `config` a JSON payload string describing the configuration
 *  `id` the ID of the rule
 *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.
 *  `tag` additional tags for the Connect app

##### Forge rules #####

Validator/Condition/Post function for Forge app.

    {
       "ruleKey": "forge:expression-validator",
       "parameters": {
         "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",
         "config": "{"searchString":"workflow validator"}",
         "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"
       }
     }

Parameters:

 *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`
 *  `key` the identifier for the Forge app
 *  `config` the persistent stringified JSON configuration for the Forge rule
 *  `id` the ID of the Forge rule

        :param workflowId: workflowId
        :param projectId: projectId
        :param issueTypeId: issueTypeId
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get available workflow capabilities", False)

        try:
            endpoint = "/rest/api/2/workflows/capabilities"
            params = {}
            if workflowId is not None:
                params["workflowId"] = workflowId
            if projectId is not None:
                params["projectId"] = projectId
            if issueTypeId is not None:
                params["issueTypeId"] = issueTypeId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get available workflow capabilities Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get available workflow capabilities completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get available workflow capabilities failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createWorkflows(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Create workflows and related statuses.

**[Permissions](#permissions) required:**

 *  *Administer Jira* project permission to create all, including global-scoped, workflows
 *  *Administer projects* project permissions to create project-scoped workflows


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk create workflows", False)

        try:
            endpoint = "/rest/api/2/workflows/create"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk create workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk create workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk create workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def validateCreateWorkflows(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Validate the payload for bulk create workflows.

**[Permissions](#permissions) required:**

 *  *Administer Jira* project permission to create all, including global-scoped, workflows
 *  *Administer projects* project permissions to create project-scoped workflows


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Validate create workflows", False)

        try:
            endpoint = "/rest/api/2/workflows/create/validation"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Validate create workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Validate create workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Validate create workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def searchWorkflows(self, startAt: int = None, maxResults: int = None, expand: str = None, queryString: str = None, orderBy: str = None, scope: str = None, isActive: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of global and project workflows. If workflow names are specified in query string, details of those workflows are returned. Otherwise, all workflows are returned.

**[Permissions](#permissions) required:**

 *  *Administer Jira* global permission to access all, including project-scoped, workflows
 *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `values.transitions` Returns the transitions that each workflow is associated with.
        :param queryString: String used to perform a case-insensitive partial match with workflow name.
        :param orderBy: [Order](#ordering) the results by a field:

 *  `name` Sorts by workflow name.
 *  `created` Sorts by create time.
 *  `updated` Sorts by update time.
        :param scope: The scope of the workflow. Global for company-managed projects and Project for team-managed projects.
        :param isActive: Filters active and inactive workflows.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Search workflows", False)

        try:
            endpoint = "/rest/api/2/workflows/search"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults
            if expand is not None:
                params["expand"] = expand
            if queryString is not None:
                params["queryString"] = queryString
            if orderBy is not None:
                params["orderBy"] = orderBy
            if scope is not None:
                params["scope"] = scope
            if isActive is not None:
                params["isActive"] = isActive

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Search workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Search workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Search workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflows(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Update workflows and related statuses.

**[Permissions](#permissions) required:**

 *  *Administer Jira* project permission to create all, including global-scoped, workflows
 *  *Administer projects* project permissions to create project-scoped workflows

        :param expand: Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
 *  `statuses.usages` Returns the project and issue types that each status is associated with.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk update workflows", False)

        try:
            endpoint = "/rest/api/2/workflows/update"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk update workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk update workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk update workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def validateUpdateWorkflows(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Validate the payload for bulk update workflows.

**[Permissions](#permissions) required:**

 *  *Administer Jira* project permission to create all, including global-scoped, workflows
 *  *Administer projects* project permissions to create project-scoped workflows


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Validate update workflows", False)

        try:
            endpoint = "/rest/api/2/workflows/update/validation"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Validate update workflows Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Validate update workflows completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Validate update workflows failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getAllWorkflowSchemes(self, startAt: int = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param startAt: The index of the first item to return in a page of results (page offset).
        :param maxResults: The maximum number of items to return per page.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get all workflow schemes", False)

        try:
            endpoint = "/rest/api/2/workflowscheme"
            params = {}
            if startAt is not None:
                params["startAt"] = startAt
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get all workflow schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get all workflow schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get all workflow schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createWorkflowScheme(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Creates a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create workflow scheme", False)

        try:
            endpoint = "/rest/api/2/workflowscheme"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowSchemeProjectAssociations(self, projectId: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.

If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param projectId: The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow scheme project associations", False)

        try:
            endpoint = "/rest/api/2/workflowscheme/project"
            params = {}
            if projectId is not None:
                params["projectId"] = projectId

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow scheme project associations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow scheme project associations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow scheme project associations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def assignSchemeToProject(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.

Workflow schemes can only be assigned to classic projects.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Assign workflow scheme to project", False)

        try:
            endpoint = "/rest/api/2/workflowscheme/project"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Assign workflow scheme to project Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Assign workflow scheme to project completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Assign workflow scheme to project failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def readWorkflowSchemes(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.

**[Permissions](#permissions) required:**

 *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
 *  *Administer projects* project permissions to access project-scoped workflow schemes

        :param expand: Deprecated. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-2298) for details.

Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:

 *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk get workflow schemes", False)

        try:
            endpoint = "/rest/api/2/workflowscheme/read"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk get workflow schemes Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk get workflow schemes completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk get workflow schemes failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateSchemes(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.

**[Permissions](#permissions) required:**

 *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
 *  *Administer projects* project permission to update project-scoped workflow schemes.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update workflow scheme", False)

        try:
            endpoint = "/rest/api/2/workflowscheme/update"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflowSchemeMappings(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.

**[Permissions](#permissions) required:**

 *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
 *  *Administer projects* project permission to update project-scoped workflow schemes.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get required status mappings for workflow scheme update", False)

        try:
            endpoint = "/rest/api/2/workflowscheme/update/mappings"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get required status mappings for workflow scheme update Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get required status mappings for workflow scheme update completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get required status mappings for workflow scheme update failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowScheme(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowScheme(self, id: int, returnDraftIfExists: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
        :param returnDraftIfExists: Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}"
            params = {}
            if returnDraftIfExists is not None:
                params["returnDraftIfExists"] = returnDraftIfExists

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflowScheme(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Classic update workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Classic update workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Classic update workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Classic update workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def createWorkflowSchemeDraftFromParent(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the active workflow scheme that the draft is created from.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Create draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/createdraft"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Create draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Create draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Create draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteDefaultWorkflow(self, id: int, updateDraftIfNeeded: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param updateDraftIfNeeded: Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete default workflow", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/default"
            params = {}
            if updateDraftIfNeeded is not None:
                params["updateDraftIfNeeded"] = updateDraftIfNeeded

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete default workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete default workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete default workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDefaultWorkflow(self, id: int, returnDraftIfExists: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param returnDraftIfExists: Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get default workflow", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/default"
            params = {}
            if returnDraftIfExists is not None:
                params["returnDraftIfExists"] = returnDraftIfExists

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get default workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get default workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get default workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateDefaultWorkflow(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the default workflow for a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update default workflow", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update default workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update default workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update default workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowSchemeDraft(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the active workflow scheme that the draft was created from.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowSchemeDraft(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.  
Note that:

 *  Only active workflow schemes can have draft workflow schemes.
 *  An active workflow scheme can only have one draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the active workflow scheme that the draft was created from.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflowSchemeDraft(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the active workflow scheme that the draft was created from.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteDraftDefaultWorkflow(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete draft default workflow", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/default"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete draft default workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete draft default workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete draft default workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDraftDefaultWorkflow(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get draft default workflow", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/default"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get draft default workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get draft default workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get draft default workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateDraftDefaultWorkflow(self, id: int, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the default workflow for a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Update draft default workflow", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/default"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Update draft default workflow Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Update draft default workflow completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Update draft default workflow failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowSchemeDraftIssueType(self, id: int, issueType: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param issueType: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete workflow for issue type in draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/issuetype/{issueType}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete workflow for issue type in draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete workflow for issue type in draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete workflow for issue type in draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowSchemeDraftIssueType(self, id: int, issueType: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param issueType: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow for issue type in draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/issuetype/{issueType}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow for issue type in draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow for issue type in draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow for issue type in draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setWorkflowSchemeDraftIssueType(self, id: int, issueType: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the workflow for an issue type in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param issueType: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set workflow for issue type in draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/issuetype/{issueType}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set workflow for issue type in draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set workflow for issue type in draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set workflow for issue type in draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def publishDraftWorkflowScheme(self, id: int, validateOnly: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Publishes a draft workflow scheme.

Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.

This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-2-task-taskId-get) to obtain updates.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param validateOnly: Whether the request only performs a validation.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Publish draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/publish"
            params = {}
            if validateOnly is not None:
                params["validateOnly"] = validateOnly
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Publish draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Publish draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Publish draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteDraftWorkflowMapping(self, id: int, workflowName: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param workflowName: The name of the workflow.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue types for workflow in draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue types for workflow in draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue types for workflow in draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue types for workflow in draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getDraftWorkflow(self, id: int, workflowName: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the workflow-issue type mappings for a workflow scheme's draft.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param workflowName: The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue types for workflows in draft workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue types for workflows in draft workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue types for workflows in draft workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue types for workflows in draft workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateDraftWorkflowMapping(self, id: int, workflowName: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme that the draft belongs to.
        :param workflowName: The name of the workflow.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set issue types for workflow in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/draft/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set issue types for workflow in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set issue types for workflow in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set issue types for workflow in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowSchemeIssueType(self, id: int, issueType: str, updateDraftIfNeeded: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the issue type-workflow mapping for an issue type in a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param issueType: The ID of the issue type.
        :param updateDraftIfNeeded: Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete workflow for issue type in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/issuetype/{issueType}"
            params = {}
            if updateDraftIfNeeded is not None:
                params["updateDraftIfNeeded"] = updateDraftIfNeeded

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete workflow for issue type in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete workflow for issue type in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete workflow for issue type in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflowSchemeIssueType(self, id: int, issueType: str, returnDraftIfExists: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the issue type-workflow mapping for an issue type in a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param issueType: The ID of the issue type.
        :param returnDraftIfExists: Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow for issue type in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/issuetype/{issueType}"
            params = {}
            if returnDraftIfExists is not None:
                params["returnDraftIfExists"] = returnDraftIfExists

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow for issue type in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow for issue type in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow for issue type in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def setWorkflowSchemeIssueType(self, id: int, issueType: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the workflow for an issue type in a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param issueType: The ID of the issue type.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set workflow for issue type in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/issuetype/{issueType}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set workflow for issue type in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set workflow for issue type in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set workflow for issue type in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteWorkflowMapping(self, id: int, workflowName: str, updateDraftIfNeeded: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes the workflow-issue type mapping for a workflow in a workflow scheme.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param workflowName: The name of the workflow.
        :param updateDraftIfNeeded: Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete issue types for workflow in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName
            if updateDraftIfNeeded is not None:
                params["updateDraftIfNeeded"] = updateDraftIfNeeded

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete issue types for workflow in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete issue types for workflow in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete issue types for workflow in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorkflow(self, id: int, workflowName: str = None, returnDraftIfExists: bool = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the workflow-issue type mappings for a workflow scheme.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param workflowName: The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
        :param returnDraftIfExists: Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get issue types for workflows in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName
            if returnDraftIfExists is not None:
                params["returnDraftIfExists"] = returnDraftIfExists

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get issue types for workflows in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get issue types for workflows in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get issue types for workflows in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def updateWorkflowMapping(self, id: int, workflowName: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.

Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.

**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).

        :param id: The ID of the workflow scheme.
        :param workflowName: The name of the workflow.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set issue types for workflow in workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{id}/workflow"
            params = {}
            if workflowName is not None:
                params["workflowName"] = workflowName
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set issue types for workflow in workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set issue types for workflow in workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set issue types for workflow in workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getProjectUsagesForWorkflowScheme(self, workflowSchemeId: str, nextPageToken: str = None, maxResults: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a page of projects using a given workflow scheme.

        :param workflowSchemeId: The workflow scheme ID
        :param nextPageToken: The cursor for pagination
        :param maxResults: The maximum number of results to return. Must be an integer between 1 and 200.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get projects which are using a given workflow scheme", False)

        try:
            endpoint = f"/rest/api/2/workflowscheme/{workflowSchemeId}/projectUsages"
            params = {}
            if nextPageToken is not None:
                params["nextPageToken"] = nextPageToken
            if maxResults is not None:
                params["maxResults"] = maxResults

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get projects which are using a given workflow scheme Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get projects which are using a given workflow scheme completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get projects which are using a given workflow scheme failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIdsOfWorklogsDeletedSince(self, since: int = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.

This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.

This resource does not return worklogs deleted during the minute preceding the request.

**[Permissions](#permissions) required:** Permission to access Jira.

        :param since: The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get IDs of deleted worklogs", False)

        try:
            endpoint = "/rest/api/2/worklog/deleted"
            params = {}
            if since is not None:
                params["since"] = since

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get IDs of deleted worklogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get IDs of deleted worklogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get IDs of deleted worklogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getWorklogsForIds(self, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns worklog details for a list of worklog IDs.

The returned list of worklogs is limited to 1000 items.

**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

 *  the worklog is set as *Viewable by All Users*.
 *  the user is a member of a project role or group with permission to view the worklog.

        :param expand: Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get worklogs", False)

        try:
            endpoint = "/rest/api/2/worklog/list"
            params = {}
            if expand is not None:
                params["expand"] = expand
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get worklogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get worklogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get worklogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def getIdsOfWorklogsModifiedSince(self, since: int = None, expand: str = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns a list of IDs and update timestamps for worklogs updated after a date and time.

This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.

This resource does not return worklogs updated during the minute preceding the request.

**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:

 *  the worklog is set as *Viewable by All Users*.
 *  the user is a member of a project role or group with permission to view the worklog.

        :param since: The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.
        :param expand: Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get IDs of updated worklogs", False)

        try:
            endpoint = "/rest/api/2/worklog/updated"
            params = {}
            if since is not None:
                params["since"] = since
            if expand is not None:
                params["expand"] = expand

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get IDs of updated worklogs Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get IDs of updated worklogs completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get IDs of updated worklogs failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def AddonPropertiesResource.getAddonProperties_get(self, addonKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Gets all the properties of an app.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).

        :param addonKey: The key of the app, as defined in its descriptor.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get app properties", False)

        try:
            endpoint = f"/rest/atlassian-connect/1/addons/{addonKey}/properties"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get app properties Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get app properties completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get app properties failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def AddonPropertiesResource.deleteAddonProperty_delete(self, addonKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes an app's property.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).

        :param addonKey: The key of the app, as defined in its descriptor.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete app property", False)

        try:
            endpoint = f"/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete app property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete app property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete app property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def AddonPropertiesResource.getAddonProperty_get(self, addonKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns the key and value of an app's property.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).

        :param addonKey: The key of the app, as defined in its descriptor.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get app property", False)

        try:
            endpoint = f"/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get app property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get app property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get app property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def AddonPropertiesResource.putAddonProperty_put(self, addonKey: str, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of an app's property. Use this resource to store custom data for your app.

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).

        :param addonKey: The key of the app, as defined in its descriptor.
        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set app property", False)

        try:
            endpoint = f"/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set app property Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set app property completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set app property failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def DynamicModulesResource.removeModules_delete(self, moduleKey: List[Any] = None, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Remove all or a list of modules registered by the calling app.

**[Permissions](#permissions) required:** Only Connect apps can make this request.

        :param moduleKey: The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.
Nonexistent keys are ignored.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Remove modules", False)

        try:
            endpoint = "/rest/atlassian-connect/1/app/module/dynamic"
            params = {}
            if moduleKey is not None:
                params["moduleKey"] = moduleKey

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Remove modules Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Remove modules completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Remove modules failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def DynamicModulesResource.getModules_get(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns all modules registered dynamically by the calling app.

**[Permissions](#permissions) required:** Only Connect apps can make this request.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get modules", False)

        try:
            endpoint = "/rest/atlassian-connect/1/app/module/dynamic"
            params = None

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get modules Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get modules completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get modules failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def DynamicModulesResource.registerModules_post(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Registers a list of modules.

**[Permissions](#permissions) required:** Only Connect apps can make this request.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Register modules", False)

        try:
            endpoint = "/rest/atlassian-connect/1/app/module/dynamic"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Register modules Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Register modules completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Register modules failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def AppIssueFieldValueUpdateResource.updateIssueFields_put(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the value of a custom field added by Connect apps on one or more issues.
The values of up to 200 custom fields can be updated.

**[Permissions](#permissions) required:** Only Connect apps can make this request


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk update custom field value", False)

        try:
            endpoint = "/rest/atlassian-connect/1/migration/field"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk update custom field value Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk update custom field value completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk update custom field value failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def MigrationResource.updateEntityPropertiesValue_put(self, entityType: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.

        :param entityType: The type indicating the object that contains the entity properties.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Bulk update entity properties", False)

        try:
            endpoint = f"/rest/atlassian-connect/1/migration/properties/{entityType}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Bulk update entity properties Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Bulk update entity properties completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Bulk update entity properties failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def MigrationResource.workflowRuleSearch_post(self, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.


        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Get workflow transition rule configurations", False)

        try:
            endpoint = "/rest/atlassian-connect/1/migration/workflow/rule/search"
            params = None
            request_data = None

            result = self._make_api_request("POST", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Get workflow transition rule configurations Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Get workflow transition rule configurations completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Get workflow transition rule configurations failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def ServiceRegistryResource.services_get(self, serviceIds: List[Any], __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Retrieve the attributes of given service registries.

**[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting

        :param serviceIds: The ID of the services (the strings starting with "b:" need to be decoded in Base64).
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Retrieve the attributes of service registries", False)

        try:
            endpoint = "/rest/atlassian-connect/1/service-registry"
            params = {}
            if serviceIds is not None:
                params["serviceIds"] = serviceIds

            result = self._make_api_request("GET", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Retrieve the attributes of service registries Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Retrieve the attributes of service registries completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Retrieve the attributes of service registries failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def deleteForgeAppProperty(self, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Deletes a Forge app's property.

**[Permissions](#permissions) required:** Only Forge apps can make this request.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Delete app property (Forge)", False)

        try:
            endpoint = f"/rest/forge/1/app/properties/{propertyKey}"
            params = None

            result = self._make_api_request("DELETE", endpoint, __user__, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Delete app property (Forge) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Delete app property (Forge) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Delete app property (Forge) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)
    async def putForgeAppProperty(self, propertyKey: str, __user__: dict = {}, __event_emitter__: Callable[[dict], Awaitable[None]] = None) -> str:
        """
        Sets the value of a Forge app's property.
These values can be retrieved in [Jira expressions](/cloud/jira/platform/jira-expressions/)
through the `app` [context variable](/cloud/jira/platform/jira-expressions/#context-variables).
They are also available in [entity property display conditions](/platform/forge/manifest-reference/display-conditions/entity-property-conditions/).

For other use cases, use the [Storage API](/platform/forge/runtime-reference/storage-api/).

The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.

**[Permissions](#permissions) required:** Only Forge apps can make this request.

The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.

        :param propertyKey: The key of the property.
        :return: API response as JSON string
        """
        event_emitter = None
        if __event_emitter__:
            event_emitter = EventEmitter(__event_emitter__)
            await event_emitter.emit_status(f"Processing Set app property (Forge)", False)

        try:
            endpoint = f"/rest/forge/1/app/properties/{propertyKey}"
            params = None
            request_data = None

            result = self._make_api_request("PUT", endpoint, __user__, data=request_data, params=params)

            if event_emitter:
                result_obj = json.loads(result)
                if "error" in result_obj:
                    await event_emitter.emit_status(f"Request failed: {result_obj['error']}", True, True)
                else:
                    await event_emitter.emit_message(f"### Set app property (Forge) Result\n\n```json\n{json.dumps(result_obj, indent=2)}\n```")
                    await event_emitter.emit_status(f"Set app property (Forge) completed successfully", True)

            return result

        except Exception as e:
            error_message = str(e)
            if event_emitter:
                await event_emitter.emit_status(f"Operation failed: {error_message}", True, True)

            error_response = {"error": f"Set app property (Forge) failed: {error_message}"}
            return json.dumps(error_response, ensure_ascii=False)